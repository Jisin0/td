// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessageTTL represents TL type `messageTtl#80950a73`.
type MessageTTL struct {
	// Message TTL setting, in seconds. If 0, then messages aren't deleted automatically
	TTL int32
}

// MessageTTLTypeID is TL type id of MessageTTL.
const MessageTTLTypeID = 0x80950a73

// Ensuring interfaces in compile-time for MessageTTL.
var (
	_ bin.Encoder     = &MessageTTL{}
	_ bin.Decoder     = &MessageTTL{}
	_ bin.BareEncoder = &MessageTTL{}
	_ bin.BareDecoder = &MessageTTL{}
)

func (m *MessageTTL) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.TTL == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageTTL) String() string {
	if m == nil {
		return "MessageTTL(nil)"
	}
	type Alias MessageTTL
	return fmt.Sprintf("MessageTTL%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageTTL) TypeID() uint32 {
	return MessageTTLTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageTTL) TypeName() string {
	return "messageTtl"
}

// TypeInfo returns info about TL type.
func (m *MessageTTL) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageTtl",
		ID:   MessageTTLTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "TTL",
			SchemaName: "ttl",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageTTL) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageTtl#80950a73 as nil")
	}
	b.PutID(MessageTTLTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageTTL) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageTtl#80950a73 as nil")
	}
	b.PutInt32(m.TTL)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageTTL) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageTtl#80950a73 to nil")
	}
	if err := b.ConsumeID(MessageTTLTypeID); err != nil {
		return fmt.Errorf("unable to decode messageTtl#80950a73: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageTTL) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageTtl#80950a73 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode messageTtl#80950a73: field ttl: %w", err)
		}
		m.TTL = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageTTL) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageTtl#80950a73 as nil")
	}
	b.ObjStart()
	b.PutID("messageTtl")
	b.Comma()
	b.FieldStart("ttl")
	b.PutInt32(m.TTL)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageTTL) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageTtl#80950a73 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageTtl"); err != nil {
				return fmt.Errorf("unable to decode messageTtl#80950a73: %w", err)
			}
		case "ttl":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode messageTtl#80950a73: field ttl: %w", err)
			}
			m.TTL = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetTTL returns value of TTL field.
func (m *MessageTTL) GetTTL() (value int32) {
	if m == nil {
		return
	}
	return m.TTL
}
