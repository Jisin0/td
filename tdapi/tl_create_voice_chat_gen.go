// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// CreateVoiceChatRequest represents TL type `createVoiceChat#49dff969`.
type CreateVoiceChatRequest struct {
	// Chat identifier, in which the voice chat will be created
	ChatID int64
	// Group call title; if empty, chat title will be used
	Title string
	// Point in time (Unix timestamp) when the group call is supposed to be started by an
	// administrator; 0 to start the voice chat immediately. The date must be at least 10
	// seconds and at most 8 days in the future
	StartDate int32
}

// CreateVoiceChatRequestTypeID is TL type id of CreateVoiceChatRequest.
const CreateVoiceChatRequestTypeID = 0x49dff969

// Ensuring interfaces in compile-time for CreateVoiceChatRequest.
var (
	_ bin.Encoder     = &CreateVoiceChatRequest{}
	_ bin.Decoder     = &CreateVoiceChatRequest{}
	_ bin.BareEncoder = &CreateVoiceChatRequest{}
	_ bin.BareDecoder = &CreateVoiceChatRequest{}
)

func (c *CreateVoiceChatRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.ChatID == 0) {
		return false
	}
	if !(c.Title == "") {
		return false
	}
	if !(c.StartDate == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CreateVoiceChatRequest) String() string {
	if c == nil {
		return "CreateVoiceChatRequest(nil)"
	}
	type Alias CreateVoiceChatRequest
	return fmt.Sprintf("CreateVoiceChatRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CreateVoiceChatRequest) TypeID() uint32 {
	return CreateVoiceChatRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*CreateVoiceChatRequest) TypeName() string {
	return "createVoiceChat"
}

// TypeInfo returns info about TL type.
func (c *CreateVoiceChatRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "createVoiceChat",
		ID:   CreateVoiceChatRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "StartDate",
			SchemaName: "start_date",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CreateVoiceChatRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode createVoiceChat#49dff969 as nil")
	}
	b.PutID(CreateVoiceChatRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CreateVoiceChatRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode createVoiceChat#49dff969 as nil")
	}
	b.PutLong(c.ChatID)
	b.PutString(c.Title)
	b.PutInt32(c.StartDate)
	return nil
}

// Decode implements bin.Decoder.
func (c *CreateVoiceChatRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode createVoiceChat#49dff969 to nil")
	}
	if err := b.ConsumeID(CreateVoiceChatRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode createVoiceChat#49dff969: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CreateVoiceChatRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode createVoiceChat#49dff969 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode createVoiceChat#49dff969: field chat_id: %w", err)
		}
		c.ChatID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode createVoiceChat#49dff969: field title: %w", err)
		}
		c.Title = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode createVoiceChat#49dff969: field start_date: %w", err)
		}
		c.StartDate = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CreateVoiceChatRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode createVoiceChat#49dff969 as nil")
	}
	b.ObjStart()
	b.PutID("createVoiceChat")
	b.FieldStart("chat_id")
	b.PutLong(c.ChatID)
	b.FieldStart("title")
	b.PutString(c.Title)
	b.FieldStart("start_date")
	b.PutInt32(c.StartDate)
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CreateVoiceChatRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode createVoiceChat#49dff969 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("createVoiceChat"); err != nil {
				return fmt.Errorf("unable to decode createVoiceChat#49dff969: %w", err)
			}
		case "chat_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode createVoiceChat#49dff969: field chat_id: %w", err)
			}
			c.ChatID = value
		case "title":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode createVoiceChat#49dff969: field title: %w", err)
			}
			c.Title = value
		case "start_date":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode createVoiceChat#49dff969: field start_date: %w", err)
			}
			c.StartDate = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (c *CreateVoiceChatRequest) GetChatID() (value int64) {
	return c.ChatID
}

// GetTitle returns value of Title field.
func (c *CreateVoiceChatRequest) GetTitle() (value string) {
	return c.Title
}

// GetStartDate returns value of StartDate field.
func (c *CreateVoiceChatRequest) GetStartDate() (value int32) {
	return c.StartDate
}

// CreateVoiceChat invokes method createVoiceChat#49dff969 returning error if any.
func (c *Client) CreateVoiceChat(ctx context.Context, request *CreateVoiceChatRequest) (*GroupCallID, error) {
	var result GroupCallID

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
