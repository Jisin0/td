// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AttachmentMenuBot represents TL type `attachmentMenuBot#5e82be30`.
type AttachmentMenuBot struct {
	// User identifier of the bot added to attachment menu
	BotUserID int64
	// Name for the bot in attachment menu
	Name string
	// Color to highlight selected name of the bot if appropriate; may be null
	NameColor AttachmentMenuBotColor
	// Default attachment menu icon for the bot in SVG format; may be null
	DefaultIcon File
	// Attachment menu icon for the bot in SVG format for the official iOS app; may be null
	IosStaticIcon File
	// Attachment menu icon for the bot in TGS format for the official iOS app; may be null
	IosAnimatedIcon File
	// Attachment menu icon for the bot in TGS format for the official Android app; may be
	// null
	AndroidIcon File
	// Attachment menu icon for the bot in TGS format for the official native macOS app; may
	// be null
	MacosIcon File
	// Color to highlight selected icon of the bot if appropriate; may be null
	IconColor AttachmentMenuBotColor
}

// AttachmentMenuBotTypeID is TL type id of AttachmentMenuBot.
const AttachmentMenuBotTypeID = 0x5e82be30

// Ensuring interfaces in compile-time for AttachmentMenuBot.
var (
	_ bin.Encoder     = &AttachmentMenuBot{}
	_ bin.Decoder     = &AttachmentMenuBot{}
	_ bin.BareEncoder = &AttachmentMenuBot{}
	_ bin.BareDecoder = &AttachmentMenuBot{}
)

func (a *AttachmentMenuBot) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.BotUserID == 0) {
		return false
	}
	if !(a.Name == "") {
		return false
	}
	if !(a.NameColor.Zero()) {
		return false
	}
	if !(a.DefaultIcon.Zero()) {
		return false
	}
	if !(a.IosStaticIcon.Zero()) {
		return false
	}
	if !(a.IosAnimatedIcon.Zero()) {
		return false
	}
	if !(a.AndroidIcon.Zero()) {
		return false
	}
	if !(a.MacosIcon.Zero()) {
		return false
	}
	if !(a.IconColor.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AttachmentMenuBot) String() string {
	if a == nil {
		return "AttachmentMenuBot(nil)"
	}
	type Alias AttachmentMenuBot
	return fmt.Sprintf("AttachmentMenuBot%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AttachmentMenuBot) TypeID() uint32 {
	return AttachmentMenuBotTypeID
}

// TypeName returns name of type in TL schema.
func (*AttachmentMenuBot) TypeName() string {
	return "attachmentMenuBot"
}

// TypeInfo returns info about TL type.
func (a *AttachmentMenuBot) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "attachmentMenuBot",
		ID:   AttachmentMenuBotTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "Name",
			SchemaName: "name",
		},
		{
			Name:       "NameColor",
			SchemaName: "name_color",
		},
		{
			Name:       "DefaultIcon",
			SchemaName: "default_icon",
		},
		{
			Name:       "IosStaticIcon",
			SchemaName: "ios_static_icon",
		},
		{
			Name:       "IosAnimatedIcon",
			SchemaName: "ios_animated_icon",
		},
		{
			Name:       "AndroidIcon",
			SchemaName: "android_icon",
		},
		{
			Name:       "MacosIcon",
			SchemaName: "macos_icon",
		},
		{
			Name:       "IconColor",
			SchemaName: "icon_color",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AttachmentMenuBot) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode attachmentMenuBot#5e82be30 as nil")
	}
	b.PutID(AttachmentMenuBotTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AttachmentMenuBot) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode attachmentMenuBot#5e82be30 as nil")
	}
	b.PutInt53(a.BotUserID)
	b.PutString(a.Name)
	if err := a.NameColor.Encode(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field name_color: %w", err)
	}
	if err := a.DefaultIcon.Encode(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field default_icon: %w", err)
	}
	if err := a.IosStaticIcon.Encode(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field ios_static_icon: %w", err)
	}
	if err := a.IosAnimatedIcon.Encode(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field ios_animated_icon: %w", err)
	}
	if err := a.AndroidIcon.Encode(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field android_icon: %w", err)
	}
	if err := a.MacosIcon.Encode(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field macos_icon: %w", err)
	}
	if err := a.IconColor.Encode(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field icon_color: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (a *AttachmentMenuBot) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode attachmentMenuBot#5e82be30 to nil")
	}
	if err := b.ConsumeID(AttachmentMenuBotTypeID); err != nil {
		return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AttachmentMenuBot) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode attachmentMenuBot#5e82be30 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field bot_user_id: %w", err)
		}
		a.BotUserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field name: %w", err)
		}
		a.Name = value
	}
	{
		if err := a.NameColor.Decode(b); err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field name_color: %w", err)
		}
	}
	{
		if err := a.DefaultIcon.Decode(b); err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field default_icon: %w", err)
		}
	}
	{
		if err := a.IosStaticIcon.Decode(b); err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field ios_static_icon: %w", err)
		}
	}
	{
		if err := a.IosAnimatedIcon.Decode(b); err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field ios_animated_icon: %w", err)
		}
	}
	{
		if err := a.AndroidIcon.Decode(b); err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field android_icon: %w", err)
		}
	}
	{
		if err := a.MacosIcon.Decode(b); err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field macos_icon: %w", err)
		}
	}
	{
		if err := a.IconColor.Decode(b); err != nil {
			return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field icon_color: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AttachmentMenuBot) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode attachmentMenuBot#5e82be30 as nil")
	}
	b.ObjStart()
	b.PutID("attachmentMenuBot")
	b.Comma()
	b.FieldStart("bot_user_id")
	b.PutInt53(a.BotUserID)
	b.Comma()
	b.FieldStart("name")
	b.PutString(a.Name)
	b.Comma()
	b.FieldStart("name_color")
	if err := a.NameColor.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field name_color: %w", err)
	}
	b.Comma()
	b.FieldStart("default_icon")
	if err := a.DefaultIcon.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field default_icon: %w", err)
	}
	b.Comma()
	b.FieldStart("ios_static_icon")
	if err := a.IosStaticIcon.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field ios_static_icon: %w", err)
	}
	b.Comma()
	b.FieldStart("ios_animated_icon")
	if err := a.IosAnimatedIcon.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field ios_animated_icon: %w", err)
	}
	b.Comma()
	b.FieldStart("android_icon")
	if err := a.AndroidIcon.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field android_icon: %w", err)
	}
	b.Comma()
	b.FieldStart("macos_icon")
	if err := a.MacosIcon.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field macos_icon: %w", err)
	}
	b.Comma()
	b.FieldStart("icon_color")
	if err := a.IconColor.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode attachmentMenuBot#5e82be30: field icon_color: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AttachmentMenuBot) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode attachmentMenuBot#5e82be30 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("attachmentMenuBot"); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: %w", err)
			}
		case "bot_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field bot_user_id: %w", err)
			}
			a.BotUserID = value
		case "name":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field name: %w", err)
			}
			a.Name = value
		case "name_color":
			if err := a.NameColor.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field name_color: %w", err)
			}
		case "default_icon":
			if err := a.DefaultIcon.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field default_icon: %w", err)
			}
		case "ios_static_icon":
			if err := a.IosStaticIcon.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field ios_static_icon: %w", err)
			}
		case "ios_animated_icon":
			if err := a.IosAnimatedIcon.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field ios_animated_icon: %w", err)
			}
		case "android_icon":
			if err := a.AndroidIcon.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field android_icon: %w", err)
			}
		case "macos_icon":
			if err := a.MacosIcon.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field macos_icon: %w", err)
			}
		case "icon_color":
			if err := a.IconColor.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode attachmentMenuBot#5e82be30: field icon_color: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetBotUserID returns value of BotUserID field.
func (a *AttachmentMenuBot) GetBotUserID() (value int64) {
	if a == nil {
		return
	}
	return a.BotUserID
}

// GetName returns value of Name field.
func (a *AttachmentMenuBot) GetName() (value string) {
	if a == nil {
		return
	}
	return a.Name
}

// GetNameColor returns value of NameColor field.
func (a *AttachmentMenuBot) GetNameColor() (value AttachmentMenuBotColor) {
	if a == nil {
		return
	}
	return a.NameColor
}

// GetDefaultIcon returns value of DefaultIcon field.
func (a *AttachmentMenuBot) GetDefaultIcon() (value File) {
	if a == nil {
		return
	}
	return a.DefaultIcon
}

// GetIosStaticIcon returns value of IosStaticIcon field.
func (a *AttachmentMenuBot) GetIosStaticIcon() (value File) {
	if a == nil {
		return
	}
	return a.IosStaticIcon
}

// GetIosAnimatedIcon returns value of IosAnimatedIcon field.
func (a *AttachmentMenuBot) GetIosAnimatedIcon() (value File) {
	if a == nil {
		return
	}
	return a.IosAnimatedIcon
}

// GetAndroidIcon returns value of AndroidIcon field.
func (a *AttachmentMenuBot) GetAndroidIcon() (value File) {
	if a == nil {
		return
	}
	return a.AndroidIcon
}

// GetMacosIcon returns value of MacosIcon field.
func (a *AttachmentMenuBot) GetMacosIcon() (value File) {
	if a == nil {
		return
	}
	return a.MacosIcon
}

// GetIconColor returns value of IconColor field.
func (a *AttachmentMenuBot) GetIconColor() (value AttachmentMenuBotColor) {
	if a == nil {
		return
	}
	return a.IconColor
}
