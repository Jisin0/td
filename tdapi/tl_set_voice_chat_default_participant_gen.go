// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// SetVoiceChatDefaultParticipantRequest represents TL type `setVoiceChatDefaultParticipant#1f51ee9d`.
type SetVoiceChatDefaultParticipantRequest struct {
	// Chat identifier
	ChatID int64
	// Default group call participant identifier to join the voice chats
	DefaultParticipantID MessageSenderClass
}

// SetVoiceChatDefaultParticipantRequestTypeID is TL type id of SetVoiceChatDefaultParticipantRequest.
const SetVoiceChatDefaultParticipantRequestTypeID = 0x1f51ee9d

// Ensuring interfaces in compile-time for SetVoiceChatDefaultParticipantRequest.
var (
	_ bin.Encoder     = &SetVoiceChatDefaultParticipantRequest{}
	_ bin.Decoder     = &SetVoiceChatDefaultParticipantRequest{}
	_ bin.BareEncoder = &SetVoiceChatDefaultParticipantRequest{}
	_ bin.BareDecoder = &SetVoiceChatDefaultParticipantRequest{}
)

func (s *SetVoiceChatDefaultParticipantRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}
	if !(s.DefaultParticipantID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SetVoiceChatDefaultParticipantRequest) String() string {
	if s == nil {
		return "SetVoiceChatDefaultParticipantRequest(nil)"
	}
	type Alias SetVoiceChatDefaultParticipantRequest
	return fmt.Sprintf("SetVoiceChatDefaultParticipantRequest%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SetVoiceChatDefaultParticipantRequest) TypeID() uint32 {
	return SetVoiceChatDefaultParticipantRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SetVoiceChatDefaultParticipantRequest) TypeName() string {
	return "setVoiceChatDefaultParticipant"
}

// TypeInfo returns info about TL type.
func (s *SetVoiceChatDefaultParticipantRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "setVoiceChatDefaultParticipant",
		ID:   SetVoiceChatDefaultParticipantRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "DefaultParticipantID",
			SchemaName: "default_participant_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SetVoiceChatDefaultParticipantRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setVoiceChatDefaultParticipant#1f51ee9d as nil")
	}
	b.PutID(SetVoiceChatDefaultParticipantRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SetVoiceChatDefaultParticipantRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setVoiceChatDefaultParticipant#1f51ee9d as nil")
	}
	b.PutLong(s.ChatID)
	if s.DefaultParticipantID == nil {
		return fmt.Errorf("unable to encode setVoiceChatDefaultParticipant#1f51ee9d: field default_participant_id is nil")
	}
	if err := s.DefaultParticipantID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode setVoiceChatDefaultParticipant#1f51ee9d: field default_participant_id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SetVoiceChatDefaultParticipantRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setVoiceChatDefaultParticipant#1f51ee9d to nil")
	}
	if err := b.ConsumeID(SetVoiceChatDefaultParticipantRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode setVoiceChatDefaultParticipant#1f51ee9d: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SetVoiceChatDefaultParticipantRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setVoiceChatDefaultParticipant#1f51ee9d to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode setVoiceChatDefaultParticipant#1f51ee9d: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	{
		value, err := DecodeMessageSender(b)
		if err != nil {
			return fmt.Errorf("unable to decode setVoiceChatDefaultParticipant#1f51ee9d: field default_participant_id: %w", err)
		}
		s.DefaultParticipantID = value
	}
	return nil
}

// GetChatID returns value of ChatID field.
func (s *SetVoiceChatDefaultParticipantRequest) GetChatID() (value int64) {
	return s.ChatID
}

// GetDefaultParticipantID returns value of DefaultParticipantID field.
func (s *SetVoiceChatDefaultParticipantRequest) GetDefaultParticipantID() (value MessageSenderClass) {
	return s.DefaultParticipantID
}

// SetVoiceChatDefaultParticipant invokes method setVoiceChatDefaultParticipant#1f51ee9d returning error if any.
func (c *Client) SetVoiceChatDefaultParticipant(ctx context.Context, request *SetVoiceChatDefaultParticipantRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
