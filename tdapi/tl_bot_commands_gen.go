// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// BotCommands represents TL type `botCommands#f479c572`.
type BotCommands struct {
	// Bot's user identifier
	BotUserID int32
	// List of bot commands
	Commands []BotCommand
}

// BotCommandsTypeID is TL type id of BotCommands.
const BotCommandsTypeID = 0xf479c572

// Ensuring interfaces in compile-time for BotCommands.
var (
	_ bin.Encoder     = &BotCommands{}
	_ bin.Decoder     = &BotCommands{}
	_ bin.BareEncoder = &BotCommands{}
	_ bin.BareDecoder = &BotCommands{}
)

func (b *BotCommands) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.BotUserID == 0) {
		return false
	}
	if !(b.Commands == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *BotCommands) String() string {
	if b == nil {
		return "BotCommands(nil)"
	}
	type Alias BotCommands
	return fmt.Sprintf("BotCommands%+v", Alias(*b))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotCommands) TypeID() uint32 {
	return BotCommandsTypeID
}

// TypeName returns name of type in TL schema.
func (*BotCommands) TypeName() string {
	return "botCommands"
}

// TypeInfo returns info about TL type.
func (b *BotCommands) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "botCommands",
		ID:   BotCommandsTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "Commands",
			SchemaName: "commands",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (b *BotCommands) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botCommands#f479c572 as nil")
	}
	buf.PutID(BotCommandsTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *BotCommands) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botCommands#f479c572 as nil")
	}
	buf.PutInt32(b.BotUserID)
	buf.PutInt(len(b.Commands))
	for idx, v := range b.Commands {
		if err := v.EncodeBare(buf); err != nil {
			return fmt.Errorf("unable to encode bare botCommands#f479c572: field commands element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (b *BotCommands) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botCommands#f479c572 to nil")
	}
	if err := buf.ConsumeID(BotCommandsTypeID); err != nil {
		return fmt.Errorf("unable to decode botCommands#f479c572: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *BotCommands) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botCommands#f479c572 to nil")
	}
	{
		value, err := buf.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode botCommands#f479c572: field bot_user_id: %w", err)
		}
		b.BotUserID = value
	}
	{
		headerLen, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode botCommands#f479c572: field commands: %w", err)
		}

		if headerLen > 0 {
			b.Commands = make([]BotCommand, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value BotCommand
			if err := value.DecodeBare(buf); err != nil {
				return fmt.Errorf("unable to decode bare botCommands#f479c572: field commands: %w", err)
			}
			b.Commands = append(b.Commands, value)
		}
	}
	return nil
}

// GetBotUserID returns value of BotUserID field.
func (b *BotCommands) GetBotUserID() (value int32) {
	return b.BotUserID
}

// GetCommands returns value of Commands field.
func (b *BotCommands) GetCommands() (value []BotCommand) {
	return b.Commands
}
