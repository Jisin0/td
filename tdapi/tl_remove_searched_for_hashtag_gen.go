// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// RemoveSearchedForHashtagRequest represents TL type `removeSearchedForHashtag#ac8cfce3`.
type RemoveSearchedForHashtagRequest struct {
	// Hashtag or cashtag to delete
	Hashtag string
}

// RemoveSearchedForHashtagRequestTypeID is TL type id of RemoveSearchedForHashtagRequest.
const RemoveSearchedForHashtagRequestTypeID = 0xac8cfce3

// Ensuring interfaces in compile-time for RemoveSearchedForHashtagRequest.
var (
	_ bin.Encoder     = &RemoveSearchedForHashtagRequest{}
	_ bin.Decoder     = &RemoveSearchedForHashtagRequest{}
	_ bin.BareEncoder = &RemoveSearchedForHashtagRequest{}
	_ bin.BareDecoder = &RemoveSearchedForHashtagRequest{}
)

func (r *RemoveSearchedForHashtagRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Hashtag == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *RemoveSearchedForHashtagRequest) String() string {
	if r == nil {
		return "RemoveSearchedForHashtagRequest(nil)"
	}
	type Alias RemoveSearchedForHashtagRequest
	return fmt.Sprintf("RemoveSearchedForHashtagRequest%+v", Alias(*r))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*RemoveSearchedForHashtagRequest) TypeID() uint32 {
	return RemoveSearchedForHashtagRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*RemoveSearchedForHashtagRequest) TypeName() string {
	return "removeSearchedForHashtag"
}

// TypeInfo returns info about TL type.
func (r *RemoveSearchedForHashtagRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "removeSearchedForHashtag",
		ID:   RemoveSearchedForHashtagRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Hashtag",
			SchemaName: "hashtag",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *RemoveSearchedForHashtagRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode removeSearchedForHashtag#ac8cfce3 as nil")
	}
	b.PutID(RemoveSearchedForHashtagRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *RemoveSearchedForHashtagRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode removeSearchedForHashtag#ac8cfce3 as nil")
	}
	b.PutString(r.Hashtag)
	return nil
}

// Decode implements bin.Decoder.
func (r *RemoveSearchedForHashtagRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode removeSearchedForHashtag#ac8cfce3 to nil")
	}
	if err := b.ConsumeID(RemoveSearchedForHashtagRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode removeSearchedForHashtag#ac8cfce3: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *RemoveSearchedForHashtagRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode removeSearchedForHashtag#ac8cfce3 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode removeSearchedForHashtag#ac8cfce3: field hashtag: %w", err)
		}
		r.Hashtag = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (r *RemoveSearchedForHashtagRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if r == nil {
		return fmt.Errorf("can't encode removeSearchedForHashtag#ac8cfce3 as nil")
	}
	b.ObjStart()
	b.PutID("removeSearchedForHashtag")
	b.Comma()
	b.FieldStart("hashtag")
	b.PutString(r.Hashtag)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (r *RemoveSearchedForHashtagRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if r == nil {
		return fmt.Errorf("can't decode removeSearchedForHashtag#ac8cfce3 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("removeSearchedForHashtag"); err != nil {
				return fmt.Errorf("unable to decode removeSearchedForHashtag#ac8cfce3: %w", err)
			}
		case "hashtag":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode removeSearchedForHashtag#ac8cfce3: field hashtag: %w", err)
			}
			r.Hashtag = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetHashtag returns value of Hashtag field.
func (r *RemoveSearchedForHashtagRequest) GetHashtag() (value string) {
	if r == nil {
		return
	}
	return r.Hashtag
}

// RemoveSearchedForHashtag invokes method removeSearchedForHashtag#ac8cfce3 returning error if any.
func (c *Client) RemoveSearchedForHashtag(ctx context.Context, hashtag string) error {
	var ok Ok

	request := &RemoveSearchedForHashtagRequest{
		Hashtag: hashtag,
	}
	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
