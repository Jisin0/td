// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// CreateBasicGroupChatRequest represents TL type `createBasicGroupChat#264ba969`.
type CreateBasicGroupChatRequest struct {
	// Basic group identifier
	BasicGroupID int32
	// If true, the chat will be created without network request. In this case all
	// information about the chat except its type, title and photo can be incorrect
	Force bool
}

// CreateBasicGroupChatRequestTypeID is TL type id of CreateBasicGroupChatRequest.
const CreateBasicGroupChatRequestTypeID = 0x264ba969

// Ensuring interfaces in compile-time for CreateBasicGroupChatRequest.
var (
	_ bin.Encoder     = &CreateBasicGroupChatRequest{}
	_ bin.Decoder     = &CreateBasicGroupChatRequest{}
	_ bin.BareEncoder = &CreateBasicGroupChatRequest{}
	_ bin.BareDecoder = &CreateBasicGroupChatRequest{}
)

func (c *CreateBasicGroupChatRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.BasicGroupID == 0) {
		return false
	}
	if !(c.Force == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CreateBasicGroupChatRequest) String() string {
	if c == nil {
		return "CreateBasicGroupChatRequest(nil)"
	}
	type Alias CreateBasicGroupChatRequest
	return fmt.Sprintf("CreateBasicGroupChatRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CreateBasicGroupChatRequest) TypeID() uint32 {
	return CreateBasicGroupChatRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*CreateBasicGroupChatRequest) TypeName() string {
	return "createBasicGroupChat"
}

// TypeInfo returns info about TL type.
func (c *CreateBasicGroupChatRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "createBasicGroupChat",
		ID:   CreateBasicGroupChatRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BasicGroupID",
			SchemaName: "basic_group_id",
		},
		{
			Name:       "Force",
			SchemaName: "force",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CreateBasicGroupChatRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode createBasicGroupChat#264ba969 as nil")
	}
	b.PutID(CreateBasicGroupChatRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CreateBasicGroupChatRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode createBasicGroupChat#264ba969 as nil")
	}
	b.PutInt32(c.BasicGroupID)
	b.PutBool(c.Force)
	return nil
}

// Decode implements bin.Decoder.
func (c *CreateBasicGroupChatRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode createBasicGroupChat#264ba969 to nil")
	}
	if err := b.ConsumeID(CreateBasicGroupChatRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode createBasicGroupChat#264ba969: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CreateBasicGroupChatRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode createBasicGroupChat#264ba969 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode createBasicGroupChat#264ba969: field basic_group_id: %w", err)
		}
		c.BasicGroupID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode createBasicGroupChat#264ba969: field force: %w", err)
		}
		c.Force = value
	}
	return nil
}

// GetBasicGroupID returns value of BasicGroupID field.
func (c *CreateBasicGroupChatRequest) GetBasicGroupID() (value int32) {
	return c.BasicGroupID
}

// GetForce returns value of Force field.
func (c *CreateBasicGroupChatRequest) GetForce() (value bool) {
	return c.Force
}

// CreateBasicGroupChat invokes method createBasicGroupChat#264ba969 returning error if any.
func (c *Client) CreateBasicGroupChat(ctx context.Context, request *CreateBasicGroupChatRequest) (*Chat, error) {
	var result Chat

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
