// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// StartGroupCallRecordingRequest represents TL type `startGroupCallRecording#efd6f310`.
type StartGroupCallRecordingRequest struct {
	// Group call identifier
	GroupCallID int32
	// Group call recording title; 0-64 characters
	Title string
}

// StartGroupCallRecordingRequestTypeID is TL type id of StartGroupCallRecordingRequest.
const StartGroupCallRecordingRequestTypeID = 0xefd6f310

// Ensuring interfaces in compile-time for StartGroupCallRecordingRequest.
var (
	_ bin.Encoder     = &StartGroupCallRecordingRequest{}
	_ bin.Decoder     = &StartGroupCallRecordingRequest{}
	_ bin.BareEncoder = &StartGroupCallRecordingRequest{}
	_ bin.BareDecoder = &StartGroupCallRecordingRequest{}
)

func (s *StartGroupCallRecordingRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.GroupCallID == 0) {
		return false
	}
	if !(s.Title == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StartGroupCallRecordingRequest) String() string {
	if s == nil {
		return "StartGroupCallRecordingRequest(nil)"
	}
	type Alias StartGroupCallRecordingRequest
	return fmt.Sprintf("StartGroupCallRecordingRequest%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StartGroupCallRecordingRequest) TypeID() uint32 {
	return StartGroupCallRecordingRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*StartGroupCallRecordingRequest) TypeName() string {
	return "startGroupCallRecording"
}

// TypeInfo returns info about TL type.
func (s *StartGroupCallRecordingRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "startGroupCallRecording",
		ID:   StartGroupCallRecordingRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "GroupCallID",
			SchemaName: "group_call_id",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StartGroupCallRecordingRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode startGroupCallRecording#efd6f310 as nil")
	}
	b.PutID(StartGroupCallRecordingRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StartGroupCallRecordingRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode startGroupCallRecording#efd6f310 as nil")
	}
	b.PutInt32(s.GroupCallID)
	b.PutString(s.Title)
	return nil
}

// Decode implements bin.Decoder.
func (s *StartGroupCallRecordingRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode startGroupCallRecording#efd6f310 to nil")
	}
	if err := b.ConsumeID(StartGroupCallRecordingRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode startGroupCallRecording#efd6f310: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StartGroupCallRecordingRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode startGroupCallRecording#efd6f310 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode startGroupCallRecording#efd6f310: field group_call_id: %w", err)
		}
		s.GroupCallID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode startGroupCallRecording#efd6f310: field title: %w", err)
		}
		s.Title = value
	}
	return nil
}

// GetGroupCallID returns value of GroupCallID field.
func (s *StartGroupCallRecordingRequest) GetGroupCallID() (value int32) {
	return s.GroupCallID
}

// GetTitle returns value of Title field.
func (s *StartGroupCallRecordingRequest) GetTitle() (value string) {
	return s.Title
}

// StartGroupCallRecording invokes method startGroupCallRecording#efd6f310 returning error if any.
func (c *Client) StartGroupCallRecording(ctx context.Context, request *StartGroupCallRecordingRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
