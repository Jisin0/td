// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AvailableReaction represents TL type `availableReaction#21d7c4b`.
//
// See https://core.telegram.org/constructor/availableReaction for reference.
type AvailableReaction struct {
	// Flags field of AvailableReaction.
	Flags bin.Fields
	// Inactive field of AvailableReaction.
	Inactive bool
	// Reaction field of AvailableReaction.
	Reaction string
	// Title field of AvailableReaction.
	Title string
	// StaticIcon field of AvailableReaction.
	StaticIcon DocumentClass
	// AppearAnimation field of AvailableReaction.
	AppearAnimation DocumentClass
	// SelectAnimation field of AvailableReaction.
	SelectAnimation DocumentClass
	// ActivateAnimation field of AvailableReaction.
	ActivateAnimation DocumentClass
	// EffectAnimation field of AvailableReaction.
	EffectAnimation DocumentClass
}

// AvailableReactionTypeID is TL type id of AvailableReaction.
const AvailableReactionTypeID = 0x21d7c4b

// Ensuring interfaces in compile-time for AvailableReaction.
var (
	_ bin.Encoder     = &AvailableReaction{}
	_ bin.Decoder     = &AvailableReaction{}
	_ bin.BareEncoder = &AvailableReaction{}
	_ bin.BareDecoder = &AvailableReaction{}
)

func (a *AvailableReaction) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Flags.Zero()) {
		return false
	}
	if !(a.Inactive == false) {
		return false
	}
	if !(a.Reaction == "") {
		return false
	}
	if !(a.Title == "") {
		return false
	}
	if !(a.StaticIcon == nil) {
		return false
	}
	if !(a.AppearAnimation == nil) {
		return false
	}
	if !(a.SelectAnimation == nil) {
		return false
	}
	if !(a.ActivateAnimation == nil) {
		return false
	}
	if !(a.EffectAnimation == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AvailableReaction) String() string {
	if a == nil {
		return "AvailableReaction(nil)"
	}
	type Alias AvailableReaction
	return fmt.Sprintf("AvailableReaction%+v", Alias(*a))
}

// FillFrom fills AvailableReaction from given interface.
func (a *AvailableReaction) FillFrom(from interface {
	GetInactive() (value bool)
	GetReaction() (value string)
	GetTitle() (value string)
	GetStaticIcon() (value DocumentClass)
	GetAppearAnimation() (value DocumentClass)
	GetSelectAnimation() (value DocumentClass)
	GetActivateAnimation() (value DocumentClass)
	GetEffectAnimation() (value DocumentClass)
}) {
	a.Inactive = from.GetInactive()
	a.Reaction = from.GetReaction()
	a.Title = from.GetTitle()
	a.StaticIcon = from.GetStaticIcon()
	a.AppearAnimation = from.GetAppearAnimation()
	a.SelectAnimation = from.GetSelectAnimation()
	a.ActivateAnimation = from.GetActivateAnimation()
	a.EffectAnimation = from.GetEffectAnimation()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AvailableReaction) TypeID() uint32 {
	return AvailableReactionTypeID
}

// TypeName returns name of type in TL schema.
func (*AvailableReaction) TypeName() string {
	return "availableReaction"
}

// TypeInfo returns info about TL type.
func (a *AvailableReaction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "availableReaction",
		ID:   AvailableReactionTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Inactive",
			SchemaName: "inactive",
			Null:       !a.Flags.Has(0),
		},
		{
			Name:       "Reaction",
			SchemaName: "reaction",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "StaticIcon",
			SchemaName: "static_icon",
		},
		{
			Name:       "AppearAnimation",
			SchemaName: "appear_animation",
		},
		{
			Name:       "SelectAnimation",
			SchemaName: "select_animation",
		},
		{
			Name:       "ActivateAnimation",
			SchemaName: "activate_animation",
		},
		{
			Name:       "EffectAnimation",
			SchemaName: "effect_animation",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (a *AvailableReaction) SetFlags() {
	if !(a.Inactive == false) {
		a.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (a *AvailableReaction) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode availableReaction#21d7c4b as nil")
	}
	b.PutID(AvailableReactionTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AvailableReaction) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode availableReaction#21d7c4b as nil")
	}
	a.SetFlags()
	if err := a.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field flags: %w", err)
	}
	b.PutString(a.Reaction)
	b.PutString(a.Title)
	if a.StaticIcon == nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field static_icon is nil")
	}
	if err := a.StaticIcon.Encode(b); err != nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field static_icon: %w", err)
	}
	if a.AppearAnimation == nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field appear_animation is nil")
	}
	if err := a.AppearAnimation.Encode(b); err != nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field appear_animation: %w", err)
	}
	if a.SelectAnimation == nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field select_animation is nil")
	}
	if err := a.SelectAnimation.Encode(b); err != nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field select_animation: %w", err)
	}
	if a.ActivateAnimation == nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field activate_animation is nil")
	}
	if err := a.ActivateAnimation.Encode(b); err != nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field activate_animation: %w", err)
	}
	if a.EffectAnimation == nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field effect_animation is nil")
	}
	if err := a.EffectAnimation.Encode(b); err != nil {
		return fmt.Errorf("unable to encode availableReaction#21d7c4b: field effect_animation: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (a *AvailableReaction) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode availableReaction#21d7c4b to nil")
	}
	if err := b.ConsumeID(AvailableReactionTypeID); err != nil {
		return fmt.Errorf("unable to decode availableReaction#21d7c4b: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AvailableReaction) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode availableReaction#21d7c4b to nil")
	}
	{
		if err := a.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field flags: %w", err)
		}
	}
	a.Inactive = a.Flags.Has(0)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field reaction: %w", err)
		}
		a.Reaction = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field title: %w", err)
		}
		a.Title = value
	}
	{
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field static_icon: %w", err)
		}
		a.StaticIcon = value
	}
	{
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field appear_animation: %w", err)
		}
		a.AppearAnimation = value
	}
	{
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field select_animation: %w", err)
		}
		a.SelectAnimation = value
	}
	{
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field activate_animation: %w", err)
		}
		a.ActivateAnimation = value
	}
	{
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode availableReaction#21d7c4b: field effect_animation: %w", err)
		}
		a.EffectAnimation = value
	}
	return nil
}

// SetInactive sets value of Inactive conditional field.
func (a *AvailableReaction) SetInactive(value bool) {
	if value {
		a.Flags.Set(0)
		a.Inactive = true
	} else {
		a.Flags.Unset(0)
		a.Inactive = false
	}
}

// GetInactive returns value of Inactive conditional field.
func (a *AvailableReaction) GetInactive() (value bool) {
	if a == nil {
		return
	}
	return a.Flags.Has(0)
}

// GetReaction returns value of Reaction field.
func (a *AvailableReaction) GetReaction() (value string) {
	if a == nil {
		return
	}
	return a.Reaction
}

// GetTitle returns value of Title field.
func (a *AvailableReaction) GetTitle() (value string) {
	if a == nil {
		return
	}
	return a.Title
}

// GetStaticIcon returns value of StaticIcon field.
func (a *AvailableReaction) GetStaticIcon() (value DocumentClass) {
	if a == nil {
		return
	}
	return a.StaticIcon
}

// GetAppearAnimation returns value of AppearAnimation field.
func (a *AvailableReaction) GetAppearAnimation() (value DocumentClass) {
	if a == nil {
		return
	}
	return a.AppearAnimation
}

// GetSelectAnimation returns value of SelectAnimation field.
func (a *AvailableReaction) GetSelectAnimation() (value DocumentClass) {
	if a == nil {
		return
	}
	return a.SelectAnimation
}

// GetActivateAnimation returns value of ActivateAnimation field.
func (a *AvailableReaction) GetActivateAnimation() (value DocumentClass) {
	if a == nil {
		return
	}
	return a.ActivateAnimation
}

// GetEffectAnimation returns value of EffectAnimation field.
func (a *AvailableReaction) GetEffectAnimation() (value DocumentClass) {
	if a == nil {
		return
	}
	return a.EffectAnimation
}

// GetStaticIconAsNotEmpty returns mapped value of StaticIcon field.
func (a *AvailableReaction) GetStaticIconAsNotEmpty() (*Document, bool) {
	return a.StaticIcon.AsNotEmpty()
}

// GetAppearAnimationAsNotEmpty returns mapped value of AppearAnimation field.
func (a *AvailableReaction) GetAppearAnimationAsNotEmpty() (*Document, bool) {
	return a.AppearAnimation.AsNotEmpty()
}

// GetSelectAnimationAsNotEmpty returns mapped value of SelectAnimation field.
func (a *AvailableReaction) GetSelectAnimationAsNotEmpty() (*Document, bool) {
	return a.SelectAnimation.AsNotEmpty()
}

// GetActivateAnimationAsNotEmpty returns mapped value of ActivateAnimation field.
func (a *AvailableReaction) GetActivateAnimationAsNotEmpty() (*Document, bool) {
	return a.ActivateAnimation.AsNotEmpty()
}

// GetEffectAnimationAsNotEmpty returns mapped value of EffectAnimation field.
func (a *AvailableReaction) GetEffectAnimationAsNotEmpty() (*Document, bool) {
	return a.EffectAnimation.AsNotEmpty()
}
