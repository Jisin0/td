// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SmsjobsLeaveRequest represents TL type `smsjobs.leave#9898ad73`.
//
// See https://core.telegram.org/method/smsjobs.leave for reference.
type SmsjobsLeaveRequest struct {
}

// SmsjobsLeaveRequestTypeID is TL type id of SmsjobsLeaveRequest.
const SmsjobsLeaveRequestTypeID = 0x9898ad73

// Ensuring interfaces in compile-time for SmsjobsLeaveRequest.
var (
	_ bin.Encoder     = &SmsjobsLeaveRequest{}
	_ bin.Decoder     = &SmsjobsLeaveRequest{}
	_ bin.BareEncoder = &SmsjobsLeaveRequest{}
	_ bin.BareDecoder = &SmsjobsLeaveRequest{}
)

func (l *SmsjobsLeaveRequest) Zero() bool {
	if l == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (l *SmsjobsLeaveRequest) String() string {
	if l == nil {
		return "SmsjobsLeaveRequest(nil)"
	}
	type Alias SmsjobsLeaveRequest
	return fmt.Sprintf("SmsjobsLeaveRequest%+v", Alias(*l))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SmsjobsLeaveRequest) TypeID() uint32 {
	return SmsjobsLeaveRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SmsjobsLeaveRequest) TypeName() string {
	return "smsjobs.leave"
}

// TypeInfo returns info about TL type.
func (l *SmsjobsLeaveRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "smsjobs.leave",
		ID:   SmsjobsLeaveRequestTypeID,
	}
	if l == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (l *SmsjobsLeaveRequest) Encode(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't encode smsjobs.leave#9898ad73 as nil")
	}
	b.PutID(SmsjobsLeaveRequestTypeID)
	return l.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (l *SmsjobsLeaveRequest) EncodeBare(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't encode smsjobs.leave#9898ad73 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (l *SmsjobsLeaveRequest) Decode(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't decode smsjobs.leave#9898ad73 to nil")
	}
	if err := b.ConsumeID(SmsjobsLeaveRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode smsjobs.leave#9898ad73: %w", err)
	}
	return l.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (l *SmsjobsLeaveRequest) DecodeBare(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't decode smsjobs.leave#9898ad73 to nil")
	}
	return nil
}

// SmsjobsLeave invokes method smsjobs.leave#9898ad73 returning error if any.
//
// See https://core.telegram.org/method/smsjobs.leave for reference.
func (c *Client) SmsjobsLeave(ctx context.Context) (bool, error) {
	var result BoolBox

	request := &SmsjobsLeaveRequest{}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
