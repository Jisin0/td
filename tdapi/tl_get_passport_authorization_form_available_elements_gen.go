// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// GetPassportAuthorizationFormAvailableElementsRequest represents TL type `getPassportAuthorizationFormAvailableElements#6799d4e2`.
type GetPassportAuthorizationFormAvailableElementsRequest struct {
	// Authorization form identifier
	AutorizationFormID int32
	// Password of the current user
	Password string
}

// GetPassportAuthorizationFormAvailableElementsRequestTypeID is TL type id of GetPassportAuthorizationFormAvailableElementsRequest.
const GetPassportAuthorizationFormAvailableElementsRequestTypeID = 0x6799d4e2

// Ensuring interfaces in compile-time for GetPassportAuthorizationFormAvailableElementsRequest.
var (
	_ bin.Encoder     = &GetPassportAuthorizationFormAvailableElementsRequest{}
	_ bin.Decoder     = &GetPassportAuthorizationFormAvailableElementsRequest{}
	_ bin.BareEncoder = &GetPassportAuthorizationFormAvailableElementsRequest{}
	_ bin.BareDecoder = &GetPassportAuthorizationFormAvailableElementsRequest{}
)

func (g *GetPassportAuthorizationFormAvailableElementsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.AutorizationFormID == 0) {
		return false
	}
	if !(g.Password == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) String() string {
	if g == nil {
		return "GetPassportAuthorizationFormAvailableElementsRequest(nil)"
	}
	type Alias GetPassportAuthorizationFormAvailableElementsRequest
	return fmt.Sprintf("GetPassportAuthorizationFormAvailableElementsRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetPassportAuthorizationFormAvailableElementsRequest) TypeID() uint32 {
	return GetPassportAuthorizationFormAvailableElementsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetPassportAuthorizationFormAvailableElementsRequest) TypeName() string {
	return "getPassportAuthorizationFormAvailableElements"
}

// TypeInfo returns info about TL type.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getPassportAuthorizationFormAvailableElements",
		ID:   GetPassportAuthorizationFormAvailableElementsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "AutorizationFormID",
			SchemaName: "autorization_form_id",
		},
		{
			Name:       "Password",
			SchemaName: "password",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getPassportAuthorizationFormAvailableElements#6799d4e2 as nil")
	}
	b.PutID(GetPassportAuthorizationFormAvailableElementsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getPassportAuthorizationFormAvailableElements#6799d4e2 as nil")
	}
	b.PutInt32(g.AutorizationFormID)
	b.PutString(g.Password)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getPassportAuthorizationFormAvailableElements#6799d4e2 to nil")
	}
	if err := b.ConsumeID(GetPassportAuthorizationFormAvailableElementsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getPassportAuthorizationFormAvailableElements#6799d4e2: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getPassportAuthorizationFormAvailableElements#6799d4e2 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getPassportAuthorizationFormAvailableElements#6799d4e2: field autorization_form_id: %w", err)
		}
		g.AutorizationFormID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode getPassportAuthorizationFormAvailableElements#6799d4e2: field password: %w", err)
		}
		g.Password = value
	}
	return nil
}

// GetAutorizationFormID returns value of AutorizationFormID field.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) GetAutorizationFormID() (value int32) {
	return g.AutorizationFormID
}

// GetPassword returns value of Password field.
func (g *GetPassportAuthorizationFormAvailableElementsRequest) GetPassword() (value string) {
	return g.Password
}

// GetPassportAuthorizationFormAvailableElements invokes method getPassportAuthorizationFormAvailableElements#6799d4e2 returning error if any.
func (c *Client) GetPassportAuthorizationFormAvailableElements(ctx context.Context, request *GetPassportAuthorizationFormAvailableElementsRequest) (*PassportElementsWithErrors, error) {
	var result PassportElementsWithErrors

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
