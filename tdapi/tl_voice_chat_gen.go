// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/jsontd"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = jsontd.Encoder{}
)

// VoiceChat represents TL type `voiceChat#f0d4c45b`.
type VoiceChat struct {
	// Group call identifier of an active voice chat; 0 if none. Full informationa about the
	// voice chat can be received through the method getGroupCall
	GroupCallID int32
	// True, if the voice chat has participants
	HasParticipants bool
	// Default group call participant identifier to join the voice chat; may be null
	DefaultParticipantID MessageSenderClass
}

// VoiceChatTypeID is TL type id of VoiceChat.
const VoiceChatTypeID = 0xf0d4c45b

// Ensuring interfaces in compile-time for VoiceChat.
var (
	_ bin.Encoder     = &VoiceChat{}
	_ bin.Decoder     = &VoiceChat{}
	_ bin.BareEncoder = &VoiceChat{}
	_ bin.BareDecoder = &VoiceChat{}
)

func (v *VoiceChat) Zero() bool {
	if v == nil {
		return true
	}
	if !(v.GroupCallID == 0) {
		return false
	}
	if !(v.HasParticipants == false) {
		return false
	}
	if !(v.DefaultParticipantID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (v *VoiceChat) String() string {
	if v == nil {
		return "VoiceChat(nil)"
	}
	type Alias VoiceChat
	return fmt.Sprintf("VoiceChat%+v", Alias(*v))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*VoiceChat) TypeID() uint32 {
	return VoiceChatTypeID
}

// TypeName returns name of type in TL schema.
func (*VoiceChat) TypeName() string {
	return "voiceChat"
}

// TypeInfo returns info about TL type.
func (v *VoiceChat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "voiceChat",
		ID:   VoiceChatTypeID,
	}
	if v == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "GroupCallID",
			SchemaName: "group_call_id",
		},
		{
			Name:       "HasParticipants",
			SchemaName: "has_participants",
		},
		{
			Name:       "DefaultParticipantID",
			SchemaName: "default_participant_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (v *VoiceChat) Encode(b *bin.Buffer) error {
	if v == nil {
		return fmt.Errorf("can't encode voiceChat#f0d4c45b as nil")
	}
	b.PutID(VoiceChatTypeID)
	return v.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (v *VoiceChat) EncodeBare(b *bin.Buffer) error {
	if v == nil {
		return fmt.Errorf("can't encode voiceChat#f0d4c45b as nil")
	}
	b.PutInt32(v.GroupCallID)
	b.PutBool(v.HasParticipants)
	if v.DefaultParticipantID == nil {
		return fmt.Errorf("unable to encode voiceChat#f0d4c45b: field default_participant_id is nil")
	}
	if err := v.DefaultParticipantID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode voiceChat#f0d4c45b: field default_participant_id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (v *VoiceChat) Decode(b *bin.Buffer) error {
	if v == nil {
		return fmt.Errorf("can't decode voiceChat#f0d4c45b to nil")
	}
	if err := b.ConsumeID(VoiceChatTypeID); err != nil {
		return fmt.Errorf("unable to decode voiceChat#f0d4c45b: %w", err)
	}
	return v.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (v *VoiceChat) DecodeBare(b *bin.Buffer) error {
	if v == nil {
		return fmt.Errorf("can't decode voiceChat#f0d4c45b to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode voiceChat#f0d4c45b: field group_call_id: %w", err)
		}
		v.GroupCallID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode voiceChat#f0d4c45b: field has_participants: %w", err)
		}
		v.HasParticipants = value
	}
	{
		value, err := DecodeMessageSender(b)
		if err != nil {
			return fmt.Errorf("unable to decode voiceChat#f0d4c45b: field default_participant_id: %w", err)
		}
		v.DefaultParticipantID = value
	}
	return nil
}

// EncodeTDLibJSON encodes v in TDLib API JSON format.
func (v *VoiceChat) EncodeTDLibJSON(b *jsontd.Encoder) error {
	if v == nil {
		return fmt.Errorf("can't encode voiceChat#f0d4c45b as nil")
	}
	b.ObjStart()
	b.PutID("voiceChat")
	b.FieldStart("group_call_id")
	b.PutInt32(v.GroupCallID)
	b.FieldStart("has_participants")
	b.PutBool(v.HasParticipants)
	b.FieldStart("default_participant_id")
	if v.DefaultParticipantID == nil {
		return fmt.Errorf("unable to encode voiceChat#f0d4c45b: field default_participant_id is nil")
	}
	if err := v.DefaultParticipantID.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode voiceChat#f0d4c45b: field default_participant_id: %w", err)
	}
	b.ObjEnd()
	return nil
}

// GetGroupCallID returns value of GroupCallID field.
func (v *VoiceChat) GetGroupCallID() (value int32) {
	return v.GroupCallID
}

// GetHasParticipants returns value of HasParticipants field.
func (v *VoiceChat) GetHasParticipants() (value bool) {
	return v.HasParticipants
}

// GetDefaultParticipantID returns value of DefaultParticipantID field.
func (v *VoiceChat) GetDefaultParticipantID() (value MessageSenderClass) {
	return v.DefaultParticipantID
}
