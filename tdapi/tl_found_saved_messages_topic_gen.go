// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// FoundSavedMessagesTopic represents TL type `foundSavedMessagesTopic#240681ec`.
type FoundSavedMessagesTopic struct {
	// The topic
	Topic SavedMessagesTopicClass
	// Last message in the topic; may be null if none or unknown
	LastMessage Message
}

// FoundSavedMessagesTopicTypeID is TL type id of FoundSavedMessagesTopic.
const FoundSavedMessagesTopicTypeID = 0x240681ec

// Ensuring interfaces in compile-time for FoundSavedMessagesTopic.
var (
	_ bin.Encoder     = &FoundSavedMessagesTopic{}
	_ bin.Decoder     = &FoundSavedMessagesTopic{}
	_ bin.BareEncoder = &FoundSavedMessagesTopic{}
	_ bin.BareDecoder = &FoundSavedMessagesTopic{}
)

func (f *FoundSavedMessagesTopic) Zero() bool {
	if f == nil {
		return true
	}
	if !(f.Topic == nil) {
		return false
	}
	if !(f.LastMessage.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (f *FoundSavedMessagesTopic) String() string {
	if f == nil {
		return "FoundSavedMessagesTopic(nil)"
	}
	type Alias FoundSavedMessagesTopic
	return fmt.Sprintf("FoundSavedMessagesTopic%+v", Alias(*f))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*FoundSavedMessagesTopic) TypeID() uint32 {
	return FoundSavedMessagesTopicTypeID
}

// TypeName returns name of type in TL schema.
func (*FoundSavedMessagesTopic) TypeName() string {
	return "foundSavedMessagesTopic"
}

// TypeInfo returns info about TL type.
func (f *FoundSavedMessagesTopic) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "foundSavedMessagesTopic",
		ID:   FoundSavedMessagesTopicTypeID,
	}
	if f == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Topic",
			SchemaName: "topic",
		},
		{
			Name:       "LastMessage",
			SchemaName: "last_message",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (f *FoundSavedMessagesTopic) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode foundSavedMessagesTopic#240681ec as nil")
	}
	b.PutID(FoundSavedMessagesTopicTypeID)
	return f.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (f *FoundSavedMessagesTopic) EncodeBare(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode foundSavedMessagesTopic#240681ec as nil")
	}
	if f.Topic == nil {
		return fmt.Errorf("unable to encode foundSavedMessagesTopic#240681ec: field topic is nil")
	}
	if err := f.Topic.Encode(b); err != nil {
		return fmt.Errorf("unable to encode foundSavedMessagesTopic#240681ec: field topic: %w", err)
	}
	if err := f.LastMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode foundSavedMessagesTopic#240681ec: field last_message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (f *FoundSavedMessagesTopic) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode foundSavedMessagesTopic#240681ec to nil")
	}
	if err := b.ConsumeID(FoundSavedMessagesTopicTypeID); err != nil {
		return fmt.Errorf("unable to decode foundSavedMessagesTopic#240681ec: %w", err)
	}
	return f.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (f *FoundSavedMessagesTopic) DecodeBare(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode foundSavedMessagesTopic#240681ec to nil")
	}
	{
		value, err := DecodeSavedMessagesTopic(b)
		if err != nil {
			return fmt.Errorf("unable to decode foundSavedMessagesTopic#240681ec: field topic: %w", err)
		}
		f.Topic = value
	}
	{
		if err := f.LastMessage.Decode(b); err != nil {
			return fmt.Errorf("unable to decode foundSavedMessagesTopic#240681ec: field last_message: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (f *FoundSavedMessagesTopic) EncodeTDLibJSON(b tdjson.Encoder) error {
	if f == nil {
		return fmt.Errorf("can't encode foundSavedMessagesTopic#240681ec as nil")
	}
	b.ObjStart()
	b.PutID("foundSavedMessagesTopic")
	b.Comma()
	b.FieldStart("topic")
	if f.Topic == nil {
		return fmt.Errorf("unable to encode foundSavedMessagesTopic#240681ec: field topic is nil")
	}
	if err := f.Topic.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode foundSavedMessagesTopic#240681ec: field topic: %w", err)
	}
	b.Comma()
	b.FieldStart("last_message")
	if err := f.LastMessage.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode foundSavedMessagesTopic#240681ec: field last_message: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (f *FoundSavedMessagesTopic) DecodeTDLibJSON(b tdjson.Decoder) error {
	if f == nil {
		return fmt.Errorf("can't decode foundSavedMessagesTopic#240681ec to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("foundSavedMessagesTopic"); err != nil {
				return fmt.Errorf("unable to decode foundSavedMessagesTopic#240681ec: %w", err)
			}
		case "topic":
			value, err := DecodeTDLibJSONSavedMessagesTopic(b)
			if err != nil {
				return fmt.Errorf("unable to decode foundSavedMessagesTopic#240681ec: field topic: %w", err)
			}
			f.Topic = value
		case "last_message":
			if err := f.LastMessage.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode foundSavedMessagesTopic#240681ec: field last_message: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetTopic returns value of Topic field.
func (f *FoundSavedMessagesTopic) GetTopic() (value SavedMessagesTopicClass) {
	if f == nil {
		return
	}
	return f.Topic
}

// GetLastMessage returns value of LastMessage field.
func (f *FoundSavedMessagesTopic) GetLastMessage() (value Message) {
	if f == nil {
		return
	}
	return f.LastMessage
}
