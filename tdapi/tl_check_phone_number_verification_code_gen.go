// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/jsontd"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = jsontd.Encoder{}
)

// CheckPhoneNumberVerificationCodeRequest represents TL type `checkPhoneNumberVerificationCode#594177be`.
type CheckPhoneNumberVerificationCodeRequest struct {
	// Verification code
	Code string
}

// CheckPhoneNumberVerificationCodeRequestTypeID is TL type id of CheckPhoneNumberVerificationCodeRequest.
const CheckPhoneNumberVerificationCodeRequestTypeID = 0x594177be

// Ensuring interfaces in compile-time for CheckPhoneNumberVerificationCodeRequest.
var (
	_ bin.Encoder     = &CheckPhoneNumberVerificationCodeRequest{}
	_ bin.Decoder     = &CheckPhoneNumberVerificationCodeRequest{}
	_ bin.BareEncoder = &CheckPhoneNumberVerificationCodeRequest{}
	_ bin.BareDecoder = &CheckPhoneNumberVerificationCodeRequest{}
)

func (c *CheckPhoneNumberVerificationCodeRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Code == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CheckPhoneNumberVerificationCodeRequest) String() string {
	if c == nil {
		return "CheckPhoneNumberVerificationCodeRequest(nil)"
	}
	type Alias CheckPhoneNumberVerificationCodeRequest
	return fmt.Sprintf("CheckPhoneNumberVerificationCodeRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CheckPhoneNumberVerificationCodeRequest) TypeID() uint32 {
	return CheckPhoneNumberVerificationCodeRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*CheckPhoneNumberVerificationCodeRequest) TypeName() string {
	return "checkPhoneNumberVerificationCode"
}

// TypeInfo returns info about TL type.
func (c *CheckPhoneNumberVerificationCodeRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "checkPhoneNumberVerificationCode",
		ID:   CheckPhoneNumberVerificationCodeRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Code",
			SchemaName: "code",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CheckPhoneNumberVerificationCodeRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode checkPhoneNumberVerificationCode#594177be as nil")
	}
	b.PutID(CheckPhoneNumberVerificationCodeRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CheckPhoneNumberVerificationCodeRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode checkPhoneNumberVerificationCode#594177be as nil")
	}
	b.PutString(c.Code)
	return nil
}

// Decode implements bin.Decoder.
func (c *CheckPhoneNumberVerificationCodeRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode checkPhoneNumberVerificationCode#594177be to nil")
	}
	if err := b.ConsumeID(CheckPhoneNumberVerificationCodeRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode checkPhoneNumberVerificationCode#594177be: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CheckPhoneNumberVerificationCodeRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode checkPhoneNumberVerificationCode#594177be to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode checkPhoneNumberVerificationCode#594177be: field code: %w", err)
		}
		c.Code = value
	}
	return nil
}

// EncodeTDLibJSON encodes c in TDLib API JSON format.
func (c *CheckPhoneNumberVerificationCodeRequest) EncodeTDLibJSON(b *jsontd.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode checkPhoneNumberVerificationCode#594177be as nil")
	}
	b.ObjStart()
	b.PutID("checkPhoneNumberVerificationCode")
	b.FieldStart("code")
	b.PutString(c.Code)
	b.ObjEnd()
	return nil
}

// GetCode returns value of Code field.
func (c *CheckPhoneNumberVerificationCodeRequest) GetCode() (value string) {
	return c.Code
}

// CheckPhoneNumberVerificationCode invokes method checkPhoneNumberVerificationCode#594177be returning error if any.
func (c *Client) CheckPhoneNumberVerificationCode(ctx context.Context, code string) error {
	var ok Ok

	request := &CheckPhoneNumberVerificationCodeRequest{
		Code: code,
	}
	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
