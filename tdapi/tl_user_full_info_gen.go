// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// UserFullInfo represents TL type `userFullInfo#bbb225cf`.
type UserFullInfo struct {
	// User profile photo; may be null
	Photo ChatPhoto
	// True, if the user is blocked by the current user
	IsBlocked bool
	// True, if the user can be called
	CanBeCalled bool
	// True, if a video call can be created with the user
	SupportsVideoCalls bool
	// True, if the user can't be called due to their privacy settings
	HasPrivateCalls bool
	// True, if the user can't be linked in forwarded messages due to their privacy settings
	HasPrivateForwards bool
	// True, if the current user needs to explicitly allow to share their phone number with
	// the user when the method addContact is used
	NeedPhoneNumberPrivacyException bool
	// A short user bio
	Bio string
	// For bots, the text that is shown on the bot's profile page and is sent together with
	// the link when users share the bot
	ShareText string
	// Contains full information about a user
	Description string
	// Number of group chats where both the other user and the current user are a member; 0
	// for the current user
	GroupInCommonCount int32
	// For bots, list of the bot commands
	Commands []BotCommand
}

// UserFullInfoTypeID is TL type id of UserFullInfo.
const UserFullInfoTypeID = 0xbbb225cf

// Ensuring interfaces in compile-time for UserFullInfo.
var (
	_ bin.Encoder     = &UserFullInfo{}
	_ bin.Decoder     = &UserFullInfo{}
	_ bin.BareEncoder = &UserFullInfo{}
	_ bin.BareDecoder = &UserFullInfo{}
)

func (u *UserFullInfo) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Photo.Zero()) {
		return false
	}
	if !(u.IsBlocked == false) {
		return false
	}
	if !(u.CanBeCalled == false) {
		return false
	}
	if !(u.SupportsVideoCalls == false) {
		return false
	}
	if !(u.HasPrivateCalls == false) {
		return false
	}
	if !(u.HasPrivateForwards == false) {
		return false
	}
	if !(u.NeedPhoneNumberPrivacyException == false) {
		return false
	}
	if !(u.Bio == "") {
		return false
	}
	if !(u.ShareText == "") {
		return false
	}
	if !(u.Description == "") {
		return false
	}
	if !(u.GroupInCommonCount == 0) {
		return false
	}
	if !(u.Commands == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *UserFullInfo) String() string {
	if u == nil {
		return "UserFullInfo(nil)"
	}
	type Alias UserFullInfo
	return fmt.Sprintf("UserFullInfo%+v", Alias(*u))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UserFullInfo) TypeID() uint32 {
	return UserFullInfoTypeID
}

// TypeName returns name of type in TL schema.
func (*UserFullInfo) TypeName() string {
	return "userFullInfo"
}

// TypeInfo returns info about TL type.
func (u *UserFullInfo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "userFullInfo",
		ID:   UserFullInfoTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Photo",
			SchemaName: "photo",
		},
		{
			Name:       "IsBlocked",
			SchemaName: "is_blocked",
		},
		{
			Name:       "CanBeCalled",
			SchemaName: "can_be_called",
		},
		{
			Name:       "SupportsVideoCalls",
			SchemaName: "supports_video_calls",
		},
		{
			Name:       "HasPrivateCalls",
			SchemaName: "has_private_calls",
		},
		{
			Name:       "HasPrivateForwards",
			SchemaName: "has_private_forwards",
		},
		{
			Name:       "NeedPhoneNumberPrivacyException",
			SchemaName: "need_phone_number_privacy_exception",
		},
		{
			Name:       "Bio",
			SchemaName: "bio",
		},
		{
			Name:       "ShareText",
			SchemaName: "share_text",
		},
		{
			Name:       "Description",
			SchemaName: "description",
		},
		{
			Name:       "GroupInCommonCount",
			SchemaName: "group_in_common_count",
		},
		{
			Name:       "Commands",
			SchemaName: "commands",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (u *UserFullInfo) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userFullInfo#bbb225cf as nil")
	}
	b.PutID(UserFullInfoTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *UserFullInfo) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userFullInfo#bbb225cf as nil")
	}
	if err := u.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode userFullInfo#bbb225cf: field photo: %w", err)
	}
	b.PutBool(u.IsBlocked)
	b.PutBool(u.CanBeCalled)
	b.PutBool(u.SupportsVideoCalls)
	b.PutBool(u.HasPrivateCalls)
	b.PutBool(u.HasPrivateForwards)
	b.PutBool(u.NeedPhoneNumberPrivacyException)
	b.PutString(u.Bio)
	b.PutString(u.ShareText)
	b.PutString(u.Description)
	b.PutInt32(u.GroupInCommonCount)
	b.PutInt(len(u.Commands))
	for idx, v := range u.Commands {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare userFullInfo#bbb225cf: field commands element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UserFullInfo) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userFullInfo#bbb225cf to nil")
	}
	if err := b.ConsumeID(UserFullInfoTypeID); err != nil {
		return fmt.Errorf("unable to decode userFullInfo#bbb225cf: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *UserFullInfo) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userFullInfo#bbb225cf to nil")
	}
	{
		if err := u.Photo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field photo: %w", err)
		}
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field is_blocked: %w", err)
		}
		u.IsBlocked = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field can_be_called: %w", err)
		}
		u.CanBeCalled = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field supports_video_calls: %w", err)
		}
		u.SupportsVideoCalls = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field has_private_calls: %w", err)
		}
		u.HasPrivateCalls = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field has_private_forwards: %w", err)
		}
		u.HasPrivateForwards = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field need_phone_number_privacy_exception: %w", err)
		}
		u.NeedPhoneNumberPrivacyException = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field bio: %w", err)
		}
		u.Bio = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field share_text: %w", err)
		}
		u.ShareText = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field description: %w", err)
		}
		u.Description = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field group_in_common_count: %w", err)
		}
		u.GroupInCommonCount = value
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field commands: %w", err)
		}

		if headerLen > 0 {
			u.Commands = make([]BotCommand, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value BotCommand
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare userFullInfo#bbb225cf: field commands: %w", err)
			}
			u.Commands = append(u.Commands, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (u *UserFullInfo) EncodeTDLibJSON(b tdjson.Encoder) error {
	if u == nil {
		return fmt.Errorf("can't encode userFullInfo#bbb225cf as nil")
	}
	b.ObjStart()
	b.PutID("userFullInfo")
	b.Comma()
	b.FieldStart("photo")
	if err := u.Photo.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode userFullInfo#bbb225cf: field photo: %w", err)
	}
	b.Comma()
	b.FieldStart("is_blocked")
	b.PutBool(u.IsBlocked)
	b.Comma()
	b.FieldStart("can_be_called")
	b.PutBool(u.CanBeCalled)
	b.Comma()
	b.FieldStart("supports_video_calls")
	b.PutBool(u.SupportsVideoCalls)
	b.Comma()
	b.FieldStart("has_private_calls")
	b.PutBool(u.HasPrivateCalls)
	b.Comma()
	b.FieldStart("has_private_forwards")
	b.PutBool(u.HasPrivateForwards)
	b.Comma()
	b.FieldStart("need_phone_number_privacy_exception")
	b.PutBool(u.NeedPhoneNumberPrivacyException)
	b.Comma()
	b.FieldStart("bio")
	b.PutString(u.Bio)
	b.Comma()
	b.FieldStart("share_text")
	b.PutString(u.ShareText)
	b.Comma()
	b.FieldStart("description")
	b.PutString(u.Description)
	b.Comma()
	b.FieldStart("group_in_common_count")
	b.PutInt32(u.GroupInCommonCount)
	b.Comma()
	b.FieldStart("commands")
	b.ArrStart()
	for idx, v := range u.Commands {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode userFullInfo#bbb225cf: field commands element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (u *UserFullInfo) DecodeTDLibJSON(b tdjson.Decoder) error {
	if u == nil {
		return fmt.Errorf("can't decode userFullInfo#bbb225cf to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("userFullInfo"); err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: %w", err)
			}
		case "photo":
			if err := u.Photo.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field photo: %w", err)
			}
		case "is_blocked":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field is_blocked: %w", err)
			}
			u.IsBlocked = value
		case "can_be_called":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field can_be_called: %w", err)
			}
			u.CanBeCalled = value
		case "supports_video_calls":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field supports_video_calls: %w", err)
			}
			u.SupportsVideoCalls = value
		case "has_private_calls":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field has_private_calls: %w", err)
			}
			u.HasPrivateCalls = value
		case "has_private_forwards":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field has_private_forwards: %w", err)
			}
			u.HasPrivateForwards = value
		case "need_phone_number_privacy_exception":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field need_phone_number_privacy_exception: %w", err)
			}
			u.NeedPhoneNumberPrivacyException = value
		case "bio":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field bio: %w", err)
			}
			u.Bio = value
		case "share_text":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field share_text: %w", err)
			}
			u.ShareText = value
		case "description":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field description: %w", err)
			}
			u.Description = value
		case "group_in_common_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field group_in_common_count: %w", err)
			}
			u.GroupInCommonCount = value
		case "commands":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value BotCommand
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field commands: %w", err)
				}
				u.Commands = append(u.Commands, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode userFullInfo#bbb225cf: field commands: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetPhoto returns value of Photo field.
func (u *UserFullInfo) GetPhoto() (value ChatPhoto) {
	if u == nil {
		return
	}
	return u.Photo
}

// GetIsBlocked returns value of IsBlocked field.
func (u *UserFullInfo) GetIsBlocked() (value bool) {
	if u == nil {
		return
	}
	return u.IsBlocked
}

// GetCanBeCalled returns value of CanBeCalled field.
func (u *UserFullInfo) GetCanBeCalled() (value bool) {
	if u == nil {
		return
	}
	return u.CanBeCalled
}

// GetSupportsVideoCalls returns value of SupportsVideoCalls field.
func (u *UserFullInfo) GetSupportsVideoCalls() (value bool) {
	if u == nil {
		return
	}
	return u.SupportsVideoCalls
}

// GetHasPrivateCalls returns value of HasPrivateCalls field.
func (u *UserFullInfo) GetHasPrivateCalls() (value bool) {
	if u == nil {
		return
	}
	return u.HasPrivateCalls
}

// GetHasPrivateForwards returns value of HasPrivateForwards field.
func (u *UserFullInfo) GetHasPrivateForwards() (value bool) {
	if u == nil {
		return
	}
	return u.HasPrivateForwards
}

// GetNeedPhoneNumberPrivacyException returns value of NeedPhoneNumberPrivacyException field.
func (u *UserFullInfo) GetNeedPhoneNumberPrivacyException() (value bool) {
	if u == nil {
		return
	}
	return u.NeedPhoneNumberPrivacyException
}

// GetBio returns value of Bio field.
func (u *UserFullInfo) GetBio() (value string) {
	if u == nil {
		return
	}
	return u.Bio
}

// GetShareText returns value of ShareText field.
func (u *UserFullInfo) GetShareText() (value string) {
	if u == nil {
		return
	}
	return u.ShareText
}

// GetDescription returns value of Description field.
func (u *UserFullInfo) GetDescription() (value string) {
	if u == nil {
		return
	}
	return u.Description
}

// GetGroupInCommonCount returns value of GroupInCommonCount field.
func (u *UserFullInfo) GetGroupInCommonCount() (value int32) {
	if u == nil {
		return
	}
	return u.GroupInCommonCount
}

// GetCommands returns value of Commands field.
func (u *UserFullInfo) GetCommands() (value []BotCommand) {
	if u == nil {
		return
	}
	return u.Commands
}
