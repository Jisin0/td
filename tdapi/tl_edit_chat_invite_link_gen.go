// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/jsontd"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = jsontd.Encoder{}
)

// EditChatInviteLinkRequest represents TL type `editChatInviteLink#dfeefac3`.
type EditChatInviteLinkRequest struct {
	// Chat identifier
	ChatID int64
	// Invite link to be edited
	InviteLink string
	// Point in time (Unix timestamp) when the link will expire; pass 0 if never
	ExpireDate int32
	// The maximum number of chat members that can join the chat by the link simultaneously;
	// 0-99999; pass 0 if not limited
	MemberLimit int32
}

// EditChatInviteLinkRequestTypeID is TL type id of EditChatInviteLinkRequest.
const EditChatInviteLinkRequestTypeID = 0xdfeefac3

// Ensuring interfaces in compile-time for EditChatInviteLinkRequest.
var (
	_ bin.Encoder     = &EditChatInviteLinkRequest{}
	_ bin.Decoder     = &EditChatInviteLinkRequest{}
	_ bin.BareEncoder = &EditChatInviteLinkRequest{}
	_ bin.BareDecoder = &EditChatInviteLinkRequest{}
)

func (e *EditChatInviteLinkRequest) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.ChatID == 0) {
		return false
	}
	if !(e.InviteLink == "") {
		return false
	}
	if !(e.ExpireDate == 0) {
		return false
	}
	if !(e.MemberLimit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *EditChatInviteLinkRequest) String() string {
	if e == nil {
		return "EditChatInviteLinkRequest(nil)"
	}
	type Alias EditChatInviteLinkRequest
	return fmt.Sprintf("EditChatInviteLinkRequest%+v", Alias(*e))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*EditChatInviteLinkRequest) TypeID() uint32 {
	return EditChatInviteLinkRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*EditChatInviteLinkRequest) TypeName() string {
	return "editChatInviteLink"
}

// TypeInfo returns info about TL type.
func (e *EditChatInviteLinkRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "editChatInviteLink",
		ID:   EditChatInviteLinkRequestTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "InviteLink",
			SchemaName: "invite_link",
		},
		{
			Name:       "ExpireDate",
			SchemaName: "expire_date",
		},
		{
			Name:       "MemberLimit",
			SchemaName: "member_limit",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *EditChatInviteLinkRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode editChatInviteLink#dfeefac3 as nil")
	}
	b.PutID(EditChatInviteLinkRequestTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *EditChatInviteLinkRequest) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode editChatInviteLink#dfeefac3 as nil")
	}
	b.PutLong(e.ChatID)
	b.PutString(e.InviteLink)
	b.PutInt32(e.ExpireDate)
	b.PutInt32(e.MemberLimit)
	return nil
}

// Decode implements bin.Decoder.
func (e *EditChatInviteLinkRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode editChatInviteLink#dfeefac3 to nil")
	}
	if err := b.ConsumeID(EditChatInviteLinkRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode editChatInviteLink#dfeefac3: %w", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *EditChatInviteLinkRequest) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode editChatInviteLink#dfeefac3 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode editChatInviteLink#dfeefac3: field chat_id: %w", err)
		}
		e.ChatID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode editChatInviteLink#dfeefac3: field invite_link: %w", err)
		}
		e.InviteLink = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode editChatInviteLink#dfeefac3: field expire_date: %w", err)
		}
		e.ExpireDate = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode editChatInviteLink#dfeefac3: field member_limit: %w", err)
		}
		e.MemberLimit = value
	}
	return nil
}

// EncodeTDLibJSON encodes e in TDLib API JSON format.
func (e *EditChatInviteLinkRequest) EncodeTDLibJSON(b *jsontd.Encoder) error {
	if e == nil {
		return fmt.Errorf("can't encode editChatInviteLink#dfeefac3 as nil")
	}
	b.ObjStart()
	b.PutID("editChatInviteLink")
	b.FieldStart("chat_id")
	b.PutLong(e.ChatID)
	b.FieldStart("invite_link")
	b.PutString(e.InviteLink)
	b.FieldStart("expire_date")
	b.PutInt32(e.ExpireDate)
	b.FieldStart("member_limit")
	b.PutInt32(e.MemberLimit)
	b.ObjEnd()
	return nil
}

// GetChatID returns value of ChatID field.
func (e *EditChatInviteLinkRequest) GetChatID() (value int64) {
	return e.ChatID
}

// GetInviteLink returns value of InviteLink field.
func (e *EditChatInviteLinkRequest) GetInviteLink() (value string) {
	return e.InviteLink
}

// GetExpireDate returns value of ExpireDate field.
func (e *EditChatInviteLinkRequest) GetExpireDate() (value int32) {
	return e.ExpireDate
}

// GetMemberLimit returns value of MemberLimit field.
func (e *EditChatInviteLinkRequest) GetMemberLimit() (value int32) {
	return e.MemberLimit
}

// EditChatInviteLink invokes method editChatInviteLink#dfeefac3 returning error if any.
func (c *Client) EditChatInviteLink(ctx context.Context, request *EditChatInviteLinkRequest) (*ChatInviteLink, error) {
	var result ChatInviteLink

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
