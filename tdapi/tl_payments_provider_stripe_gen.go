// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsProviderStripe represents TL type `paymentsProviderStripe#41042678`.
type PaymentsProviderStripe struct {
	// Stripe API publishable key
	PublishableKey string
	// True, if the user country must be provided
	NeedCountry bool
	// True, if the user ZIP/postal code must be provided
	NeedPostalCode bool
	// True, if the cardholder name must be provided
	NeedCardholderName bool
}

// PaymentsProviderStripeTypeID is TL type id of PaymentsProviderStripe.
const PaymentsProviderStripeTypeID = 0x41042678

// Ensuring interfaces in compile-time for PaymentsProviderStripe.
var (
	_ bin.Encoder     = &PaymentsProviderStripe{}
	_ bin.Decoder     = &PaymentsProviderStripe{}
	_ bin.BareEncoder = &PaymentsProviderStripe{}
	_ bin.BareDecoder = &PaymentsProviderStripe{}
)

func (p *PaymentsProviderStripe) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.PublishableKey == "") {
		return false
	}
	if !(p.NeedCountry == false) {
		return false
	}
	if !(p.NeedPostalCode == false) {
		return false
	}
	if !(p.NeedCardholderName == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PaymentsProviderStripe) String() string {
	if p == nil {
		return "PaymentsProviderStripe(nil)"
	}
	type Alias PaymentsProviderStripe
	return fmt.Sprintf("PaymentsProviderStripe%+v", Alias(*p))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsProviderStripe) TypeID() uint32 {
	return PaymentsProviderStripeTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsProviderStripe) TypeName() string {
	return "paymentsProviderStripe"
}

// TypeInfo returns info about TL type.
func (p *PaymentsProviderStripe) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "paymentsProviderStripe",
		ID:   PaymentsProviderStripeTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "PublishableKey",
			SchemaName: "publishable_key",
		},
		{
			Name:       "NeedCountry",
			SchemaName: "need_country",
		},
		{
			Name:       "NeedPostalCode",
			SchemaName: "need_postal_code",
		},
		{
			Name:       "NeedCardholderName",
			SchemaName: "need_cardholder_name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PaymentsProviderStripe) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode paymentsProviderStripe#41042678 as nil")
	}
	b.PutID(PaymentsProviderStripeTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PaymentsProviderStripe) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode paymentsProviderStripe#41042678 as nil")
	}
	b.PutString(p.PublishableKey)
	b.PutBool(p.NeedCountry)
	b.PutBool(p.NeedPostalCode)
	b.PutBool(p.NeedCardholderName)
	return nil
}

// Decode implements bin.Decoder.
func (p *PaymentsProviderStripe) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode paymentsProviderStripe#41042678 to nil")
	}
	if err := b.ConsumeID(PaymentsProviderStripeTypeID); err != nil {
		return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: %w", err)
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PaymentsProviderStripe) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode paymentsProviderStripe#41042678 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field publishable_key: %w", err)
		}
		p.PublishableKey = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field need_country: %w", err)
		}
		p.NeedCountry = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field need_postal_code: %w", err)
		}
		p.NeedPostalCode = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field need_cardholder_name: %w", err)
		}
		p.NeedCardholderName = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (p *PaymentsProviderStripe) EncodeTDLibJSON(b tdjson.Encoder) error {
	if p == nil {
		return fmt.Errorf("can't encode paymentsProviderStripe#41042678 as nil")
	}
	b.ObjStart()
	b.PutID("paymentsProviderStripe")
	b.Comma()
	b.FieldStart("publishable_key")
	b.PutString(p.PublishableKey)
	b.Comma()
	b.FieldStart("need_country")
	b.PutBool(p.NeedCountry)
	b.Comma()
	b.FieldStart("need_postal_code")
	b.PutBool(p.NeedPostalCode)
	b.Comma()
	b.FieldStart("need_cardholder_name")
	b.PutBool(p.NeedCardholderName)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (p *PaymentsProviderStripe) DecodeTDLibJSON(b tdjson.Decoder) error {
	if p == nil {
		return fmt.Errorf("can't decode paymentsProviderStripe#41042678 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("paymentsProviderStripe"); err != nil {
				return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: %w", err)
			}
		case "publishable_key":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field publishable_key: %w", err)
			}
			p.PublishableKey = value
		case "need_country":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field need_country: %w", err)
			}
			p.NeedCountry = value
		case "need_postal_code":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field need_postal_code: %w", err)
			}
			p.NeedPostalCode = value
		case "need_cardholder_name":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode paymentsProviderStripe#41042678: field need_cardholder_name: %w", err)
			}
			p.NeedCardholderName = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetPublishableKey returns value of PublishableKey field.
func (p *PaymentsProviderStripe) GetPublishableKey() (value string) {
	if p == nil {
		return
	}
	return p.PublishableKey
}

// GetNeedCountry returns value of NeedCountry field.
func (p *PaymentsProviderStripe) GetNeedCountry() (value bool) {
	if p == nil {
		return
	}
	return p.NeedCountry
}

// GetNeedPostalCode returns value of NeedPostalCode field.
func (p *PaymentsProviderStripe) GetNeedPostalCode() (value bool) {
	if p == nil {
		return
	}
	return p.NeedPostalCode
}

// GetNeedCardholderName returns value of NeedCardholderName field.
func (p *PaymentsProviderStripe) GetNeedCardholderName() (value bool) {
	if p == nil {
		return
	}
	return p.NeedCardholderName
}
