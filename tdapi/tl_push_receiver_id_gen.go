// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/jsontd"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = jsontd.Encoder{}
)

// PushReceiverID represents TL type `pushReceiverId#161ddf2c`.
type PushReceiverID struct {
	// The globally unique identifier of push notification subscription
	ID Int64
}

// PushReceiverIDTypeID is TL type id of PushReceiverID.
const PushReceiverIDTypeID = 0x161ddf2c

// Ensuring interfaces in compile-time for PushReceiverID.
var (
	_ bin.Encoder     = &PushReceiverID{}
	_ bin.Decoder     = &PushReceiverID{}
	_ bin.BareEncoder = &PushReceiverID{}
	_ bin.BareDecoder = &PushReceiverID{}
)

func (p *PushReceiverID) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.ID.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PushReceiverID) String() string {
	if p == nil {
		return "PushReceiverID(nil)"
	}
	type Alias PushReceiverID
	return fmt.Sprintf("PushReceiverID%+v", Alias(*p))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PushReceiverID) TypeID() uint32 {
	return PushReceiverIDTypeID
}

// TypeName returns name of type in TL schema.
func (*PushReceiverID) TypeName() string {
	return "pushReceiverId"
}

// TypeInfo returns info about TL type.
func (p *PushReceiverID) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "pushReceiverId",
		ID:   PushReceiverIDTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PushReceiverID) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode pushReceiverId#161ddf2c as nil")
	}
	b.PutID(PushReceiverIDTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PushReceiverID) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode pushReceiverId#161ddf2c as nil")
	}
	if err := p.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode pushReceiverId#161ddf2c: field id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (p *PushReceiverID) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode pushReceiverId#161ddf2c to nil")
	}
	if err := b.ConsumeID(PushReceiverIDTypeID); err != nil {
		return fmt.Errorf("unable to decode pushReceiverId#161ddf2c: %w", err)
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PushReceiverID) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode pushReceiverId#161ddf2c to nil")
	}
	{
		if err := p.ID.Decode(b); err != nil {
			return fmt.Errorf("unable to decode pushReceiverId#161ddf2c: field id: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON encodes p in TDLib API JSON format.
func (p *PushReceiverID) EncodeTDLibJSON(b *jsontd.Encoder) error {
	if p == nil {
		return fmt.Errorf("can't encode pushReceiverId#161ddf2c as nil")
	}
	b.ObjStart()
	b.PutID("pushReceiverId")
	b.FieldStart("id")
	if err := p.ID.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode pushReceiverId#161ddf2c: field id: %w", err)
	}
	b.ObjEnd()
	return nil
}

// GetID returns value of ID field.
func (p *PushReceiverID) GetID() (value Int64) {
	return p.ID
}
