// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// RemoveBackgroundRequest represents TL type `removeBackground#a783a196`.
type RemoveBackgroundRequest struct {
	// The background identifier
	BackgroundID Int64
}

// RemoveBackgroundRequestTypeID is TL type id of RemoveBackgroundRequest.
const RemoveBackgroundRequestTypeID = 0xa783a196

// Ensuring interfaces in compile-time for RemoveBackgroundRequest.
var (
	_ bin.Encoder     = &RemoveBackgroundRequest{}
	_ bin.Decoder     = &RemoveBackgroundRequest{}
	_ bin.BareEncoder = &RemoveBackgroundRequest{}
	_ bin.BareDecoder = &RemoveBackgroundRequest{}
)

func (r *RemoveBackgroundRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.BackgroundID.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *RemoveBackgroundRequest) String() string {
	if r == nil {
		return "RemoveBackgroundRequest(nil)"
	}
	type Alias RemoveBackgroundRequest
	return fmt.Sprintf("RemoveBackgroundRequest%+v", Alias(*r))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*RemoveBackgroundRequest) TypeID() uint32 {
	return RemoveBackgroundRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*RemoveBackgroundRequest) TypeName() string {
	return "removeBackground"
}

// TypeInfo returns info about TL type.
func (r *RemoveBackgroundRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "removeBackground",
		ID:   RemoveBackgroundRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BackgroundID",
			SchemaName: "background_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *RemoveBackgroundRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode removeBackground#a783a196 as nil")
	}
	b.PutID(RemoveBackgroundRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *RemoveBackgroundRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode removeBackground#a783a196 as nil")
	}
	if err := r.BackgroundID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode removeBackground#a783a196: field background_id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *RemoveBackgroundRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode removeBackground#a783a196 to nil")
	}
	if err := b.ConsumeID(RemoveBackgroundRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode removeBackground#a783a196: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *RemoveBackgroundRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode removeBackground#a783a196 to nil")
	}
	{
		if err := r.BackgroundID.Decode(b); err != nil {
			return fmt.Errorf("unable to decode removeBackground#a783a196: field background_id: %w", err)
		}
	}
	return nil
}

// GetBackgroundID returns value of BackgroundID field.
func (r *RemoveBackgroundRequest) GetBackgroundID() (value Int64) {
	return r.BackgroundID
}

// RemoveBackground invokes method removeBackground#a783a196 returning error if any.
func (c *Client) RemoveBackground(ctx context.Context, backgroundid Int64) error {
	var ok Ok

	request := &RemoveBackgroundRequest{
		BackgroundID: backgroundid,
	}
	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
