// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// Notification represents TL type `notification#81fa1b96`.
type Notification struct {
	// Unique persistent identifier of this notification
	ID int32
	// Notification date
	Date int32
	// Identifier of the notification sound to be played; 0 if sound is disabled
	SoundID int64
	// Notification type
	Type NotificationTypeClass
}

// NotificationTypeID is TL type id of Notification.
const NotificationTypeID = 0x81fa1b96

// Ensuring interfaces in compile-time for Notification.
var (
	_ bin.Encoder     = &Notification{}
	_ bin.Decoder     = &Notification{}
	_ bin.BareEncoder = &Notification{}
	_ bin.BareDecoder = &Notification{}
)

func (n *Notification) Zero() bool {
	if n == nil {
		return true
	}
	if !(n.ID == 0) {
		return false
	}
	if !(n.Date == 0) {
		return false
	}
	if !(n.SoundID == 0) {
		return false
	}
	if !(n.Type == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (n *Notification) String() string {
	if n == nil {
		return "Notification(nil)"
	}
	type Alias Notification
	return fmt.Sprintf("Notification%+v", Alias(*n))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*Notification) TypeID() uint32 {
	return NotificationTypeID
}

// TypeName returns name of type in TL schema.
func (*Notification) TypeName() string {
	return "notification"
}

// TypeInfo returns info about TL type.
func (n *Notification) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "notification",
		ID:   NotificationTypeID,
	}
	if n == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
		{
			Name:       "SoundID",
			SchemaName: "sound_id",
		},
		{
			Name:       "Type",
			SchemaName: "type",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (n *Notification) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notification#81fa1b96 as nil")
	}
	b.PutID(NotificationTypeID)
	return n.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (n *Notification) EncodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notification#81fa1b96 as nil")
	}
	b.PutInt32(n.ID)
	b.PutInt32(n.Date)
	b.PutLong(n.SoundID)
	if n.Type == nil {
		return fmt.Errorf("unable to encode notification#81fa1b96: field type is nil")
	}
	if err := n.Type.Encode(b); err != nil {
		return fmt.Errorf("unable to encode notification#81fa1b96: field type: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (n *Notification) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notification#81fa1b96 to nil")
	}
	if err := b.ConsumeID(NotificationTypeID); err != nil {
		return fmt.Errorf("unable to decode notification#81fa1b96: %w", err)
	}
	return n.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (n *Notification) DecodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notification#81fa1b96 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode notification#81fa1b96: field id: %w", err)
		}
		n.ID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode notification#81fa1b96: field date: %w", err)
		}
		n.Date = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode notification#81fa1b96: field sound_id: %w", err)
		}
		n.SoundID = value
	}
	{
		value, err := DecodeNotificationType(b)
		if err != nil {
			return fmt.Errorf("unable to decode notification#81fa1b96: field type: %w", err)
		}
		n.Type = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (n *Notification) EncodeTDLibJSON(b tdjson.Encoder) error {
	if n == nil {
		return fmt.Errorf("can't encode notification#81fa1b96 as nil")
	}
	b.ObjStart()
	b.PutID("notification")
	b.Comma()
	b.FieldStart("id")
	b.PutInt32(n.ID)
	b.Comma()
	b.FieldStart("date")
	b.PutInt32(n.Date)
	b.Comma()
	b.FieldStart("sound_id")
	b.PutLong(n.SoundID)
	b.Comma()
	b.FieldStart("type")
	if n.Type == nil {
		return fmt.Errorf("unable to encode notification#81fa1b96: field type is nil")
	}
	if err := n.Type.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode notification#81fa1b96: field type: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (n *Notification) DecodeTDLibJSON(b tdjson.Decoder) error {
	if n == nil {
		return fmt.Errorf("can't decode notification#81fa1b96 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("notification"); err != nil {
				return fmt.Errorf("unable to decode notification#81fa1b96: %w", err)
			}
		case "id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode notification#81fa1b96: field id: %w", err)
			}
			n.ID = value
		case "date":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode notification#81fa1b96: field date: %w", err)
			}
			n.Date = value
		case "sound_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode notification#81fa1b96: field sound_id: %w", err)
			}
			n.SoundID = value
		case "type":
			value, err := DecodeTDLibJSONNotificationType(b)
			if err != nil {
				return fmt.Errorf("unable to decode notification#81fa1b96: field type: %w", err)
			}
			n.Type = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetID returns value of ID field.
func (n *Notification) GetID() (value int32) {
	if n == nil {
		return
	}
	return n.ID
}

// GetDate returns value of Date field.
func (n *Notification) GetDate() (value int32) {
	if n == nil {
		return
	}
	return n.Date
}

// GetSoundID returns value of SoundID field.
func (n *Notification) GetSoundID() (value int64) {
	if n == nil {
		return
	}
	return n.SoundID
}

// GetType returns value of Type field.
func (n *Notification) GetType() (value NotificationTypeClass) {
	if n == nil {
		return
	}
	return n.Type
}
