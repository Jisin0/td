// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// InputBusinessIntro represents TL type `inputBusinessIntro#910fb07`.
type InputBusinessIntro struct {
	// Title text of the intro; 0-getOption("business_intro_title_length_max") characters
	Title string
	// Message text of the intro; 0-getOption("business_intro_message_length_max") characters
	Message string
	// Greeting sticker of the intro; pass null if none. The sticker must belong to a sticker
	// set and must not be a custom emoji
	Sticker InputFileClass
}

// InputBusinessIntroTypeID is TL type id of InputBusinessIntro.
const InputBusinessIntroTypeID = 0x910fb07

// Ensuring interfaces in compile-time for InputBusinessIntro.
var (
	_ bin.Encoder     = &InputBusinessIntro{}
	_ bin.Decoder     = &InputBusinessIntro{}
	_ bin.BareEncoder = &InputBusinessIntro{}
	_ bin.BareDecoder = &InputBusinessIntro{}
)

func (i *InputBusinessIntro) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Title == "") {
		return false
	}
	if !(i.Message == "") {
		return false
	}
	if !(i.Sticker == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputBusinessIntro) String() string {
	if i == nil {
		return "InputBusinessIntro(nil)"
	}
	type Alias InputBusinessIntro
	return fmt.Sprintf("InputBusinessIntro%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InputBusinessIntro) TypeID() uint32 {
	return InputBusinessIntroTypeID
}

// TypeName returns name of type in TL schema.
func (*InputBusinessIntro) TypeName() string {
	return "inputBusinessIntro"
}

// TypeInfo returns info about TL type.
func (i *InputBusinessIntro) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "inputBusinessIntro",
		ID:   InputBusinessIntroTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "Message",
			SchemaName: "message",
		},
		{
			Name:       "Sticker",
			SchemaName: "sticker",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InputBusinessIntro) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputBusinessIntro#910fb07 as nil")
	}
	b.PutID(InputBusinessIntroTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InputBusinessIntro) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputBusinessIntro#910fb07 as nil")
	}
	b.PutString(i.Title)
	b.PutString(i.Message)
	if i.Sticker == nil {
		return fmt.Errorf("unable to encode inputBusinessIntro#910fb07: field sticker is nil")
	}
	if err := i.Sticker.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBusinessIntro#910fb07: field sticker: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InputBusinessIntro) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputBusinessIntro#910fb07 to nil")
	}
	if err := b.ConsumeID(InputBusinessIntroTypeID); err != nil {
		return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InputBusinessIntro) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputBusinessIntro#910fb07 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: field title: %w", err)
		}
		i.Title = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: field message: %w", err)
		}
		i.Message = value
	}
	{
		value, err := DecodeInputFile(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: field sticker: %w", err)
		}
		i.Sticker = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (i *InputBusinessIntro) EncodeTDLibJSON(b tdjson.Encoder) error {
	if i == nil {
		return fmt.Errorf("can't encode inputBusinessIntro#910fb07 as nil")
	}
	b.ObjStart()
	b.PutID("inputBusinessIntro")
	b.Comma()
	b.FieldStart("title")
	b.PutString(i.Title)
	b.Comma()
	b.FieldStart("message")
	b.PutString(i.Message)
	b.Comma()
	b.FieldStart("sticker")
	if i.Sticker == nil {
		return fmt.Errorf("unable to encode inputBusinessIntro#910fb07: field sticker is nil")
	}
	if err := i.Sticker.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode inputBusinessIntro#910fb07: field sticker: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (i *InputBusinessIntro) DecodeTDLibJSON(b tdjson.Decoder) error {
	if i == nil {
		return fmt.Errorf("can't decode inputBusinessIntro#910fb07 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("inputBusinessIntro"); err != nil {
				return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: %w", err)
			}
		case "title":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: field title: %w", err)
			}
			i.Title = value
		case "message":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: field message: %w", err)
			}
			i.Message = value
		case "sticker":
			value, err := DecodeTDLibJSONInputFile(b)
			if err != nil {
				return fmt.Errorf("unable to decode inputBusinessIntro#910fb07: field sticker: %w", err)
			}
			i.Sticker = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetTitle returns value of Title field.
func (i *InputBusinessIntro) GetTitle() (value string) {
	if i == nil {
		return
	}
	return i.Title
}

// GetMessage returns value of Message field.
func (i *InputBusinessIntro) GetMessage() (value string) {
	if i == nil {
		return
	}
	return i.Message
}

// GetSticker returns value of Sticker field.
func (i *InputBusinessIntro) GetSticker() (value InputFileClass) {
	if i == nil {
		return
	}
	return i.Sticker
}
