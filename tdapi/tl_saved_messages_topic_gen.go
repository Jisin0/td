// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SavedMessagesTopicMyNotes represents TL type `savedMessagesTopicMyNotes#9dd7231d`.
type SavedMessagesTopicMyNotes struct {
}

// SavedMessagesTopicMyNotesTypeID is TL type id of SavedMessagesTopicMyNotes.
const SavedMessagesTopicMyNotesTypeID = 0x9dd7231d

// construct implements constructor of SavedMessagesTopicClass.
func (s SavedMessagesTopicMyNotes) construct() SavedMessagesTopicClass { return &s }

// Ensuring interfaces in compile-time for SavedMessagesTopicMyNotes.
var (
	_ bin.Encoder     = &SavedMessagesTopicMyNotes{}
	_ bin.Decoder     = &SavedMessagesTopicMyNotes{}
	_ bin.BareEncoder = &SavedMessagesTopicMyNotes{}
	_ bin.BareDecoder = &SavedMessagesTopicMyNotes{}

	_ SavedMessagesTopicClass = &SavedMessagesTopicMyNotes{}
)

func (s *SavedMessagesTopicMyNotes) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SavedMessagesTopicMyNotes) String() string {
	if s == nil {
		return "SavedMessagesTopicMyNotes(nil)"
	}
	type Alias SavedMessagesTopicMyNotes
	return fmt.Sprintf("SavedMessagesTopicMyNotes%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SavedMessagesTopicMyNotes) TypeID() uint32 {
	return SavedMessagesTopicMyNotesTypeID
}

// TypeName returns name of type in TL schema.
func (*SavedMessagesTopicMyNotes) TypeName() string {
	return "savedMessagesTopicMyNotes"
}

// TypeInfo returns info about TL type.
func (s *SavedMessagesTopicMyNotes) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "savedMessagesTopicMyNotes",
		ID:   SavedMessagesTopicMyNotesTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SavedMessagesTopicMyNotes) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicMyNotes#9dd7231d as nil")
	}
	b.PutID(SavedMessagesTopicMyNotesTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SavedMessagesTopicMyNotes) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicMyNotes#9dd7231d as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SavedMessagesTopicMyNotes) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicMyNotes#9dd7231d to nil")
	}
	if err := b.ConsumeID(SavedMessagesTopicMyNotesTypeID); err != nil {
		return fmt.Errorf("unable to decode savedMessagesTopicMyNotes#9dd7231d: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SavedMessagesTopicMyNotes) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicMyNotes#9dd7231d to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SavedMessagesTopicMyNotes) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicMyNotes#9dd7231d as nil")
	}
	b.ObjStart()
	b.PutID("savedMessagesTopicMyNotes")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SavedMessagesTopicMyNotes) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicMyNotes#9dd7231d to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("savedMessagesTopicMyNotes"); err != nil {
				return fmt.Errorf("unable to decode savedMessagesTopicMyNotes#9dd7231d: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// SavedMessagesTopicAuthorHidden represents TL type `savedMessagesTopicAuthorHidden#6e75aff7`.
type SavedMessagesTopicAuthorHidden struct {
}

// SavedMessagesTopicAuthorHiddenTypeID is TL type id of SavedMessagesTopicAuthorHidden.
const SavedMessagesTopicAuthorHiddenTypeID = 0x6e75aff7

// construct implements constructor of SavedMessagesTopicClass.
func (s SavedMessagesTopicAuthorHidden) construct() SavedMessagesTopicClass { return &s }

// Ensuring interfaces in compile-time for SavedMessagesTopicAuthorHidden.
var (
	_ bin.Encoder     = &SavedMessagesTopicAuthorHidden{}
	_ bin.Decoder     = &SavedMessagesTopicAuthorHidden{}
	_ bin.BareEncoder = &SavedMessagesTopicAuthorHidden{}
	_ bin.BareDecoder = &SavedMessagesTopicAuthorHidden{}

	_ SavedMessagesTopicClass = &SavedMessagesTopicAuthorHidden{}
)

func (s *SavedMessagesTopicAuthorHidden) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SavedMessagesTopicAuthorHidden) String() string {
	if s == nil {
		return "SavedMessagesTopicAuthorHidden(nil)"
	}
	type Alias SavedMessagesTopicAuthorHidden
	return fmt.Sprintf("SavedMessagesTopicAuthorHidden%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SavedMessagesTopicAuthorHidden) TypeID() uint32 {
	return SavedMessagesTopicAuthorHiddenTypeID
}

// TypeName returns name of type in TL schema.
func (*SavedMessagesTopicAuthorHidden) TypeName() string {
	return "savedMessagesTopicAuthorHidden"
}

// TypeInfo returns info about TL type.
func (s *SavedMessagesTopicAuthorHidden) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "savedMessagesTopicAuthorHidden",
		ID:   SavedMessagesTopicAuthorHiddenTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SavedMessagesTopicAuthorHidden) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicAuthorHidden#6e75aff7 as nil")
	}
	b.PutID(SavedMessagesTopicAuthorHiddenTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SavedMessagesTopicAuthorHidden) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicAuthorHidden#6e75aff7 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SavedMessagesTopicAuthorHidden) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicAuthorHidden#6e75aff7 to nil")
	}
	if err := b.ConsumeID(SavedMessagesTopicAuthorHiddenTypeID); err != nil {
		return fmt.Errorf("unable to decode savedMessagesTopicAuthorHidden#6e75aff7: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SavedMessagesTopicAuthorHidden) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicAuthorHidden#6e75aff7 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SavedMessagesTopicAuthorHidden) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicAuthorHidden#6e75aff7 as nil")
	}
	b.ObjStart()
	b.PutID("savedMessagesTopicAuthorHidden")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SavedMessagesTopicAuthorHidden) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicAuthorHidden#6e75aff7 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("savedMessagesTopicAuthorHidden"); err != nil {
				return fmt.Errorf("unable to decode savedMessagesTopicAuthorHidden#6e75aff7: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// SavedMessagesTopicSavedFromChat represents TL type `savedMessagesTopicSavedFromChat#16543670`.
type SavedMessagesTopicSavedFromChat struct {
	// Identifier of the chat
	ChatID int64
}

// SavedMessagesTopicSavedFromChatTypeID is TL type id of SavedMessagesTopicSavedFromChat.
const SavedMessagesTopicSavedFromChatTypeID = 0x16543670

// construct implements constructor of SavedMessagesTopicClass.
func (s SavedMessagesTopicSavedFromChat) construct() SavedMessagesTopicClass { return &s }

// Ensuring interfaces in compile-time for SavedMessagesTopicSavedFromChat.
var (
	_ bin.Encoder     = &SavedMessagesTopicSavedFromChat{}
	_ bin.Decoder     = &SavedMessagesTopicSavedFromChat{}
	_ bin.BareEncoder = &SavedMessagesTopicSavedFromChat{}
	_ bin.BareDecoder = &SavedMessagesTopicSavedFromChat{}

	_ SavedMessagesTopicClass = &SavedMessagesTopicSavedFromChat{}
)

func (s *SavedMessagesTopicSavedFromChat) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SavedMessagesTopicSavedFromChat) String() string {
	if s == nil {
		return "SavedMessagesTopicSavedFromChat(nil)"
	}
	type Alias SavedMessagesTopicSavedFromChat
	return fmt.Sprintf("SavedMessagesTopicSavedFromChat%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SavedMessagesTopicSavedFromChat) TypeID() uint32 {
	return SavedMessagesTopicSavedFromChatTypeID
}

// TypeName returns name of type in TL schema.
func (*SavedMessagesTopicSavedFromChat) TypeName() string {
	return "savedMessagesTopicSavedFromChat"
}

// TypeInfo returns info about TL type.
func (s *SavedMessagesTopicSavedFromChat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "savedMessagesTopicSavedFromChat",
		ID:   SavedMessagesTopicSavedFromChatTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SavedMessagesTopicSavedFromChat) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicSavedFromChat#16543670 as nil")
	}
	b.PutID(SavedMessagesTopicSavedFromChatTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SavedMessagesTopicSavedFromChat) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicSavedFromChat#16543670 as nil")
	}
	b.PutInt53(s.ChatID)
	return nil
}

// Decode implements bin.Decoder.
func (s *SavedMessagesTopicSavedFromChat) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicSavedFromChat#16543670 to nil")
	}
	if err := b.ConsumeID(SavedMessagesTopicSavedFromChatTypeID); err != nil {
		return fmt.Errorf("unable to decode savedMessagesTopicSavedFromChat#16543670: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SavedMessagesTopicSavedFromChat) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicSavedFromChat#16543670 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode savedMessagesTopicSavedFromChat#16543670: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SavedMessagesTopicSavedFromChat) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode savedMessagesTopicSavedFromChat#16543670 as nil")
	}
	b.ObjStart()
	b.PutID("savedMessagesTopicSavedFromChat")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(s.ChatID)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SavedMessagesTopicSavedFromChat) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode savedMessagesTopicSavedFromChat#16543670 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("savedMessagesTopicSavedFromChat"); err != nil {
				return fmt.Errorf("unable to decode savedMessagesTopicSavedFromChat#16543670: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode savedMessagesTopicSavedFromChat#16543670: field chat_id: %w", err)
			}
			s.ChatID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (s *SavedMessagesTopicSavedFromChat) GetChatID() (value int64) {
	if s == nil {
		return
	}
	return s.ChatID
}

// SavedMessagesTopicClassName is schema name of SavedMessagesTopicClass.
const SavedMessagesTopicClassName = "SavedMessagesTopic"

// SavedMessagesTopicClass represents SavedMessagesTopic generic type.
//
// Example:
//
//	g, err := tdapi.DecodeSavedMessagesTopic(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.SavedMessagesTopicMyNotes: // savedMessagesTopicMyNotes#9dd7231d
//	case *tdapi.SavedMessagesTopicAuthorHidden: // savedMessagesTopicAuthorHidden#6e75aff7
//	case *tdapi.SavedMessagesTopicSavedFromChat: // savedMessagesTopicSavedFromChat#16543670
//	default: panic(v)
//	}
type SavedMessagesTopicClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() SavedMessagesTopicClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeSavedMessagesTopic implements binary de-serialization for SavedMessagesTopicClass.
func DecodeSavedMessagesTopic(buf *bin.Buffer) (SavedMessagesTopicClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case SavedMessagesTopicMyNotesTypeID:
		// Decoding savedMessagesTopicMyNotes#9dd7231d.
		v := SavedMessagesTopicMyNotes{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", err)
		}
		return &v, nil
	case SavedMessagesTopicAuthorHiddenTypeID:
		// Decoding savedMessagesTopicAuthorHidden#6e75aff7.
		v := SavedMessagesTopicAuthorHidden{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", err)
		}
		return &v, nil
	case SavedMessagesTopicSavedFromChatTypeID:
		// Decoding savedMessagesTopicSavedFromChat#16543670.
		v := SavedMessagesTopicSavedFromChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONSavedMessagesTopic implements binary de-serialization for SavedMessagesTopicClass.
func DecodeTDLibJSONSavedMessagesTopic(buf tdjson.Decoder) (SavedMessagesTopicClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "savedMessagesTopicMyNotes":
		// Decoding savedMessagesTopicMyNotes#9dd7231d.
		v := SavedMessagesTopicMyNotes{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", err)
		}
		return &v, nil
	case "savedMessagesTopicAuthorHidden":
		// Decoding savedMessagesTopicAuthorHidden#6e75aff7.
		v := SavedMessagesTopicAuthorHidden{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", err)
		}
		return &v, nil
	case "savedMessagesTopicSavedFromChat":
		// Decoding savedMessagesTopicSavedFromChat#16543670.
		v := SavedMessagesTopicSavedFromChat{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode SavedMessagesTopicClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// SavedMessagesTopic boxes the SavedMessagesTopicClass providing a helper.
type SavedMessagesTopicBox struct {
	SavedMessagesTopic SavedMessagesTopicClass
}

// Decode implements bin.Decoder for SavedMessagesTopicBox.
func (b *SavedMessagesTopicBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode SavedMessagesTopicBox to nil")
	}
	v, err := DecodeSavedMessagesTopic(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.SavedMessagesTopic = v
	return nil
}

// Encode implements bin.Encode for SavedMessagesTopicBox.
func (b *SavedMessagesTopicBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.SavedMessagesTopic == nil {
		return fmt.Errorf("unable to encode SavedMessagesTopicClass as nil")
	}
	return b.SavedMessagesTopic.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for SavedMessagesTopicBox.
func (b *SavedMessagesTopicBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode SavedMessagesTopicBox to nil")
	}
	v, err := DecodeTDLibJSONSavedMessagesTopic(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.SavedMessagesTopic = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for SavedMessagesTopicBox.
func (b *SavedMessagesTopicBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.SavedMessagesTopic == nil {
		return fmt.Errorf("unable to encode SavedMessagesTopicClass as nil")
	}
	return b.SavedMessagesTopic.EncodeTDLibJSON(buf)
}
