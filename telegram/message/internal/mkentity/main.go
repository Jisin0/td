package main

import (
	"reflect"

	"github.com/go-faster/errors"

	"github.com/gotd/td/tdp"
	"github.com/gotd/td/telegram/message/internal/mkrun"
	"github.com/gotd/td/tg"
)

// Field represents type field.
type Field struct {
	// Name is Go name of field.
	Name string
	// Type is Go type of field.
	Type string
}

// Type represents generated type.
type Type struct {
	// Name is Go name of type.
	Name string
	// Fields is slice of type fields.
	Fields []Field
	// SchemaType is related schema type.
	SchemaType tdp.Type
}

const rawTemplate = `// Code generated by mkentity, DO NOT EDIT.
package {{ $.PackageName }}

import (
	"context"

	"github.com/gotd/td/tg"
)

var (
	_ = tg.Invoker(nil)
	_ = context.Context(nil)
)

{{- /*gotype: github.com/gotd/td/telegram/message/internal/mkrun.Config*/ -}}
{{- range $typ := $.Data }}
{{ $helperName := trimPrefix ( trimPrefix $typ.Name "Input" ) "MessageEntity" -}}
// {{ $helperName }} creates Formatter of {{ $helperName }} message entity.
//
// See https://core.telegram.org/constructor/{{ $typ.SchemaType.Name }}.
func {{ $helperName }}({{- range $f := $typ.Fields }}{{ lowerFirst $f.Name }} {{ $f.Type }}{{- end }}) Formatter {
	return func(offset, length int) tg.MessageEntityClass {
		return &tg.{{ $typ.Name }}{
			Offset: offset,
			Length: length,
			{{- range $f := $typ.Fields }}
			{{ $f.Name }}: {{ lowerFirst $f.Name }},
			{{- end }}
		}
	}
}

// {{ $helperName }} adds and formats message as {{ $helperName }} message entity.
//
// See https://core.telegram.org/constructor/{{ $typ.SchemaType.Name }}.
func (b *Builder) {{ $helperName }}(s string,
{{- range $f := $typ.Fields }}{{ lowerFirst $f.Name }} {{ $f.Type }}{{- end }}) *Builder {
	return b.Format(s, {{ $helperName }}({{- range $f := $typ.Fields }}{{ lowerFirst $f.Name }},{{- end }}))
}
{{- end }}
`

var (
	constructors = tg.ClassConstructorsMap()
	create       = tg.TypesConstructorMap()
)

type generator struct{}

func (g generator) Name() string {
	return "mkentity"
}

func (g generator) Template() string {
	return rawTemplate
}

func (g generator) Data() (interface{}, error) {
	var types []Type
	for _, typeID := range constructors[tg.MessageEntityClassName] {
		v, ok := create[typeID]().(tdp.Object)
		if !ok {
			return nil, errors.Errorf("bad type %#x", typeID)
		}
		schemaType := v.TypeInfo()
		// Skip messageEntityMentionName because we should use inputMessageEntityMentionName.
		if schemaType.Name == "messageEntityMentionName" {
			continue
		}

		tv := reflect.TypeOf(v).Elem()

		var fields []Field
		for _, field := range schemaType.Fields {
			// These fields set by Formatter callee.
			if field.Name == "Offset" || field.Name == "Length" {
				continue
			}

			rf, ok := tv.FieldByName(field.Name)
			if !ok {
				return nil, errors.Errorf(
					"field of %q type %q not found",
					field.Name, schemaType.Name,
				)
			}
			fields = append(fields, Field{
				Name: field.Name,
				Type: rf.Type.String(),
			})
		}
		types = append(types, Type{
			Name:       tv.Name(),
			Fields:     fields,
			SchemaType: v.TypeInfo(),
		})
	}

	return types, nil
}

func main() {
	mkrun.Main(generator{})
}
