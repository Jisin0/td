// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// GetPassportAuthorizationFormRequest represents TL type `getPassportAuthorizationForm#a87a1591`.
type GetPassportAuthorizationFormRequest struct {
	// User identifier of the service's bot
	BotUserID int32
	// Telegram Passport element types requested by the service
	Scope string
	// Service's public key
	PublicKey string
	// Unique request identifier provided by the service
	Nonce string
}

// GetPassportAuthorizationFormRequestTypeID is TL type id of GetPassportAuthorizationFormRequest.
const GetPassportAuthorizationFormRequestTypeID = 0xa87a1591

// Ensuring interfaces in compile-time for GetPassportAuthorizationFormRequest.
var (
	_ bin.Encoder     = &GetPassportAuthorizationFormRequest{}
	_ bin.Decoder     = &GetPassportAuthorizationFormRequest{}
	_ bin.BareEncoder = &GetPassportAuthorizationFormRequest{}
	_ bin.BareDecoder = &GetPassportAuthorizationFormRequest{}
)

func (g *GetPassportAuthorizationFormRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.BotUserID == 0) {
		return false
	}
	if !(g.Scope == "") {
		return false
	}
	if !(g.PublicKey == "") {
		return false
	}
	if !(g.Nonce == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetPassportAuthorizationFormRequest) String() string {
	if g == nil {
		return "GetPassportAuthorizationFormRequest(nil)"
	}
	type Alias GetPassportAuthorizationFormRequest
	return fmt.Sprintf("GetPassportAuthorizationFormRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetPassportAuthorizationFormRequest) TypeID() uint32 {
	return GetPassportAuthorizationFormRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetPassportAuthorizationFormRequest) TypeName() string {
	return "getPassportAuthorizationForm"
}

// TypeInfo returns info about TL type.
func (g *GetPassportAuthorizationFormRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getPassportAuthorizationForm",
		ID:   GetPassportAuthorizationFormRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "Scope",
			SchemaName: "scope",
		},
		{
			Name:       "PublicKey",
			SchemaName: "public_key",
		},
		{
			Name:       "Nonce",
			SchemaName: "nonce",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetPassportAuthorizationFormRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getPassportAuthorizationForm#a87a1591 as nil")
	}
	b.PutID(GetPassportAuthorizationFormRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetPassportAuthorizationFormRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getPassportAuthorizationForm#a87a1591 as nil")
	}
	b.PutInt32(g.BotUserID)
	b.PutString(g.Scope)
	b.PutString(g.PublicKey)
	b.PutString(g.Nonce)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetPassportAuthorizationFormRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getPassportAuthorizationForm#a87a1591 to nil")
	}
	if err := b.ConsumeID(GetPassportAuthorizationFormRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getPassportAuthorizationForm#a87a1591: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetPassportAuthorizationFormRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getPassportAuthorizationForm#a87a1591 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getPassportAuthorizationForm#a87a1591: field bot_user_id: %w", err)
		}
		g.BotUserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode getPassportAuthorizationForm#a87a1591: field scope: %w", err)
		}
		g.Scope = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode getPassportAuthorizationForm#a87a1591: field public_key: %w", err)
		}
		g.PublicKey = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode getPassportAuthorizationForm#a87a1591: field nonce: %w", err)
		}
		g.Nonce = value
	}
	return nil
}

// GetBotUserID returns value of BotUserID field.
func (g *GetPassportAuthorizationFormRequest) GetBotUserID() (value int32) {
	return g.BotUserID
}

// GetScope returns value of Scope field.
func (g *GetPassportAuthorizationFormRequest) GetScope() (value string) {
	return g.Scope
}

// GetPublicKey returns value of PublicKey field.
func (g *GetPassportAuthorizationFormRequest) GetPublicKey() (value string) {
	return g.PublicKey
}

// GetNonce returns value of Nonce field.
func (g *GetPassportAuthorizationFormRequest) GetNonce() (value string) {
	return g.Nonce
}

// GetPassportAuthorizationForm invokes method getPassportAuthorizationForm#a87a1591 returning error if any.
func (c *Client) GetPassportAuthorizationForm(ctx context.Context, request *GetPassportAuthorizationFormRequest) (*PassportAuthorizationForm, error) {
	var result PassportAuthorizationForm

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
