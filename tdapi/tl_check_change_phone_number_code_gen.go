// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// CheckChangePhoneNumberCodeRequest represents TL type `checkChangePhoneNumberCode#9976a263`.
type CheckChangePhoneNumberCodeRequest struct {
	// Verification code received by SMS, phone call or flash call
	Code string
}

// CheckChangePhoneNumberCodeRequestTypeID is TL type id of CheckChangePhoneNumberCodeRequest.
const CheckChangePhoneNumberCodeRequestTypeID = 0x9976a263

// Ensuring interfaces in compile-time for CheckChangePhoneNumberCodeRequest.
var (
	_ bin.Encoder     = &CheckChangePhoneNumberCodeRequest{}
	_ bin.Decoder     = &CheckChangePhoneNumberCodeRequest{}
	_ bin.BareEncoder = &CheckChangePhoneNumberCodeRequest{}
	_ bin.BareDecoder = &CheckChangePhoneNumberCodeRequest{}
)

func (c *CheckChangePhoneNumberCodeRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Code == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CheckChangePhoneNumberCodeRequest) String() string {
	if c == nil {
		return "CheckChangePhoneNumberCodeRequest(nil)"
	}
	type Alias CheckChangePhoneNumberCodeRequest
	return fmt.Sprintf("CheckChangePhoneNumberCodeRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CheckChangePhoneNumberCodeRequest) TypeID() uint32 {
	return CheckChangePhoneNumberCodeRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*CheckChangePhoneNumberCodeRequest) TypeName() string {
	return "checkChangePhoneNumberCode"
}

// TypeInfo returns info about TL type.
func (c *CheckChangePhoneNumberCodeRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "checkChangePhoneNumberCode",
		ID:   CheckChangePhoneNumberCodeRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Code",
			SchemaName: "code",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CheckChangePhoneNumberCodeRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode checkChangePhoneNumberCode#9976a263 as nil")
	}
	b.PutID(CheckChangePhoneNumberCodeRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CheckChangePhoneNumberCodeRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode checkChangePhoneNumberCode#9976a263 as nil")
	}
	b.PutString(c.Code)
	return nil
}

// Decode implements bin.Decoder.
func (c *CheckChangePhoneNumberCodeRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode checkChangePhoneNumberCode#9976a263 to nil")
	}
	if err := b.ConsumeID(CheckChangePhoneNumberCodeRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode checkChangePhoneNumberCode#9976a263: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CheckChangePhoneNumberCodeRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode checkChangePhoneNumberCode#9976a263 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode checkChangePhoneNumberCode#9976a263: field code: %w", err)
		}
		c.Code = value
	}
	return nil
}

// GetCode returns value of Code field.
func (c *CheckChangePhoneNumberCodeRequest) GetCode() (value string) {
	return c.Code
}

// CheckChangePhoneNumberCode invokes method checkChangePhoneNumberCode#9976a263 returning error if any.
func (c *Client) CheckChangePhoneNumberCode(ctx context.Context, code string) error {
	var ok Ok

	request := &CheckChangePhoneNumberCodeRequest{
		Code: code,
	}
	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
