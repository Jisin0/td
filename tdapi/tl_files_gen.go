// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// Files represents TL type `files#c857c33d`.
type Files struct {
	// List of files
	Files []File
}

// FilesTypeID is TL type id of Files.
const FilesTypeID = 0xc857c33d

// Ensuring interfaces in compile-time for Files.
var (
	_ bin.Encoder     = &Files{}
	_ bin.Decoder     = &Files{}
	_ bin.BareEncoder = &Files{}
	_ bin.BareDecoder = &Files{}
)

func (f *Files) Zero() bool {
	if f == nil {
		return true
	}
	if !(f.Files == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (f *Files) String() string {
	if f == nil {
		return "Files(nil)"
	}
	type Alias Files
	return fmt.Sprintf("Files%+v", Alias(*f))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*Files) TypeID() uint32 {
	return FilesTypeID
}

// TypeName returns name of type in TL schema.
func (*Files) TypeName() string {
	return "files"
}

// TypeInfo returns info about TL type.
func (f *Files) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "files",
		ID:   FilesTypeID,
	}
	if f == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Files",
			SchemaName: "files",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (f *Files) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode files#c857c33d as nil")
	}
	b.PutID(FilesTypeID)
	return f.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (f *Files) EncodeBare(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode files#c857c33d as nil")
	}
	b.PutInt(len(f.Files))
	for idx, v := range f.Files {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare files#c857c33d: field files element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (f *Files) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode files#c857c33d to nil")
	}
	if err := b.ConsumeID(FilesTypeID); err != nil {
		return fmt.Errorf("unable to decode files#c857c33d: %w", err)
	}
	return f.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (f *Files) DecodeBare(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode files#c857c33d to nil")
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode files#c857c33d: field files: %w", err)
		}

		if headerLen > 0 {
			f.Files = make([]File, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value File
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare files#c857c33d: field files: %w", err)
			}
			f.Files = append(f.Files, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (f *Files) EncodeTDLibJSON(b tdjson.Encoder) error {
	if f == nil {
		return fmt.Errorf("can't encode files#c857c33d as nil")
	}
	b.ObjStart()
	b.PutID("files")
	b.Comma()
	b.FieldStart("files")
	b.ArrStart()
	for idx, v := range f.Files {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode files#c857c33d: field files element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (f *Files) DecodeTDLibJSON(b tdjson.Decoder) error {
	if f == nil {
		return fmt.Errorf("can't decode files#c857c33d to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("files"); err != nil {
				return fmt.Errorf("unable to decode files#c857c33d: %w", err)
			}
		case "files":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value File
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode files#c857c33d: field files: %w", err)
				}
				f.Files = append(f.Files, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode files#c857c33d: field files: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetFiles returns value of Files field.
func (f *Files) GetFiles() (value []File) {
	if f == nil {
		return
	}
	return f.Files
}
