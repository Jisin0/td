// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StickerTypeStatic represents TL type `stickerTypeStatic#6b8e3cd1`.
type StickerTypeStatic struct {
}

// StickerTypeStaticTypeID is TL type id of StickerTypeStatic.
const StickerTypeStaticTypeID = 0x6b8e3cd1

// construct implements constructor of StickerTypeClass.
func (s StickerTypeStatic) construct() StickerTypeClass { return &s }

// Ensuring interfaces in compile-time for StickerTypeStatic.
var (
	_ bin.Encoder     = &StickerTypeStatic{}
	_ bin.Decoder     = &StickerTypeStatic{}
	_ bin.BareEncoder = &StickerTypeStatic{}
	_ bin.BareDecoder = &StickerTypeStatic{}

	_ StickerTypeClass = &StickerTypeStatic{}
)

func (s *StickerTypeStatic) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StickerTypeStatic) String() string {
	if s == nil {
		return "StickerTypeStatic(nil)"
	}
	type Alias StickerTypeStatic
	return fmt.Sprintf("StickerTypeStatic%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StickerTypeStatic) TypeID() uint32 {
	return StickerTypeStaticTypeID
}

// TypeName returns name of type in TL schema.
func (*StickerTypeStatic) TypeName() string {
	return "stickerTypeStatic"
}

// TypeInfo returns info about TL type.
func (s *StickerTypeStatic) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stickerTypeStatic",
		ID:   StickerTypeStaticTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StickerTypeStatic) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeStatic#6b8e3cd1 as nil")
	}
	b.PutID(StickerTypeStaticTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StickerTypeStatic) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeStatic#6b8e3cd1 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StickerTypeStatic) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeStatic#6b8e3cd1 to nil")
	}
	if err := b.ConsumeID(StickerTypeStaticTypeID); err != nil {
		return fmt.Errorf("unable to decode stickerTypeStatic#6b8e3cd1: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StickerTypeStatic) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeStatic#6b8e3cd1 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StickerTypeStatic) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeStatic#6b8e3cd1 as nil")
	}
	b.ObjStart()
	b.PutID("stickerTypeStatic")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StickerTypeStatic) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeStatic#6b8e3cd1 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("stickerTypeStatic"); err != nil {
				return fmt.Errorf("unable to decode stickerTypeStatic#6b8e3cd1: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StickerTypeAnimated represents TL type `stickerTypeAnimated#691926ad`.
type StickerTypeAnimated struct {
}

// StickerTypeAnimatedTypeID is TL type id of StickerTypeAnimated.
const StickerTypeAnimatedTypeID = 0x691926ad

// construct implements constructor of StickerTypeClass.
func (s StickerTypeAnimated) construct() StickerTypeClass { return &s }

// Ensuring interfaces in compile-time for StickerTypeAnimated.
var (
	_ bin.Encoder     = &StickerTypeAnimated{}
	_ bin.Decoder     = &StickerTypeAnimated{}
	_ bin.BareEncoder = &StickerTypeAnimated{}
	_ bin.BareDecoder = &StickerTypeAnimated{}

	_ StickerTypeClass = &StickerTypeAnimated{}
)

func (s *StickerTypeAnimated) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StickerTypeAnimated) String() string {
	if s == nil {
		return "StickerTypeAnimated(nil)"
	}
	type Alias StickerTypeAnimated
	return fmt.Sprintf("StickerTypeAnimated%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StickerTypeAnimated) TypeID() uint32 {
	return StickerTypeAnimatedTypeID
}

// TypeName returns name of type in TL schema.
func (*StickerTypeAnimated) TypeName() string {
	return "stickerTypeAnimated"
}

// TypeInfo returns info about TL type.
func (s *StickerTypeAnimated) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stickerTypeAnimated",
		ID:   StickerTypeAnimatedTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StickerTypeAnimated) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeAnimated#691926ad as nil")
	}
	b.PutID(StickerTypeAnimatedTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StickerTypeAnimated) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeAnimated#691926ad as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StickerTypeAnimated) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeAnimated#691926ad to nil")
	}
	if err := b.ConsumeID(StickerTypeAnimatedTypeID); err != nil {
		return fmt.Errorf("unable to decode stickerTypeAnimated#691926ad: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StickerTypeAnimated) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeAnimated#691926ad to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StickerTypeAnimated) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeAnimated#691926ad as nil")
	}
	b.ObjStart()
	b.PutID("stickerTypeAnimated")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StickerTypeAnimated) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeAnimated#691926ad to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("stickerTypeAnimated"); err != nil {
				return fmt.Errorf("unable to decode stickerTypeAnimated#691926ad: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StickerTypeVideo represents TL type `stickerTypeVideo#1f22af74`.
type StickerTypeVideo struct {
}

// StickerTypeVideoTypeID is TL type id of StickerTypeVideo.
const StickerTypeVideoTypeID = 0x1f22af74

// construct implements constructor of StickerTypeClass.
func (s StickerTypeVideo) construct() StickerTypeClass { return &s }

// Ensuring interfaces in compile-time for StickerTypeVideo.
var (
	_ bin.Encoder     = &StickerTypeVideo{}
	_ bin.Decoder     = &StickerTypeVideo{}
	_ bin.BareEncoder = &StickerTypeVideo{}
	_ bin.BareDecoder = &StickerTypeVideo{}

	_ StickerTypeClass = &StickerTypeVideo{}
)

func (s *StickerTypeVideo) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StickerTypeVideo) String() string {
	if s == nil {
		return "StickerTypeVideo(nil)"
	}
	type Alias StickerTypeVideo
	return fmt.Sprintf("StickerTypeVideo%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StickerTypeVideo) TypeID() uint32 {
	return StickerTypeVideoTypeID
}

// TypeName returns name of type in TL schema.
func (*StickerTypeVideo) TypeName() string {
	return "stickerTypeVideo"
}

// TypeInfo returns info about TL type.
func (s *StickerTypeVideo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stickerTypeVideo",
		ID:   StickerTypeVideoTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StickerTypeVideo) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeVideo#1f22af74 as nil")
	}
	b.PutID(StickerTypeVideoTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StickerTypeVideo) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeVideo#1f22af74 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StickerTypeVideo) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeVideo#1f22af74 to nil")
	}
	if err := b.ConsumeID(StickerTypeVideoTypeID); err != nil {
		return fmt.Errorf("unable to decode stickerTypeVideo#1f22af74: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StickerTypeVideo) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeVideo#1f22af74 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StickerTypeVideo) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeVideo#1f22af74 as nil")
	}
	b.ObjStart()
	b.PutID("stickerTypeVideo")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StickerTypeVideo) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeVideo#1f22af74 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("stickerTypeVideo"); err != nil {
				return fmt.Errorf("unable to decode stickerTypeVideo#1f22af74: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StickerTypeMask represents TL type `stickerTypeMask#cdf254e3`.
type StickerTypeMask struct {
	// Position where the mask is placed; may be null
	MaskPosition MaskPosition
}

// StickerTypeMaskTypeID is TL type id of StickerTypeMask.
const StickerTypeMaskTypeID = 0xcdf254e3

// construct implements constructor of StickerTypeClass.
func (s StickerTypeMask) construct() StickerTypeClass { return &s }

// Ensuring interfaces in compile-time for StickerTypeMask.
var (
	_ bin.Encoder     = &StickerTypeMask{}
	_ bin.Decoder     = &StickerTypeMask{}
	_ bin.BareEncoder = &StickerTypeMask{}
	_ bin.BareDecoder = &StickerTypeMask{}

	_ StickerTypeClass = &StickerTypeMask{}
)

func (s *StickerTypeMask) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.MaskPosition.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StickerTypeMask) String() string {
	if s == nil {
		return "StickerTypeMask(nil)"
	}
	type Alias StickerTypeMask
	return fmt.Sprintf("StickerTypeMask%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StickerTypeMask) TypeID() uint32 {
	return StickerTypeMaskTypeID
}

// TypeName returns name of type in TL schema.
func (*StickerTypeMask) TypeName() string {
	return "stickerTypeMask"
}

// TypeInfo returns info about TL type.
func (s *StickerTypeMask) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stickerTypeMask",
		ID:   StickerTypeMaskTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MaskPosition",
			SchemaName: "mask_position",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StickerTypeMask) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeMask#cdf254e3 as nil")
	}
	b.PutID(StickerTypeMaskTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StickerTypeMask) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeMask#cdf254e3 as nil")
	}
	if err := s.MaskPosition.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stickerTypeMask#cdf254e3: field mask_position: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StickerTypeMask) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeMask#cdf254e3 to nil")
	}
	if err := b.ConsumeID(StickerTypeMaskTypeID); err != nil {
		return fmt.Errorf("unable to decode stickerTypeMask#cdf254e3: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StickerTypeMask) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeMask#cdf254e3 to nil")
	}
	{
		if err := s.MaskPosition.Decode(b); err != nil {
			return fmt.Errorf("unable to decode stickerTypeMask#cdf254e3: field mask_position: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StickerTypeMask) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerTypeMask#cdf254e3 as nil")
	}
	b.ObjStart()
	b.PutID("stickerTypeMask")
	b.Comma()
	b.FieldStart("mask_position")
	if err := s.MaskPosition.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode stickerTypeMask#cdf254e3: field mask_position: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StickerTypeMask) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerTypeMask#cdf254e3 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("stickerTypeMask"); err != nil {
				return fmt.Errorf("unable to decode stickerTypeMask#cdf254e3: %w", err)
			}
		case "mask_position":
			if err := s.MaskPosition.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode stickerTypeMask#cdf254e3: field mask_position: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetMaskPosition returns value of MaskPosition field.
func (s *StickerTypeMask) GetMaskPosition() (value MaskPosition) {
	if s == nil {
		return
	}
	return s.MaskPosition
}

// StickerTypeClassName is schema name of StickerTypeClass.
const StickerTypeClassName = "StickerType"

// StickerTypeClass represents StickerType generic type.
//
// Example:
//  g, err := tdapi.DecodeStickerType(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tdapi.StickerTypeStatic: // stickerTypeStatic#6b8e3cd1
//  case *tdapi.StickerTypeAnimated: // stickerTypeAnimated#691926ad
//  case *tdapi.StickerTypeVideo: // stickerTypeVideo#1f22af74
//  case *tdapi.StickerTypeMask: // stickerTypeMask#cdf254e3
//  default: panic(v)
//  }
type StickerTypeClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() StickerTypeClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeStickerType implements binary de-serialization for StickerTypeClass.
func DecodeStickerType(buf *bin.Buffer) (StickerTypeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case StickerTypeStaticTypeID:
		// Decoding stickerTypeStatic#6b8e3cd1.
		v := StickerTypeStatic{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	case StickerTypeAnimatedTypeID:
		// Decoding stickerTypeAnimated#691926ad.
		v := StickerTypeAnimated{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	case StickerTypeVideoTypeID:
		// Decoding stickerTypeVideo#1f22af74.
		v := StickerTypeVideo{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	case StickerTypeMaskTypeID:
		// Decoding stickerTypeMask#cdf254e3.
		v := StickerTypeMask{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONStickerType implements binary de-serialization for StickerTypeClass.
func DecodeTDLibJSONStickerType(buf tdjson.Decoder) (StickerTypeClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "stickerTypeStatic":
		// Decoding stickerTypeStatic#6b8e3cd1.
		v := StickerTypeStatic{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	case "stickerTypeAnimated":
		// Decoding stickerTypeAnimated#691926ad.
		v := StickerTypeAnimated{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	case "stickerTypeVideo":
		// Decoding stickerTypeVideo#1f22af74.
		v := StickerTypeVideo{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	case "stickerTypeMask":
		// Decoding stickerTypeMask#cdf254e3.
		v := StickerTypeMask{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StickerTypeClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// StickerType boxes the StickerTypeClass providing a helper.
type StickerTypeBox struct {
	StickerType StickerTypeClass
}

// Decode implements bin.Decoder for StickerTypeBox.
func (b *StickerTypeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode StickerTypeBox to nil")
	}
	v, err := DecodeStickerType(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StickerType = v
	return nil
}

// Encode implements bin.Encode for StickerTypeBox.
func (b *StickerTypeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.StickerType == nil {
		return fmt.Errorf("unable to encode StickerTypeClass as nil")
	}
	return b.StickerType.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for StickerTypeBox.
func (b *StickerTypeBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode StickerTypeBox to nil")
	}
	v, err := DecodeTDLibJSONStickerType(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StickerType = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for StickerTypeBox.
func (b *StickerTypeBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.StickerType == nil {
		return fmt.Errorf("unable to encode StickerTypeClass as nil")
	}
	return b.StickerType.EncodeTDLibJSON(buf)
}
