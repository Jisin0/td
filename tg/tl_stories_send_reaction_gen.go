// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesSendReactionRequest represents TL type `stories.sendReaction#49aaa9b3`.
//
// See https://core.telegram.org/method/stories.sendReaction for reference.
type StoriesSendReactionRequest struct {
	// Flags field of StoriesSendReactionRequest.
	Flags bin.Fields
	// AddToRecent field of StoriesSendReactionRequest.
	AddToRecent bool
	// UserID field of StoriesSendReactionRequest.
	UserID InputUserClass
	// StoryID field of StoriesSendReactionRequest.
	StoryID int
	// Reaction field of StoriesSendReactionRequest.
	Reaction ReactionClass
}

// StoriesSendReactionRequestTypeID is TL type id of StoriesSendReactionRequest.
const StoriesSendReactionRequestTypeID = 0x49aaa9b3

// Ensuring interfaces in compile-time for StoriesSendReactionRequest.
var (
	_ bin.Encoder     = &StoriesSendReactionRequest{}
	_ bin.Decoder     = &StoriesSendReactionRequest{}
	_ bin.BareEncoder = &StoriesSendReactionRequest{}
	_ bin.BareDecoder = &StoriesSendReactionRequest{}
)

func (s *StoriesSendReactionRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.AddToRecent == false) {
		return false
	}
	if !(s.UserID == nil) {
		return false
	}
	if !(s.StoryID == 0) {
		return false
	}
	if !(s.Reaction == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoriesSendReactionRequest) String() string {
	if s == nil {
		return "StoriesSendReactionRequest(nil)"
	}
	type Alias StoriesSendReactionRequest
	return fmt.Sprintf("StoriesSendReactionRequest%+v", Alias(*s))
}

// FillFrom fills StoriesSendReactionRequest from given interface.
func (s *StoriesSendReactionRequest) FillFrom(from interface {
	GetAddToRecent() (value bool)
	GetUserID() (value InputUserClass)
	GetStoryID() (value int)
	GetReaction() (value ReactionClass)
}) {
	s.AddToRecent = from.GetAddToRecent()
	s.UserID = from.GetUserID()
	s.StoryID = from.GetStoryID()
	s.Reaction = from.GetReaction()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesSendReactionRequest) TypeID() uint32 {
	return StoriesSendReactionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesSendReactionRequest) TypeName() string {
	return "stories.sendReaction"
}

// TypeInfo returns info about TL type.
func (s *StoriesSendReactionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.sendReaction",
		ID:   StoriesSendReactionRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "AddToRecent",
			SchemaName: "add_to_recent",
			Null:       !s.Flags.Has(0),
		},
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "StoryID",
			SchemaName: "story_id",
		},
		{
			Name:       "Reaction",
			SchemaName: "reaction",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (s *StoriesSendReactionRequest) SetFlags() {
	if !(s.AddToRecent == false) {
		s.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (s *StoriesSendReactionRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stories.sendReaction#49aaa9b3 as nil")
	}
	b.PutID(StoriesSendReactionRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoriesSendReactionRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stories.sendReaction#49aaa9b3 as nil")
	}
	s.SetFlags()
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stories.sendReaction#49aaa9b3: field flags: %w", err)
	}
	if s.UserID == nil {
		return fmt.Errorf("unable to encode stories.sendReaction#49aaa9b3: field user_id is nil")
	}
	if err := s.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stories.sendReaction#49aaa9b3: field user_id: %w", err)
	}
	b.PutInt(s.StoryID)
	if s.Reaction == nil {
		return fmt.Errorf("unable to encode stories.sendReaction#49aaa9b3: field reaction is nil")
	}
	if err := s.Reaction.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stories.sendReaction#49aaa9b3: field reaction: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StoriesSendReactionRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stories.sendReaction#49aaa9b3 to nil")
	}
	if err := b.ConsumeID(StoriesSendReactionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.sendReaction#49aaa9b3: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoriesSendReactionRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stories.sendReaction#49aaa9b3 to nil")
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode stories.sendReaction#49aaa9b3: field flags: %w", err)
		}
	}
	s.AddToRecent = s.Flags.Has(0)
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode stories.sendReaction#49aaa9b3: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.sendReaction#49aaa9b3: field story_id: %w", err)
		}
		s.StoryID = value
	}
	{
		value, err := DecodeReaction(b)
		if err != nil {
			return fmt.Errorf("unable to decode stories.sendReaction#49aaa9b3: field reaction: %w", err)
		}
		s.Reaction = value
	}
	return nil
}

// SetAddToRecent sets value of AddToRecent conditional field.
func (s *StoriesSendReactionRequest) SetAddToRecent(value bool) {
	if value {
		s.Flags.Set(0)
		s.AddToRecent = true
	} else {
		s.Flags.Unset(0)
		s.AddToRecent = false
	}
}

// GetAddToRecent returns value of AddToRecent conditional field.
func (s *StoriesSendReactionRequest) GetAddToRecent() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(0)
}

// GetUserID returns value of UserID field.
func (s *StoriesSendReactionRequest) GetUserID() (value InputUserClass) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetStoryID returns value of StoryID field.
func (s *StoriesSendReactionRequest) GetStoryID() (value int) {
	if s == nil {
		return
	}
	return s.StoryID
}

// GetReaction returns value of Reaction field.
func (s *StoriesSendReactionRequest) GetReaction() (value ReactionClass) {
	if s == nil {
		return
	}
	return s.Reaction
}

// StoriesSendReaction invokes method stories.sendReaction#49aaa9b3 returning error if any.
//
// See https://core.telegram.org/method/stories.sendReaction for reference.
func (c *Client) StoriesSendReaction(ctx context.Context, request *StoriesSendReactionRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
