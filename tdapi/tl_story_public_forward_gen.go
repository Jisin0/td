// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoryPublicForwardMessage represents TL type `storyPublicForwardMessage#fd39c20c`.
type StoryPublicForwardMessage struct {
	// Information about the message with the story
	Message Message
}

// StoryPublicForwardMessageTypeID is TL type id of StoryPublicForwardMessage.
const StoryPublicForwardMessageTypeID = 0xfd39c20c

// construct implements constructor of StoryPublicForwardClass.
func (s StoryPublicForwardMessage) construct() StoryPublicForwardClass { return &s }

// Ensuring interfaces in compile-time for StoryPublicForwardMessage.
var (
	_ bin.Encoder     = &StoryPublicForwardMessage{}
	_ bin.Decoder     = &StoryPublicForwardMessage{}
	_ bin.BareEncoder = &StoryPublicForwardMessage{}
	_ bin.BareDecoder = &StoryPublicForwardMessage{}

	_ StoryPublicForwardClass = &StoryPublicForwardMessage{}
)

func (s *StoryPublicForwardMessage) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Message.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoryPublicForwardMessage) String() string {
	if s == nil {
		return "StoryPublicForwardMessage(nil)"
	}
	type Alias StoryPublicForwardMessage
	return fmt.Sprintf("StoryPublicForwardMessage%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoryPublicForwardMessage) TypeID() uint32 {
	return StoryPublicForwardMessageTypeID
}

// TypeName returns name of type in TL schema.
func (*StoryPublicForwardMessage) TypeName() string {
	return "storyPublicForwardMessage"
}

// TypeInfo returns info about TL type.
func (s *StoryPublicForwardMessage) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storyPublicForwardMessage",
		ID:   StoryPublicForwardMessageTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Message",
			SchemaName: "message",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StoryPublicForwardMessage) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwardMessage#fd39c20c as nil")
	}
	b.PutID(StoryPublicForwardMessageTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoryPublicForwardMessage) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwardMessage#fd39c20c as nil")
	}
	if err := s.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode storyPublicForwardMessage#fd39c20c: field message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StoryPublicForwardMessage) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwardMessage#fd39c20c to nil")
	}
	if err := b.ConsumeID(StoryPublicForwardMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode storyPublicForwardMessage#fd39c20c: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoryPublicForwardMessage) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwardMessage#fd39c20c to nil")
	}
	{
		if err := s.Message.Decode(b); err != nil {
			return fmt.Errorf("unable to decode storyPublicForwardMessage#fd39c20c: field message: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StoryPublicForwardMessage) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwardMessage#fd39c20c as nil")
	}
	b.ObjStart()
	b.PutID("storyPublicForwardMessage")
	b.Comma()
	b.FieldStart("message")
	if err := s.Message.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode storyPublicForwardMessage#fd39c20c: field message: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StoryPublicForwardMessage) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwardMessage#fd39c20c to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("storyPublicForwardMessage"); err != nil {
				return fmt.Errorf("unable to decode storyPublicForwardMessage#fd39c20c: %w", err)
			}
		case "message":
			if err := s.Message.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode storyPublicForwardMessage#fd39c20c: field message: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetMessage returns value of Message field.
func (s *StoryPublicForwardMessage) GetMessage() (value Message) {
	if s == nil {
		return
	}
	return s.Message
}

// StoryPublicForwardStory represents TL type `storyPublicForwardStory#f7e6c146`.
type StoryPublicForwardStory struct {
	// Information about the reposted story
	Story Story
}

// StoryPublicForwardStoryTypeID is TL type id of StoryPublicForwardStory.
const StoryPublicForwardStoryTypeID = 0xf7e6c146

// construct implements constructor of StoryPublicForwardClass.
func (s StoryPublicForwardStory) construct() StoryPublicForwardClass { return &s }

// Ensuring interfaces in compile-time for StoryPublicForwardStory.
var (
	_ bin.Encoder     = &StoryPublicForwardStory{}
	_ bin.Decoder     = &StoryPublicForwardStory{}
	_ bin.BareEncoder = &StoryPublicForwardStory{}
	_ bin.BareDecoder = &StoryPublicForwardStory{}

	_ StoryPublicForwardClass = &StoryPublicForwardStory{}
)

func (s *StoryPublicForwardStory) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Story.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoryPublicForwardStory) String() string {
	if s == nil {
		return "StoryPublicForwardStory(nil)"
	}
	type Alias StoryPublicForwardStory
	return fmt.Sprintf("StoryPublicForwardStory%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoryPublicForwardStory) TypeID() uint32 {
	return StoryPublicForwardStoryTypeID
}

// TypeName returns name of type in TL schema.
func (*StoryPublicForwardStory) TypeName() string {
	return "storyPublicForwardStory"
}

// TypeInfo returns info about TL type.
func (s *StoryPublicForwardStory) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storyPublicForwardStory",
		ID:   StoryPublicForwardStoryTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Story",
			SchemaName: "story",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StoryPublicForwardStory) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwardStory#f7e6c146 as nil")
	}
	b.PutID(StoryPublicForwardStoryTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoryPublicForwardStory) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwardStory#f7e6c146 as nil")
	}
	if err := s.Story.Encode(b); err != nil {
		return fmt.Errorf("unable to encode storyPublicForwardStory#f7e6c146: field story: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StoryPublicForwardStory) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwardStory#f7e6c146 to nil")
	}
	if err := b.ConsumeID(StoryPublicForwardStoryTypeID); err != nil {
		return fmt.Errorf("unable to decode storyPublicForwardStory#f7e6c146: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoryPublicForwardStory) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwardStory#f7e6c146 to nil")
	}
	{
		if err := s.Story.Decode(b); err != nil {
			return fmt.Errorf("unable to decode storyPublicForwardStory#f7e6c146: field story: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StoryPublicForwardStory) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwardStory#f7e6c146 as nil")
	}
	b.ObjStart()
	b.PutID("storyPublicForwardStory")
	b.Comma()
	b.FieldStart("story")
	if err := s.Story.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode storyPublicForwardStory#f7e6c146: field story: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StoryPublicForwardStory) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwardStory#f7e6c146 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("storyPublicForwardStory"); err != nil {
				return fmt.Errorf("unable to decode storyPublicForwardStory#f7e6c146: %w", err)
			}
		case "story":
			if err := s.Story.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode storyPublicForwardStory#f7e6c146: field story: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetStory returns value of Story field.
func (s *StoryPublicForwardStory) GetStory() (value Story) {
	if s == nil {
		return
	}
	return s.Story
}

// StoryPublicForwardClassName is schema name of StoryPublicForwardClass.
const StoryPublicForwardClassName = "StoryPublicForward"

// StoryPublicForwardClass represents StoryPublicForward generic type.
//
// Example:
//
//	g, err := tdapi.DecodeStoryPublicForward(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.StoryPublicForwardMessage: // storyPublicForwardMessage#fd39c20c
//	case *tdapi.StoryPublicForwardStory: // storyPublicForwardStory#f7e6c146
//	default: panic(v)
//	}
type StoryPublicForwardClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() StoryPublicForwardClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeStoryPublicForward implements binary de-serialization for StoryPublicForwardClass.
func DecodeStoryPublicForward(buf *bin.Buffer) (StoryPublicForwardClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case StoryPublicForwardMessageTypeID:
		// Decoding storyPublicForwardMessage#fd39c20c.
		v := StoryPublicForwardMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StoryPublicForwardClass: %w", err)
		}
		return &v, nil
	case StoryPublicForwardStoryTypeID:
		// Decoding storyPublicForwardStory#f7e6c146.
		v := StoryPublicForwardStory{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StoryPublicForwardClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StoryPublicForwardClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONStoryPublicForward implements binary de-serialization for StoryPublicForwardClass.
func DecodeTDLibJSONStoryPublicForward(buf tdjson.Decoder) (StoryPublicForwardClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "storyPublicForwardMessage":
		// Decoding storyPublicForwardMessage#fd39c20c.
		v := StoryPublicForwardMessage{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StoryPublicForwardClass: %w", err)
		}
		return &v, nil
	case "storyPublicForwardStory":
		// Decoding storyPublicForwardStory#f7e6c146.
		v := StoryPublicForwardStory{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StoryPublicForwardClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StoryPublicForwardClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// StoryPublicForward boxes the StoryPublicForwardClass providing a helper.
type StoryPublicForwardBox struct {
	StoryPublicForward StoryPublicForwardClass
}

// Decode implements bin.Decoder for StoryPublicForwardBox.
func (b *StoryPublicForwardBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode StoryPublicForwardBox to nil")
	}
	v, err := DecodeStoryPublicForward(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StoryPublicForward = v
	return nil
}

// Encode implements bin.Encode for StoryPublicForwardBox.
func (b *StoryPublicForwardBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.StoryPublicForward == nil {
		return fmt.Errorf("unable to encode StoryPublicForwardClass as nil")
	}
	return b.StoryPublicForward.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for StoryPublicForwardBox.
func (b *StoryPublicForwardBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode StoryPublicForwardBox to nil")
	}
	v, err := DecodeTDLibJSONStoryPublicForward(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StoryPublicForward = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for StoryPublicForwardBox.
func (b *StoryPublicForwardBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.StoryPublicForward == nil {
		return fmt.Errorf("unable to encode StoryPublicForwardClass as nil")
	}
	return b.StoryPublicForward.EncodeTDLibJSON(buf)
}
