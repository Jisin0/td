// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SetBotInfoDescriptionRequest represents TL type `setBotInfoDescription#fc3f7c09`.
type SetBotInfoDescriptionRequest struct {
	// A two-letter ISO 639-1 language code. If empty, the description will be shown to all
	// users, for which language there are no dedicated description
	LanguageCode string
	// Sets the text shown in the chat with the bot if the chat is empty; bots only
	Description string
}

// SetBotInfoDescriptionRequestTypeID is TL type id of SetBotInfoDescriptionRequest.
const SetBotInfoDescriptionRequestTypeID = 0xfc3f7c09

// Ensuring interfaces in compile-time for SetBotInfoDescriptionRequest.
var (
	_ bin.Encoder     = &SetBotInfoDescriptionRequest{}
	_ bin.Decoder     = &SetBotInfoDescriptionRequest{}
	_ bin.BareEncoder = &SetBotInfoDescriptionRequest{}
	_ bin.BareDecoder = &SetBotInfoDescriptionRequest{}
)

func (s *SetBotInfoDescriptionRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.LanguageCode == "") {
		return false
	}
	if !(s.Description == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SetBotInfoDescriptionRequest) String() string {
	if s == nil {
		return "SetBotInfoDescriptionRequest(nil)"
	}
	type Alias SetBotInfoDescriptionRequest
	return fmt.Sprintf("SetBotInfoDescriptionRequest%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SetBotInfoDescriptionRequest) TypeID() uint32 {
	return SetBotInfoDescriptionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SetBotInfoDescriptionRequest) TypeName() string {
	return "setBotInfoDescription"
}

// TypeInfo returns info about TL type.
func (s *SetBotInfoDescriptionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "setBotInfoDescription",
		ID:   SetBotInfoDescriptionRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "LanguageCode",
			SchemaName: "language_code",
		},
		{
			Name:       "Description",
			SchemaName: "description",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SetBotInfoDescriptionRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setBotInfoDescription#fc3f7c09 as nil")
	}
	b.PutID(SetBotInfoDescriptionRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SetBotInfoDescriptionRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setBotInfoDescription#fc3f7c09 as nil")
	}
	b.PutString(s.LanguageCode)
	b.PutString(s.Description)
	return nil
}

// Decode implements bin.Decoder.
func (s *SetBotInfoDescriptionRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setBotInfoDescription#fc3f7c09 to nil")
	}
	if err := b.ConsumeID(SetBotInfoDescriptionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode setBotInfoDescription#fc3f7c09: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SetBotInfoDescriptionRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setBotInfoDescription#fc3f7c09 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode setBotInfoDescription#fc3f7c09: field language_code: %w", err)
		}
		s.LanguageCode = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode setBotInfoDescription#fc3f7c09: field description: %w", err)
		}
		s.Description = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SetBotInfoDescriptionRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode setBotInfoDescription#fc3f7c09 as nil")
	}
	b.ObjStart()
	b.PutID("setBotInfoDescription")
	b.Comma()
	b.FieldStart("language_code")
	b.PutString(s.LanguageCode)
	b.Comma()
	b.FieldStart("description")
	b.PutString(s.Description)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SetBotInfoDescriptionRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode setBotInfoDescription#fc3f7c09 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("setBotInfoDescription"); err != nil {
				return fmt.Errorf("unable to decode setBotInfoDescription#fc3f7c09: %w", err)
			}
		case "language_code":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode setBotInfoDescription#fc3f7c09: field language_code: %w", err)
			}
			s.LanguageCode = value
		case "description":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode setBotInfoDescription#fc3f7c09: field description: %w", err)
			}
			s.Description = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetLanguageCode returns value of LanguageCode field.
func (s *SetBotInfoDescriptionRequest) GetLanguageCode() (value string) {
	if s == nil {
		return
	}
	return s.LanguageCode
}

// GetDescription returns value of Description field.
func (s *SetBotInfoDescriptionRequest) GetDescription() (value string) {
	if s == nil {
		return
	}
	return s.Description
}

// SetBotInfoDescription invokes method setBotInfoDescription#fc3f7c09 returning error if any.
func (c *Client) SetBotInfoDescription(ctx context.Context, request *SetBotInfoDescriptionRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
