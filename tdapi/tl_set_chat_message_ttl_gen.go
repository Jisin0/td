// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SetChatMessageTTLRequest represents TL type `setChatMessageTtl#a1eb6e79`.
type SetChatMessageTTLRequest struct {
	// Chat identifier
	ChatID int64
	// New TTL value, in seconds; unless the chat is secret, it must be from 0 up to 365 *
	// 86400 and be divisible by 86400
	TTL int32
}

// SetChatMessageTTLRequestTypeID is TL type id of SetChatMessageTTLRequest.
const SetChatMessageTTLRequestTypeID = 0xa1eb6e79

// Ensuring interfaces in compile-time for SetChatMessageTTLRequest.
var (
	_ bin.Encoder     = &SetChatMessageTTLRequest{}
	_ bin.Decoder     = &SetChatMessageTTLRequest{}
	_ bin.BareEncoder = &SetChatMessageTTLRequest{}
	_ bin.BareDecoder = &SetChatMessageTTLRequest{}
)

func (s *SetChatMessageTTLRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}
	if !(s.TTL == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SetChatMessageTTLRequest) String() string {
	if s == nil {
		return "SetChatMessageTTLRequest(nil)"
	}
	type Alias SetChatMessageTTLRequest
	return fmt.Sprintf("SetChatMessageTTLRequest%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SetChatMessageTTLRequest) TypeID() uint32 {
	return SetChatMessageTTLRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SetChatMessageTTLRequest) TypeName() string {
	return "setChatMessageTtl"
}

// TypeInfo returns info about TL type.
func (s *SetChatMessageTTLRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "setChatMessageTtl",
		ID:   SetChatMessageTTLRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "TTL",
			SchemaName: "ttl",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SetChatMessageTTLRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setChatMessageTtl#a1eb6e79 as nil")
	}
	b.PutID(SetChatMessageTTLRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SetChatMessageTTLRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setChatMessageTtl#a1eb6e79 as nil")
	}
	b.PutInt53(s.ChatID)
	b.PutInt32(s.TTL)
	return nil
}

// Decode implements bin.Decoder.
func (s *SetChatMessageTTLRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setChatMessageTtl#a1eb6e79 to nil")
	}
	if err := b.ConsumeID(SetChatMessageTTLRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode setChatMessageTtl#a1eb6e79: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SetChatMessageTTLRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setChatMessageTtl#a1eb6e79 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode setChatMessageTtl#a1eb6e79: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode setChatMessageTtl#a1eb6e79: field ttl: %w", err)
		}
		s.TTL = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SetChatMessageTTLRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode setChatMessageTtl#a1eb6e79 as nil")
	}
	b.ObjStart()
	b.PutID("setChatMessageTtl")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(s.ChatID)
	b.Comma()
	b.FieldStart("ttl")
	b.PutInt32(s.TTL)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SetChatMessageTTLRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode setChatMessageTtl#a1eb6e79 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("setChatMessageTtl"); err != nil {
				return fmt.Errorf("unable to decode setChatMessageTtl#a1eb6e79: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode setChatMessageTtl#a1eb6e79: field chat_id: %w", err)
			}
			s.ChatID = value
		case "ttl":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode setChatMessageTtl#a1eb6e79: field ttl: %w", err)
			}
			s.TTL = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (s *SetChatMessageTTLRequest) GetChatID() (value int64) {
	if s == nil {
		return
	}
	return s.ChatID
}

// GetTTL returns value of TTL field.
func (s *SetChatMessageTTLRequest) GetTTL() (value int32) {
	if s == nil {
		return
	}
	return s.TTL
}

// SetChatMessageTTL invokes method setChatMessageTtl#a1eb6e79 returning error if any.
func (c *Client) SetChatMessageTTL(ctx context.Context, request *SetChatMessageTTLRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
