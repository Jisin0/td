// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SmsjobsGetSMSJobRequest represents TL type `smsjobs.getSmsJob#778d902f`.
//
// See https://core.telegram.org/method/smsjobs.getSmsJob for reference.
type SmsjobsGetSMSJobRequest struct {
	// JobID field of SmsjobsGetSMSJobRequest.
	JobID string
}

// SmsjobsGetSMSJobRequestTypeID is TL type id of SmsjobsGetSMSJobRequest.
const SmsjobsGetSMSJobRequestTypeID = 0x778d902f

// Ensuring interfaces in compile-time for SmsjobsGetSMSJobRequest.
var (
	_ bin.Encoder     = &SmsjobsGetSMSJobRequest{}
	_ bin.Decoder     = &SmsjobsGetSMSJobRequest{}
	_ bin.BareEncoder = &SmsjobsGetSMSJobRequest{}
	_ bin.BareDecoder = &SmsjobsGetSMSJobRequest{}
)

func (g *SmsjobsGetSMSJobRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.JobID == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *SmsjobsGetSMSJobRequest) String() string {
	if g == nil {
		return "SmsjobsGetSMSJobRequest(nil)"
	}
	type Alias SmsjobsGetSMSJobRequest
	return fmt.Sprintf("SmsjobsGetSMSJobRequest%+v", Alias(*g))
}

// FillFrom fills SmsjobsGetSMSJobRequest from given interface.
func (g *SmsjobsGetSMSJobRequest) FillFrom(from interface {
	GetJobID() (value string)
}) {
	g.JobID = from.GetJobID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SmsjobsGetSMSJobRequest) TypeID() uint32 {
	return SmsjobsGetSMSJobRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SmsjobsGetSMSJobRequest) TypeName() string {
	return "smsjobs.getSmsJob"
}

// TypeInfo returns info about TL type.
func (g *SmsjobsGetSMSJobRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "smsjobs.getSmsJob",
		ID:   SmsjobsGetSMSJobRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "JobID",
			SchemaName: "job_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *SmsjobsGetSMSJobRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode smsjobs.getSmsJob#778d902f as nil")
	}
	b.PutID(SmsjobsGetSMSJobRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *SmsjobsGetSMSJobRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode smsjobs.getSmsJob#778d902f as nil")
	}
	b.PutString(g.JobID)
	return nil
}

// Decode implements bin.Decoder.
func (g *SmsjobsGetSMSJobRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode smsjobs.getSmsJob#778d902f to nil")
	}
	if err := b.ConsumeID(SmsjobsGetSMSJobRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode smsjobs.getSmsJob#778d902f: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *SmsjobsGetSMSJobRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode smsjobs.getSmsJob#778d902f to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode smsjobs.getSmsJob#778d902f: field job_id: %w", err)
		}
		g.JobID = value
	}
	return nil
}

// GetJobID returns value of JobID field.
func (g *SmsjobsGetSMSJobRequest) GetJobID() (value string) {
	if g == nil {
		return
	}
	return g.JobID
}

// SmsjobsGetSMSJob invokes method smsjobs.getSmsJob#778d902f returning error if any.
//
// See https://core.telegram.org/method/smsjobs.getSmsJob for reference.
func (c *Client) SmsjobsGetSMSJob(ctx context.Context, jobid string) (*SMSJob, error) {
	var result SMSJob

	request := &SmsjobsGetSMSJobRequest{
		JobID: jobid,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
