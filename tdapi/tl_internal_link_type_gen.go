// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// InternalLinkTypeActiveSessions represents TL type `internalLinkTypeActiveSessions#706bbbad`.
type InternalLinkTypeActiveSessions struct {
}

// InternalLinkTypeActiveSessionsTypeID is TL type id of InternalLinkTypeActiveSessions.
const InternalLinkTypeActiveSessionsTypeID = 0x706bbbad

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeActiveSessions) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeActiveSessions.
var (
	_ bin.Encoder     = &InternalLinkTypeActiveSessions{}
	_ bin.Decoder     = &InternalLinkTypeActiveSessions{}
	_ bin.BareEncoder = &InternalLinkTypeActiveSessions{}
	_ bin.BareDecoder = &InternalLinkTypeActiveSessions{}

	_ InternalLinkTypeClass = &InternalLinkTypeActiveSessions{}
)

func (i *InternalLinkTypeActiveSessions) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeActiveSessions) String() string {
	if i == nil {
		return "InternalLinkTypeActiveSessions(nil)"
	}
	type Alias InternalLinkTypeActiveSessions
	return fmt.Sprintf("InternalLinkTypeActiveSessions%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeActiveSessions) TypeID() uint32 {
	return InternalLinkTypeActiveSessionsTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeActiveSessions) TypeName() string {
	return "internalLinkTypeActiveSessions"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeActiveSessions) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeActiveSessions",
		ID:   InternalLinkTypeActiveSessionsTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeActiveSessions) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeActiveSessions#706bbbad as nil")
	}
	b.PutID(InternalLinkTypeActiveSessionsTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeActiveSessions) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeActiveSessions#706bbbad as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeActiveSessions) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeActiveSessions#706bbbad to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeActiveSessionsTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeActiveSessions#706bbbad: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeActiveSessions) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeActiveSessions#706bbbad to nil")
	}
	return nil
}

// InternalLinkTypeAuthenticationCode represents TL type `internalLinkTypeAuthenticationCode#f3874ff2`.
type InternalLinkTypeAuthenticationCode struct {
	// The authentication code
	Code string
}

// InternalLinkTypeAuthenticationCodeTypeID is TL type id of InternalLinkTypeAuthenticationCode.
const InternalLinkTypeAuthenticationCodeTypeID = 0xf3874ff2

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeAuthenticationCode) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeAuthenticationCode.
var (
	_ bin.Encoder     = &InternalLinkTypeAuthenticationCode{}
	_ bin.Decoder     = &InternalLinkTypeAuthenticationCode{}
	_ bin.BareEncoder = &InternalLinkTypeAuthenticationCode{}
	_ bin.BareDecoder = &InternalLinkTypeAuthenticationCode{}

	_ InternalLinkTypeClass = &InternalLinkTypeAuthenticationCode{}
)

func (i *InternalLinkTypeAuthenticationCode) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Code == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeAuthenticationCode) String() string {
	if i == nil {
		return "InternalLinkTypeAuthenticationCode(nil)"
	}
	type Alias InternalLinkTypeAuthenticationCode
	return fmt.Sprintf("InternalLinkTypeAuthenticationCode%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeAuthenticationCode) TypeID() uint32 {
	return InternalLinkTypeAuthenticationCodeTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeAuthenticationCode) TypeName() string {
	return "internalLinkTypeAuthenticationCode"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeAuthenticationCode) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeAuthenticationCode",
		ID:   InternalLinkTypeAuthenticationCodeTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Code",
			SchemaName: "code",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeAuthenticationCode) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeAuthenticationCode#f3874ff2 as nil")
	}
	b.PutID(InternalLinkTypeAuthenticationCodeTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeAuthenticationCode) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeAuthenticationCode#f3874ff2 as nil")
	}
	b.PutString(i.Code)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeAuthenticationCode) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeAuthenticationCode#f3874ff2 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeAuthenticationCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeAuthenticationCode#f3874ff2: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeAuthenticationCode) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeAuthenticationCode#f3874ff2 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeAuthenticationCode#f3874ff2: field code: %w", err)
		}
		i.Code = value
	}
	return nil
}

// GetCode returns value of Code field.
func (i *InternalLinkTypeAuthenticationCode) GetCode() (value string) {
	return i.Code
}

// InternalLinkTypeBackground represents TL type `internalLinkTypeBackground#b0d2908`.
type InternalLinkTypeBackground struct {
	// Name of the background
	BackgroundName string
}

// InternalLinkTypeBackgroundTypeID is TL type id of InternalLinkTypeBackground.
const InternalLinkTypeBackgroundTypeID = 0xb0d2908

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeBackground) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeBackground.
var (
	_ bin.Encoder     = &InternalLinkTypeBackground{}
	_ bin.Decoder     = &InternalLinkTypeBackground{}
	_ bin.BareEncoder = &InternalLinkTypeBackground{}
	_ bin.BareDecoder = &InternalLinkTypeBackground{}

	_ InternalLinkTypeClass = &InternalLinkTypeBackground{}
)

func (i *InternalLinkTypeBackground) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.BackgroundName == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeBackground) String() string {
	if i == nil {
		return "InternalLinkTypeBackground(nil)"
	}
	type Alias InternalLinkTypeBackground
	return fmt.Sprintf("InternalLinkTypeBackground%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeBackground) TypeID() uint32 {
	return InternalLinkTypeBackgroundTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeBackground) TypeName() string {
	return "internalLinkTypeBackground"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeBackground) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeBackground",
		ID:   InternalLinkTypeBackgroundTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BackgroundName",
			SchemaName: "background_name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeBackground) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeBackground#b0d2908 as nil")
	}
	b.PutID(InternalLinkTypeBackgroundTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeBackground) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeBackground#b0d2908 as nil")
	}
	b.PutString(i.BackgroundName)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeBackground) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeBackground#b0d2908 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeBackgroundTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeBackground#b0d2908: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeBackground) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeBackground#b0d2908 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeBackground#b0d2908: field background_name: %w", err)
		}
		i.BackgroundName = value
	}
	return nil
}

// GetBackgroundName returns value of BackgroundName field.
func (i *InternalLinkTypeBackground) GetBackgroundName() (value string) {
	return i.BackgroundName
}

// InternalLinkTypeBotStart represents TL type `internalLinkTypeBotStart#b812d93d`.
type InternalLinkTypeBotStart struct {
	// Username of the bot
	BotUsername string
	// The parameter to be passed to sendBotStartMessage
	StartParameter string
}

// InternalLinkTypeBotStartTypeID is TL type id of InternalLinkTypeBotStart.
const InternalLinkTypeBotStartTypeID = 0xb812d93d

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeBotStart) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeBotStart.
var (
	_ bin.Encoder     = &InternalLinkTypeBotStart{}
	_ bin.Decoder     = &InternalLinkTypeBotStart{}
	_ bin.BareEncoder = &InternalLinkTypeBotStart{}
	_ bin.BareDecoder = &InternalLinkTypeBotStart{}

	_ InternalLinkTypeClass = &InternalLinkTypeBotStart{}
)

func (i *InternalLinkTypeBotStart) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.BotUsername == "") {
		return false
	}
	if !(i.StartParameter == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeBotStart) String() string {
	if i == nil {
		return "InternalLinkTypeBotStart(nil)"
	}
	type Alias InternalLinkTypeBotStart
	return fmt.Sprintf("InternalLinkTypeBotStart%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeBotStart) TypeID() uint32 {
	return InternalLinkTypeBotStartTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeBotStart) TypeName() string {
	return "internalLinkTypeBotStart"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeBotStart) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeBotStart",
		ID:   InternalLinkTypeBotStartTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUsername",
			SchemaName: "bot_username",
		},
		{
			Name:       "StartParameter",
			SchemaName: "start_parameter",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeBotStart) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeBotStart#b812d93d as nil")
	}
	b.PutID(InternalLinkTypeBotStartTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeBotStart) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeBotStart#b812d93d as nil")
	}
	b.PutString(i.BotUsername)
	b.PutString(i.StartParameter)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeBotStart) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeBotStart#b812d93d to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeBotStartTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeBotStart#b812d93d: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeBotStart) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeBotStart#b812d93d to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeBotStart#b812d93d: field bot_username: %w", err)
		}
		i.BotUsername = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeBotStart#b812d93d: field start_parameter: %w", err)
		}
		i.StartParameter = value
	}
	return nil
}

// GetBotUsername returns value of BotUsername field.
func (i *InternalLinkTypeBotStart) GetBotUsername() (value string) {
	return i.BotUsername
}

// GetStartParameter returns value of StartParameter field.
func (i *InternalLinkTypeBotStart) GetStartParameter() (value string) {
	return i.StartParameter
}

// InternalLinkTypeBotStartInGroup represents TL type `internalLinkTypeBotStartInGroup#c201649c`.
type InternalLinkTypeBotStartInGroup struct {
	// Username of the bot
	BotUsername string
	// The parameter to be passed to sendBotStartMessage
	StartParameter string
}

// InternalLinkTypeBotStartInGroupTypeID is TL type id of InternalLinkTypeBotStartInGroup.
const InternalLinkTypeBotStartInGroupTypeID = 0xc201649c

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeBotStartInGroup) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeBotStartInGroup.
var (
	_ bin.Encoder     = &InternalLinkTypeBotStartInGroup{}
	_ bin.Decoder     = &InternalLinkTypeBotStartInGroup{}
	_ bin.BareEncoder = &InternalLinkTypeBotStartInGroup{}
	_ bin.BareDecoder = &InternalLinkTypeBotStartInGroup{}

	_ InternalLinkTypeClass = &InternalLinkTypeBotStartInGroup{}
)

func (i *InternalLinkTypeBotStartInGroup) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.BotUsername == "") {
		return false
	}
	if !(i.StartParameter == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeBotStartInGroup) String() string {
	if i == nil {
		return "InternalLinkTypeBotStartInGroup(nil)"
	}
	type Alias InternalLinkTypeBotStartInGroup
	return fmt.Sprintf("InternalLinkTypeBotStartInGroup%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeBotStartInGroup) TypeID() uint32 {
	return InternalLinkTypeBotStartInGroupTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeBotStartInGroup) TypeName() string {
	return "internalLinkTypeBotStartInGroup"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeBotStartInGroup) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeBotStartInGroup",
		ID:   InternalLinkTypeBotStartInGroupTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUsername",
			SchemaName: "bot_username",
		},
		{
			Name:       "StartParameter",
			SchemaName: "start_parameter",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeBotStartInGroup) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeBotStartInGroup#c201649c as nil")
	}
	b.PutID(InternalLinkTypeBotStartInGroupTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeBotStartInGroup) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeBotStartInGroup#c201649c as nil")
	}
	b.PutString(i.BotUsername)
	b.PutString(i.StartParameter)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeBotStartInGroup) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeBotStartInGroup#c201649c to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeBotStartInGroupTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeBotStartInGroup#c201649c: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeBotStartInGroup) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeBotStartInGroup#c201649c to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeBotStartInGroup#c201649c: field bot_username: %w", err)
		}
		i.BotUsername = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeBotStartInGroup#c201649c: field start_parameter: %w", err)
		}
		i.StartParameter = value
	}
	return nil
}

// GetBotUsername returns value of BotUsername field.
func (i *InternalLinkTypeBotStartInGroup) GetBotUsername() (value string) {
	return i.BotUsername
}

// GetStartParameter returns value of StartParameter field.
func (i *InternalLinkTypeBotStartInGroup) GetStartParameter() (value string) {
	return i.StartParameter
}

// InternalLinkTypeChangePhoneNumber represents TL type `internalLinkTypeChangePhoneNumber#f0275b01`.
type InternalLinkTypeChangePhoneNumber struct {
}

// InternalLinkTypeChangePhoneNumberTypeID is TL type id of InternalLinkTypeChangePhoneNumber.
const InternalLinkTypeChangePhoneNumberTypeID = 0xf0275b01

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeChangePhoneNumber) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeChangePhoneNumber.
var (
	_ bin.Encoder     = &InternalLinkTypeChangePhoneNumber{}
	_ bin.Decoder     = &InternalLinkTypeChangePhoneNumber{}
	_ bin.BareEncoder = &InternalLinkTypeChangePhoneNumber{}
	_ bin.BareDecoder = &InternalLinkTypeChangePhoneNumber{}

	_ InternalLinkTypeClass = &InternalLinkTypeChangePhoneNumber{}
)

func (i *InternalLinkTypeChangePhoneNumber) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeChangePhoneNumber) String() string {
	if i == nil {
		return "InternalLinkTypeChangePhoneNumber(nil)"
	}
	type Alias InternalLinkTypeChangePhoneNumber
	return fmt.Sprintf("InternalLinkTypeChangePhoneNumber%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeChangePhoneNumber) TypeID() uint32 {
	return InternalLinkTypeChangePhoneNumberTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeChangePhoneNumber) TypeName() string {
	return "internalLinkTypeChangePhoneNumber"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeChangePhoneNumber) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeChangePhoneNumber",
		ID:   InternalLinkTypeChangePhoneNumberTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeChangePhoneNumber) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeChangePhoneNumber#f0275b01 as nil")
	}
	b.PutID(InternalLinkTypeChangePhoneNumberTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeChangePhoneNumber) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeChangePhoneNumber#f0275b01 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeChangePhoneNumber) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeChangePhoneNumber#f0275b01 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeChangePhoneNumberTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeChangePhoneNumber#f0275b01: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeChangePhoneNumber) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeChangePhoneNumber#f0275b01 to nil")
	}
	return nil
}

// InternalLinkTypeChatInvite represents TL type `internalLinkTypeChatInvite#64ffb7b6`.
type InternalLinkTypeChatInvite struct {
}

// InternalLinkTypeChatInviteTypeID is TL type id of InternalLinkTypeChatInvite.
const InternalLinkTypeChatInviteTypeID = 0x64ffb7b6

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeChatInvite) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeChatInvite.
var (
	_ bin.Encoder     = &InternalLinkTypeChatInvite{}
	_ bin.Decoder     = &InternalLinkTypeChatInvite{}
	_ bin.BareEncoder = &InternalLinkTypeChatInvite{}
	_ bin.BareDecoder = &InternalLinkTypeChatInvite{}

	_ InternalLinkTypeClass = &InternalLinkTypeChatInvite{}
)

func (i *InternalLinkTypeChatInvite) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeChatInvite) String() string {
	if i == nil {
		return "InternalLinkTypeChatInvite(nil)"
	}
	type Alias InternalLinkTypeChatInvite
	return fmt.Sprintf("InternalLinkTypeChatInvite%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeChatInvite) TypeID() uint32 {
	return InternalLinkTypeChatInviteTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeChatInvite) TypeName() string {
	return "internalLinkTypeChatInvite"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeChatInvite) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeChatInvite",
		ID:   InternalLinkTypeChatInviteTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeChatInvite) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeChatInvite#64ffb7b6 as nil")
	}
	b.PutID(InternalLinkTypeChatInviteTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeChatInvite) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeChatInvite#64ffb7b6 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeChatInvite) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeChatInvite#64ffb7b6 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeChatInviteTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeChatInvite#64ffb7b6: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeChatInvite) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeChatInvite#64ffb7b6 to nil")
	}
	return nil
}

// InternalLinkTypeFilterSettings represents TL type `internalLinkTypeFilterSettings#5981179b`.
type InternalLinkTypeFilterSettings struct {
}

// InternalLinkTypeFilterSettingsTypeID is TL type id of InternalLinkTypeFilterSettings.
const InternalLinkTypeFilterSettingsTypeID = 0x5981179b

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeFilterSettings) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeFilterSettings.
var (
	_ bin.Encoder     = &InternalLinkTypeFilterSettings{}
	_ bin.Decoder     = &InternalLinkTypeFilterSettings{}
	_ bin.BareEncoder = &InternalLinkTypeFilterSettings{}
	_ bin.BareDecoder = &InternalLinkTypeFilterSettings{}

	_ InternalLinkTypeClass = &InternalLinkTypeFilterSettings{}
)

func (i *InternalLinkTypeFilterSettings) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeFilterSettings) String() string {
	if i == nil {
		return "InternalLinkTypeFilterSettings(nil)"
	}
	type Alias InternalLinkTypeFilterSettings
	return fmt.Sprintf("InternalLinkTypeFilterSettings%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeFilterSettings) TypeID() uint32 {
	return InternalLinkTypeFilterSettingsTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeFilterSettings) TypeName() string {
	return "internalLinkTypeFilterSettings"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeFilterSettings) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeFilterSettings",
		ID:   InternalLinkTypeFilterSettingsTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeFilterSettings) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeFilterSettings#5981179b as nil")
	}
	b.PutID(InternalLinkTypeFilterSettingsTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeFilterSettings) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeFilterSettings#5981179b as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeFilterSettings) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeFilterSettings#5981179b to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeFilterSettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeFilterSettings#5981179b: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeFilterSettings) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeFilterSettings#5981179b to nil")
	}
	return nil
}

// InternalLinkTypeGame represents TL type `internalLinkTypeGame#f074adcd`.
type InternalLinkTypeGame struct {
	// Username of the bot that owns the game
	BotUsername string
	// Short name of the game
	GameShortName string
}

// InternalLinkTypeGameTypeID is TL type id of InternalLinkTypeGame.
const InternalLinkTypeGameTypeID = 0xf074adcd

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeGame) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeGame.
var (
	_ bin.Encoder     = &InternalLinkTypeGame{}
	_ bin.Decoder     = &InternalLinkTypeGame{}
	_ bin.BareEncoder = &InternalLinkTypeGame{}
	_ bin.BareDecoder = &InternalLinkTypeGame{}

	_ InternalLinkTypeClass = &InternalLinkTypeGame{}
)

func (i *InternalLinkTypeGame) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.BotUsername == "") {
		return false
	}
	if !(i.GameShortName == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeGame) String() string {
	if i == nil {
		return "InternalLinkTypeGame(nil)"
	}
	type Alias InternalLinkTypeGame
	return fmt.Sprintf("InternalLinkTypeGame%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeGame) TypeID() uint32 {
	return InternalLinkTypeGameTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeGame) TypeName() string {
	return "internalLinkTypeGame"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeGame) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeGame",
		ID:   InternalLinkTypeGameTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUsername",
			SchemaName: "bot_username",
		},
		{
			Name:       "GameShortName",
			SchemaName: "game_short_name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeGame) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeGame#f074adcd as nil")
	}
	b.PutID(InternalLinkTypeGameTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeGame) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeGame#f074adcd as nil")
	}
	b.PutString(i.BotUsername)
	b.PutString(i.GameShortName)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeGame) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeGame#f074adcd to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeGameTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeGame#f074adcd: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeGame) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeGame#f074adcd to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeGame#f074adcd: field bot_username: %w", err)
		}
		i.BotUsername = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeGame#f074adcd: field game_short_name: %w", err)
		}
		i.GameShortName = value
	}
	return nil
}

// GetBotUsername returns value of BotUsername field.
func (i *InternalLinkTypeGame) GetBotUsername() (value string) {
	return i.BotUsername
}

// GetGameShortName returns value of GameShortName field.
func (i *InternalLinkTypeGame) GetGameShortName() (value string) {
	return i.GameShortName
}

// InternalLinkTypeLanguagePack represents TL type `internalLinkTypeLanguagePack#a9870d6c`.
type InternalLinkTypeLanguagePack struct {
	// Language pack identifier
	LanguagePackID string
}

// InternalLinkTypeLanguagePackTypeID is TL type id of InternalLinkTypeLanguagePack.
const InternalLinkTypeLanguagePackTypeID = 0xa9870d6c

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeLanguagePack) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeLanguagePack.
var (
	_ bin.Encoder     = &InternalLinkTypeLanguagePack{}
	_ bin.Decoder     = &InternalLinkTypeLanguagePack{}
	_ bin.BareEncoder = &InternalLinkTypeLanguagePack{}
	_ bin.BareDecoder = &InternalLinkTypeLanguagePack{}

	_ InternalLinkTypeClass = &InternalLinkTypeLanguagePack{}
)

func (i *InternalLinkTypeLanguagePack) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.LanguagePackID == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeLanguagePack) String() string {
	if i == nil {
		return "InternalLinkTypeLanguagePack(nil)"
	}
	type Alias InternalLinkTypeLanguagePack
	return fmt.Sprintf("InternalLinkTypeLanguagePack%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeLanguagePack) TypeID() uint32 {
	return InternalLinkTypeLanguagePackTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeLanguagePack) TypeName() string {
	return "internalLinkTypeLanguagePack"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeLanguagePack) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeLanguagePack",
		ID:   InternalLinkTypeLanguagePackTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "LanguagePackID",
			SchemaName: "language_pack_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeLanguagePack) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeLanguagePack#a9870d6c as nil")
	}
	b.PutID(InternalLinkTypeLanguagePackTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeLanguagePack) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeLanguagePack#a9870d6c as nil")
	}
	b.PutString(i.LanguagePackID)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeLanguagePack) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeLanguagePack#a9870d6c to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeLanguagePackTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeLanguagePack#a9870d6c: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeLanguagePack) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeLanguagePack#a9870d6c to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeLanguagePack#a9870d6c: field language_pack_id: %w", err)
		}
		i.LanguagePackID = value
	}
	return nil
}

// GetLanguagePackID returns value of LanguagePackID field.
func (i *InternalLinkTypeLanguagePack) GetLanguagePackID() (value string) {
	return i.LanguagePackID
}

// InternalLinkTypeMessage represents TL type `internalLinkTypeMessage#c5ddcd91`.
type InternalLinkTypeMessage struct {
}

// InternalLinkTypeMessageTypeID is TL type id of InternalLinkTypeMessage.
const InternalLinkTypeMessageTypeID = 0xc5ddcd91

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeMessage) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeMessage.
var (
	_ bin.Encoder     = &InternalLinkTypeMessage{}
	_ bin.Decoder     = &InternalLinkTypeMessage{}
	_ bin.BareEncoder = &InternalLinkTypeMessage{}
	_ bin.BareDecoder = &InternalLinkTypeMessage{}

	_ InternalLinkTypeClass = &InternalLinkTypeMessage{}
)

func (i *InternalLinkTypeMessage) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeMessage) String() string {
	if i == nil {
		return "InternalLinkTypeMessage(nil)"
	}
	type Alias InternalLinkTypeMessage
	return fmt.Sprintf("InternalLinkTypeMessage%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeMessage) TypeID() uint32 {
	return InternalLinkTypeMessageTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeMessage) TypeName() string {
	return "internalLinkTypeMessage"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeMessage) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeMessage",
		ID:   InternalLinkTypeMessageTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeMessage) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeMessage#c5ddcd91 as nil")
	}
	b.PutID(InternalLinkTypeMessageTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeMessage) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeMessage#c5ddcd91 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeMessage) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeMessage#c5ddcd91 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeMessage#c5ddcd91: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeMessage) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeMessage#c5ddcd91 to nil")
	}
	return nil
}

// InternalLinkTypeMessageDraft represents TL type `internalLinkTypeMessageDraft#276fbad5`.
type InternalLinkTypeMessageDraft struct {
	// Message draft text
	Text FormattedText
	// True, if the first line of the text contains a link. If true, the input field needs to
	// be focused and the text after the link should be selected
	ContainsLink bool
}

// InternalLinkTypeMessageDraftTypeID is TL type id of InternalLinkTypeMessageDraft.
const InternalLinkTypeMessageDraftTypeID = 0x276fbad5

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeMessageDraft) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeMessageDraft.
var (
	_ bin.Encoder     = &InternalLinkTypeMessageDraft{}
	_ bin.Decoder     = &InternalLinkTypeMessageDraft{}
	_ bin.BareEncoder = &InternalLinkTypeMessageDraft{}
	_ bin.BareDecoder = &InternalLinkTypeMessageDraft{}

	_ InternalLinkTypeClass = &InternalLinkTypeMessageDraft{}
)

func (i *InternalLinkTypeMessageDraft) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Text.Zero()) {
		return false
	}
	if !(i.ContainsLink == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeMessageDraft) String() string {
	if i == nil {
		return "InternalLinkTypeMessageDraft(nil)"
	}
	type Alias InternalLinkTypeMessageDraft
	return fmt.Sprintf("InternalLinkTypeMessageDraft%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeMessageDraft) TypeID() uint32 {
	return InternalLinkTypeMessageDraftTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeMessageDraft) TypeName() string {
	return "internalLinkTypeMessageDraft"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeMessageDraft) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeMessageDraft",
		ID:   InternalLinkTypeMessageDraftTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Text",
			SchemaName: "text",
		},
		{
			Name:       "ContainsLink",
			SchemaName: "contains_link",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeMessageDraft) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeMessageDraft#276fbad5 as nil")
	}
	b.PutID(InternalLinkTypeMessageDraftTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeMessageDraft) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeMessageDraft#276fbad5 as nil")
	}
	if err := i.Text.Encode(b); err != nil {
		return fmt.Errorf("unable to encode internalLinkTypeMessageDraft#276fbad5: field text: %w", err)
	}
	b.PutBool(i.ContainsLink)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeMessageDraft) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeMessageDraft#276fbad5 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeMessageDraftTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeMessageDraft#276fbad5: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeMessageDraft) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeMessageDraft#276fbad5 to nil")
	}
	{
		if err := i.Text.Decode(b); err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeMessageDraft#276fbad5: field text: %w", err)
		}
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeMessageDraft#276fbad5: field contains_link: %w", err)
		}
		i.ContainsLink = value
	}
	return nil
}

// GetText returns value of Text field.
func (i *InternalLinkTypeMessageDraft) GetText() (value FormattedText) {
	return i.Text
}

// GetContainsLink returns value of ContainsLink field.
func (i *InternalLinkTypeMessageDraft) GetContainsLink() (value bool) {
	return i.ContainsLink
}

// InternalLinkTypePassportDataRequest represents TL type `internalLinkTypePassportDataRequest#a608a548`.
type InternalLinkTypePassportDataRequest struct {
	// User identifier of the service's bot
	BotUserID int32
	// Telegram Passport element types requested by the service
	Scope string
	// Service's public key
	PublicKey string
	// Unique request identifier provided by the service
	Nonce string
	// An HTTP URL to open once the request is finished or canceled with the parameter
	// tg_passport=success or tg_passport=cancel respectively. If empty, then the link
	// tgbot{bot_user_id}://passport/success or tgbot{bot_user_id}://passport/cancel needs to
	// be opened instead
	CallbackURL string
}

// InternalLinkTypePassportDataRequestTypeID is TL type id of InternalLinkTypePassportDataRequest.
const InternalLinkTypePassportDataRequestTypeID = 0xa608a548

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypePassportDataRequest) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypePassportDataRequest.
var (
	_ bin.Encoder     = &InternalLinkTypePassportDataRequest{}
	_ bin.Decoder     = &InternalLinkTypePassportDataRequest{}
	_ bin.BareEncoder = &InternalLinkTypePassportDataRequest{}
	_ bin.BareDecoder = &InternalLinkTypePassportDataRequest{}

	_ InternalLinkTypeClass = &InternalLinkTypePassportDataRequest{}
)

func (i *InternalLinkTypePassportDataRequest) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.BotUserID == 0) {
		return false
	}
	if !(i.Scope == "") {
		return false
	}
	if !(i.PublicKey == "") {
		return false
	}
	if !(i.Nonce == "") {
		return false
	}
	if !(i.CallbackURL == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypePassportDataRequest) String() string {
	if i == nil {
		return "InternalLinkTypePassportDataRequest(nil)"
	}
	type Alias InternalLinkTypePassportDataRequest
	return fmt.Sprintf("InternalLinkTypePassportDataRequest%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypePassportDataRequest) TypeID() uint32 {
	return InternalLinkTypePassportDataRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypePassportDataRequest) TypeName() string {
	return "internalLinkTypePassportDataRequest"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypePassportDataRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypePassportDataRequest",
		ID:   InternalLinkTypePassportDataRequestTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "Scope",
			SchemaName: "scope",
		},
		{
			Name:       "PublicKey",
			SchemaName: "public_key",
		},
		{
			Name:       "Nonce",
			SchemaName: "nonce",
		},
		{
			Name:       "CallbackURL",
			SchemaName: "callback_url",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypePassportDataRequest) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypePassportDataRequest#a608a548 as nil")
	}
	b.PutID(InternalLinkTypePassportDataRequestTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypePassportDataRequest) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypePassportDataRequest#a608a548 as nil")
	}
	b.PutInt32(i.BotUserID)
	b.PutString(i.Scope)
	b.PutString(i.PublicKey)
	b.PutString(i.Nonce)
	b.PutString(i.CallbackURL)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypePassportDataRequest) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypePassportDataRequest#a608a548 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypePassportDataRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypePassportDataRequest#a608a548: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypePassportDataRequest) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypePassportDataRequest#a608a548 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePassportDataRequest#a608a548: field bot_user_id: %w", err)
		}
		i.BotUserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePassportDataRequest#a608a548: field scope: %w", err)
		}
		i.Scope = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePassportDataRequest#a608a548: field public_key: %w", err)
		}
		i.PublicKey = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePassportDataRequest#a608a548: field nonce: %w", err)
		}
		i.Nonce = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePassportDataRequest#a608a548: field callback_url: %w", err)
		}
		i.CallbackURL = value
	}
	return nil
}

// GetBotUserID returns value of BotUserID field.
func (i *InternalLinkTypePassportDataRequest) GetBotUserID() (value int32) {
	return i.BotUserID
}

// GetScope returns value of Scope field.
func (i *InternalLinkTypePassportDataRequest) GetScope() (value string) {
	return i.Scope
}

// GetPublicKey returns value of PublicKey field.
func (i *InternalLinkTypePassportDataRequest) GetPublicKey() (value string) {
	return i.PublicKey
}

// GetNonce returns value of Nonce field.
func (i *InternalLinkTypePassportDataRequest) GetNonce() (value string) {
	return i.Nonce
}

// GetCallbackURL returns value of CallbackURL field.
func (i *InternalLinkTypePassportDataRequest) GetCallbackURL() (value string) {
	return i.CallbackURL
}

// InternalLinkTypePhoneNumberConfirmation represents TL type `internalLinkTypePhoneNumberConfirmation#68bf6b16`.
type InternalLinkTypePhoneNumberConfirmation struct {
	// Hash value from the link
	Hash string
	// Phone number value from the link
	PhoneNumber string
}

// InternalLinkTypePhoneNumberConfirmationTypeID is TL type id of InternalLinkTypePhoneNumberConfirmation.
const InternalLinkTypePhoneNumberConfirmationTypeID = 0x68bf6b16

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypePhoneNumberConfirmation) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypePhoneNumberConfirmation.
var (
	_ bin.Encoder     = &InternalLinkTypePhoneNumberConfirmation{}
	_ bin.Decoder     = &InternalLinkTypePhoneNumberConfirmation{}
	_ bin.BareEncoder = &InternalLinkTypePhoneNumberConfirmation{}
	_ bin.BareDecoder = &InternalLinkTypePhoneNumberConfirmation{}

	_ InternalLinkTypeClass = &InternalLinkTypePhoneNumberConfirmation{}
)

func (i *InternalLinkTypePhoneNumberConfirmation) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Hash == "") {
		return false
	}
	if !(i.PhoneNumber == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypePhoneNumberConfirmation) String() string {
	if i == nil {
		return "InternalLinkTypePhoneNumberConfirmation(nil)"
	}
	type Alias InternalLinkTypePhoneNumberConfirmation
	return fmt.Sprintf("InternalLinkTypePhoneNumberConfirmation%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypePhoneNumberConfirmation) TypeID() uint32 {
	return InternalLinkTypePhoneNumberConfirmationTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypePhoneNumberConfirmation) TypeName() string {
	return "internalLinkTypePhoneNumberConfirmation"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypePhoneNumberConfirmation) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypePhoneNumberConfirmation",
		ID:   InternalLinkTypePhoneNumberConfirmationTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Hash",
			SchemaName: "hash",
		},
		{
			Name:       "PhoneNumber",
			SchemaName: "phone_number",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypePhoneNumberConfirmation) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypePhoneNumberConfirmation#68bf6b16 as nil")
	}
	b.PutID(InternalLinkTypePhoneNumberConfirmationTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypePhoneNumberConfirmation) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypePhoneNumberConfirmation#68bf6b16 as nil")
	}
	b.PutString(i.Hash)
	b.PutString(i.PhoneNumber)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypePhoneNumberConfirmation) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypePhoneNumberConfirmation#68bf6b16 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypePhoneNumberConfirmationTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypePhoneNumberConfirmation#68bf6b16: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypePhoneNumberConfirmation) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypePhoneNumberConfirmation#68bf6b16 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePhoneNumberConfirmation#68bf6b16: field hash: %w", err)
		}
		i.Hash = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePhoneNumberConfirmation#68bf6b16: field phone_number: %w", err)
		}
		i.PhoneNumber = value
	}
	return nil
}

// GetHash returns value of Hash field.
func (i *InternalLinkTypePhoneNumberConfirmation) GetHash() (value string) {
	return i.Hash
}

// GetPhoneNumber returns value of PhoneNumber field.
func (i *InternalLinkTypePhoneNumberConfirmation) GetPhoneNumber() (value string) {
	return i.PhoneNumber
}

// InternalLinkTypeProxy represents TL type `internalLinkTypeProxy#b1b12cea`.
type InternalLinkTypeProxy struct {
	// Proxy server IP address
	Server string
	// Proxy server port
	Port int32
	// Type of the proxy
	Type ProxyTypeClass
}

// InternalLinkTypeProxyTypeID is TL type id of InternalLinkTypeProxy.
const InternalLinkTypeProxyTypeID = 0xb1b12cea

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeProxy) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeProxy.
var (
	_ bin.Encoder     = &InternalLinkTypeProxy{}
	_ bin.Decoder     = &InternalLinkTypeProxy{}
	_ bin.BareEncoder = &InternalLinkTypeProxy{}
	_ bin.BareDecoder = &InternalLinkTypeProxy{}

	_ InternalLinkTypeClass = &InternalLinkTypeProxy{}
)

func (i *InternalLinkTypeProxy) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Server == "") {
		return false
	}
	if !(i.Port == 0) {
		return false
	}
	if !(i.Type == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeProxy) String() string {
	if i == nil {
		return "InternalLinkTypeProxy(nil)"
	}
	type Alias InternalLinkTypeProxy
	return fmt.Sprintf("InternalLinkTypeProxy%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeProxy) TypeID() uint32 {
	return InternalLinkTypeProxyTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeProxy) TypeName() string {
	return "internalLinkTypeProxy"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeProxy) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeProxy",
		ID:   InternalLinkTypeProxyTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Server",
			SchemaName: "server",
		},
		{
			Name:       "Port",
			SchemaName: "port",
		},
		{
			Name:       "Type",
			SchemaName: "type",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeProxy) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeProxy#b1b12cea as nil")
	}
	b.PutID(InternalLinkTypeProxyTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeProxy) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeProxy#b1b12cea as nil")
	}
	b.PutString(i.Server)
	b.PutInt32(i.Port)
	if i.Type == nil {
		return fmt.Errorf("unable to encode internalLinkTypeProxy#b1b12cea: field type is nil")
	}
	if err := i.Type.Encode(b); err != nil {
		return fmt.Errorf("unable to encode internalLinkTypeProxy#b1b12cea: field type: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeProxy) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeProxy#b1b12cea to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeProxyTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeProxy#b1b12cea: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeProxy) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeProxy#b1b12cea to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeProxy#b1b12cea: field server: %w", err)
		}
		i.Server = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeProxy#b1b12cea: field port: %w", err)
		}
		i.Port = value
	}
	{
		value, err := DecodeProxyType(b)
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeProxy#b1b12cea: field type: %w", err)
		}
		i.Type = value
	}
	return nil
}

// GetServer returns value of Server field.
func (i *InternalLinkTypeProxy) GetServer() (value string) {
	return i.Server
}

// GetPort returns value of Port field.
func (i *InternalLinkTypeProxy) GetPort() (value int32) {
	return i.Port
}

// GetType returns value of Type field.
func (i *InternalLinkTypeProxy) GetType() (value ProxyTypeClass) {
	return i.Type
}

// InternalLinkTypePublicChat represents TL type `internalLinkTypePublicChat#a774573b`.
type InternalLinkTypePublicChat struct {
	// Username of the chat
	ChatUsername string
}

// InternalLinkTypePublicChatTypeID is TL type id of InternalLinkTypePublicChat.
const InternalLinkTypePublicChatTypeID = 0xa774573b

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypePublicChat) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypePublicChat.
var (
	_ bin.Encoder     = &InternalLinkTypePublicChat{}
	_ bin.Decoder     = &InternalLinkTypePublicChat{}
	_ bin.BareEncoder = &InternalLinkTypePublicChat{}
	_ bin.BareDecoder = &InternalLinkTypePublicChat{}

	_ InternalLinkTypeClass = &InternalLinkTypePublicChat{}
)

func (i *InternalLinkTypePublicChat) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.ChatUsername == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypePublicChat) String() string {
	if i == nil {
		return "InternalLinkTypePublicChat(nil)"
	}
	type Alias InternalLinkTypePublicChat
	return fmt.Sprintf("InternalLinkTypePublicChat%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypePublicChat) TypeID() uint32 {
	return InternalLinkTypePublicChatTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypePublicChat) TypeName() string {
	return "internalLinkTypePublicChat"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypePublicChat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypePublicChat",
		ID:   InternalLinkTypePublicChatTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatUsername",
			SchemaName: "chat_username",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypePublicChat) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypePublicChat#a774573b as nil")
	}
	b.PutID(InternalLinkTypePublicChatTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypePublicChat) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypePublicChat#a774573b as nil")
	}
	b.PutString(i.ChatUsername)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypePublicChat) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypePublicChat#a774573b to nil")
	}
	if err := b.ConsumeID(InternalLinkTypePublicChatTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypePublicChat#a774573b: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypePublicChat) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypePublicChat#a774573b to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypePublicChat#a774573b: field chat_username: %w", err)
		}
		i.ChatUsername = value
	}
	return nil
}

// GetChatUsername returns value of ChatUsername field.
func (i *InternalLinkTypePublicChat) GetChatUsername() (value string) {
	return i.ChatUsername
}

// InternalLinkTypeQrCodeAuthentication represents TL type `internalLinkTypeQrCodeAuthentication#bf121924`.
type InternalLinkTypeQrCodeAuthentication struct {
}

// InternalLinkTypeQrCodeAuthenticationTypeID is TL type id of InternalLinkTypeQrCodeAuthentication.
const InternalLinkTypeQrCodeAuthenticationTypeID = 0xbf121924

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeQrCodeAuthentication) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeQrCodeAuthentication.
var (
	_ bin.Encoder     = &InternalLinkTypeQrCodeAuthentication{}
	_ bin.Decoder     = &InternalLinkTypeQrCodeAuthentication{}
	_ bin.BareEncoder = &InternalLinkTypeQrCodeAuthentication{}
	_ bin.BareDecoder = &InternalLinkTypeQrCodeAuthentication{}

	_ InternalLinkTypeClass = &InternalLinkTypeQrCodeAuthentication{}
)

func (i *InternalLinkTypeQrCodeAuthentication) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeQrCodeAuthentication) String() string {
	if i == nil {
		return "InternalLinkTypeQrCodeAuthentication(nil)"
	}
	type Alias InternalLinkTypeQrCodeAuthentication
	return fmt.Sprintf("InternalLinkTypeQrCodeAuthentication%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeQrCodeAuthentication) TypeID() uint32 {
	return InternalLinkTypeQrCodeAuthenticationTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeQrCodeAuthentication) TypeName() string {
	return "internalLinkTypeQrCodeAuthentication"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeQrCodeAuthentication) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeQrCodeAuthentication",
		ID:   InternalLinkTypeQrCodeAuthenticationTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeQrCodeAuthentication) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeQrCodeAuthentication#bf121924 as nil")
	}
	b.PutID(InternalLinkTypeQrCodeAuthenticationTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeQrCodeAuthentication) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeQrCodeAuthentication#bf121924 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeQrCodeAuthentication) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeQrCodeAuthentication#bf121924 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeQrCodeAuthenticationTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeQrCodeAuthentication#bf121924: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeQrCodeAuthentication) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeQrCodeAuthentication#bf121924 to nil")
	}
	return nil
}

// InternalLinkTypeSettings represents TL type `internalLinkTypeSettings#177545b4`.
type InternalLinkTypeSettings struct {
}

// InternalLinkTypeSettingsTypeID is TL type id of InternalLinkTypeSettings.
const InternalLinkTypeSettingsTypeID = 0x177545b4

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeSettings) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeSettings.
var (
	_ bin.Encoder     = &InternalLinkTypeSettings{}
	_ bin.Decoder     = &InternalLinkTypeSettings{}
	_ bin.BareEncoder = &InternalLinkTypeSettings{}
	_ bin.BareDecoder = &InternalLinkTypeSettings{}

	_ InternalLinkTypeClass = &InternalLinkTypeSettings{}
)

func (i *InternalLinkTypeSettings) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeSettings) String() string {
	if i == nil {
		return "InternalLinkTypeSettings(nil)"
	}
	type Alias InternalLinkTypeSettings
	return fmt.Sprintf("InternalLinkTypeSettings%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeSettings) TypeID() uint32 {
	return InternalLinkTypeSettingsTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeSettings) TypeName() string {
	return "internalLinkTypeSettings"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeSettings) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeSettings",
		ID:   InternalLinkTypeSettingsTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeSettings) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeSettings#177545b4 as nil")
	}
	b.PutID(InternalLinkTypeSettingsTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeSettings) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeSettings#177545b4 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeSettings) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeSettings#177545b4 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeSettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeSettings#177545b4: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeSettings) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeSettings#177545b4 to nil")
	}
	return nil
}

// InternalLinkTypeStickerSet represents TL type `internalLinkTypeStickerSet#e06e56b9`.
type InternalLinkTypeStickerSet struct {
	// Name of the sticker set
	StickerSetName string
}

// InternalLinkTypeStickerSetTypeID is TL type id of InternalLinkTypeStickerSet.
const InternalLinkTypeStickerSetTypeID = 0xe06e56b9

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeStickerSet) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeStickerSet.
var (
	_ bin.Encoder     = &InternalLinkTypeStickerSet{}
	_ bin.Decoder     = &InternalLinkTypeStickerSet{}
	_ bin.BareEncoder = &InternalLinkTypeStickerSet{}
	_ bin.BareDecoder = &InternalLinkTypeStickerSet{}

	_ InternalLinkTypeClass = &InternalLinkTypeStickerSet{}
)

func (i *InternalLinkTypeStickerSet) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.StickerSetName == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeStickerSet) String() string {
	if i == nil {
		return "InternalLinkTypeStickerSet(nil)"
	}
	type Alias InternalLinkTypeStickerSet
	return fmt.Sprintf("InternalLinkTypeStickerSet%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeStickerSet) TypeID() uint32 {
	return InternalLinkTypeStickerSetTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeStickerSet) TypeName() string {
	return "internalLinkTypeStickerSet"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeStickerSet) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeStickerSet",
		ID:   InternalLinkTypeStickerSetTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "StickerSetName",
			SchemaName: "sticker_set_name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeStickerSet) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeStickerSet#e06e56b9 as nil")
	}
	b.PutID(InternalLinkTypeStickerSetTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeStickerSet) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeStickerSet#e06e56b9 as nil")
	}
	b.PutString(i.StickerSetName)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeStickerSet) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeStickerSet#e06e56b9 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeStickerSetTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeStickerSet#e06e56b9: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeStickerSet) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeStickerSet#e06e56b9 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeStickerSet#e06e56b9: field sticker_set_name: %w", err)
		}
		i.StickerSetName = value
	}
	return nil
}

// GetStickerSetName returns value of StickerSetName field.
func (i *InternalLinkTypeStickerSet) GetStickerSetName() (value string) {
	return i.StickerSetName
}

// InternalLinkTypeTheme represents TL type `internalLinkTypeTheme#f405f807`.
type InternalLinkTypeTheme struct {
	// Name of the theme
	ThemeName string
}

// InternalLinkTypeThemeTypeID is TL type id of InternalLinkTypeTheme.
const InternalLinkTypeThemeTypeID = 0xf405f807

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeTheme) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeTheme.
var (
	_ bin.Encoder     = &InternalLinkTypeTheme{}
	_ bin.Decoder     = &InternalLinkTypeTheme{}
	_ bin.BareEncoder = &InternalLinkTypeTheme{}
	_ bin.BareDecoder = &InternalLinkTypeTheme{}

	_ InternalLinkTypeClass = &InternalLinkTypeTheme{}
)

func (i *InternalLinkTypeTheme) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.ThemeName == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeTheme) String() string {
	if i == nil {
		return "InternalLinkTypeTheme(nil)"
	}
	type Alias InternalLinkTypeTheme
	return fmt.Sprintf("InternalLinkTypeTheme%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeTheme) TypeID() uint32 {
	return InternalLinkTypeThemeTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeTheme) TypeName() string {
	return "internalLinkTypeTheme"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeTheme) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeTheme",
		ID:   InternalLinkTypeThemeTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ThemeName",
			SchemaName: "theme_name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeTheme) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeTheme#f405f807 as nil")
	}
	b.PutID(InternalLinkTypeThemeTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeTheme) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeTheme#f405f807 as nil")
	}
	b.PutString(i.ThemeName)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeTheme) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeTheme#f405f807 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeThemeTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeTheme#f405f807: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeTheme) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeTheme#f405f807 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeTheme#f405f807: field theme_name: %w", err)
		}
		i.ThemeName = value
	}
	return nil
}

// GetThemeName returns value of ThemeName field.
func (i *InternalLinkTypeTheme) GetThemeName() (value string) {
	return i.ThemeName
}

// InternalLinkTypeThemeSettings represents TL type `internalLinkTypeThemeSettings#c14d3916`.
type InternalLinkTypeThemeSettings struct {
}

// InternalLinkTypeThemeSettingsTypeID is TL type id of InternalLinkTypeThemeSettings.
const InternalLinkTypeThemeSettingsTypeID = 0xc14d3916

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeThemeSettings) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeThemeSettings.
var (
	_ bin.Encoder     = &InternalLinkTypeThemeSettings{}
	_ bin.Decoder     = &InternalLinkTypeThemeSettings{}
	_ bin.BareEncoder = &InternalLinkTypeThemeSettings{}
	_ bin.BareDecoder = &InternalLinkTypeThemeSettings{}

	_ InternalLinkTypeClass = &InternalLinkTypeThemeSettings{}
)

func (i *InternalLinkTypeThemeSettings) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeThemeSettings) String() string {
	if i == nil {
		return "InternalLinkTypeThemeSettings(nil)"
	}
	type Alias InternalLinkTypeThemeSettings
	return fmt.Sprintf("InternalLinkTypeThemeSettings%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeThemeSettings) TypeID() uint32 {
	return InternalLinkTypeThemeSettingsTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeThemeSettings) TypeName() string {
	return "internalLinkTypeThemeSettings"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeThemeSettings) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeThemeSettings",
		ID:   InternalLinkTypeThemeSettingsTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeThemeSettings) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeThemeSettings#c14d3916 as nil")
	}
	b.PutID(InternalLinkTypeThemeSettingsTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeThemeSettings) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeThemeSettings#c14d3916 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeThemeSettings) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeThemeSettings#c14d3916 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeThemeSettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeThemeSettings#c14d3916: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeThemeSettings) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeThemeSettings#c14d3916 to nil")
	}
	return nil
}

// InternalLinkTypeUnknownDeepLink represents TL type `internalLinkTypeUnknownDeepLink#31d498af`.
type InternalLinkTypeUnknownDeepLink struct {
}

// InternalLinkTypeUnknownDeepLinkTypeID is TL type id of InternalLinkTypeUnknownDeepLink.
const InternalLinkTypeUnknownDeepLinkTypeID = 0x31d498af

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeUnknownDeepLink) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeUnknownDeepLink.
var (
	_ bin.Encoder     = &InternalLinkTypeUnknownDeepLink{}
	_ bin.Decoder     = &InternalLinkTypeUnknownDeepLink{}
	_ bin.BareEncoder = &InternalLinkTypeUnknownDeepLink{}
	_ bin.BareDecoder = &InternalLinkTypeUnknownDeepLink{}

	_ InternalLinkTypeClass = &InternalLinkTypeUnknownDeepLink{}
)

func (i *InternalLinkTypeUnknownDeepLink) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeUnknownDeepLink) String() string {
	if i == nil {
		return "InternalLinkTypeUnknownDeepLink(nil)"
	}
	type Alias InternalLinkTypeUnknownDeepLink
	return fmt.Sprintf("InternalLinkTypeUnknownDeepLink%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeUnknownDeepLink) TypeID() uint32 {
	return InternalLinkTypeUnknownDeepLinkTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeUnknownDeepLink) TypeName() string {
	return "internalLinkTypeUnknownDeepLink"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeUnknownDeepLink) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeUnknownDeepLink",
		ID:   InternalLinkTypeUnknownDeepLinkTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeUnknownDeepLink) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeUnknownDeepLink#31d498af as nil")
	}
	b.PutID(InternalLinkTypeUnknownDeepLinkTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeUnknownDeepLink) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeUnknownDeepLink#31d498af as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeUnknownDeepLink) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeUnknownDeepLink#31d498af to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeUnknownDeepLinkTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeUnknownDeepLink#31d498af: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeUnknownDeepLink) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeUnknownDeepLink#31d498af to nil")
	}
	return nil
}

// InternalLinkTypeVoiceChat represents TL type `internalLinkTypeVoiceChat#a848deb8`.
type InternalLinkTypeVoiceChat struct {
	// Username of the chat with the voice chat
	ChatUsername string
	// If non-empty, invite hash to be used to join the voice chat without being muted by
	// administrators
	InviteHash string
}

// InternalLinkTypeVoiceChatTypeID is TL type id of InternalLinkTypeVoiceChat.
const InternalLinkTypeVoiceChatTypeID = 0xa848deb8

// construct implements constructor of InternalLinkTypeClass.
func (i InternalLinkTypeVoiceChat) construct() InternalLinkTypeClass { return &i }

// Ensuring interfaces in compile-time for InternalLinkTypeVoiceChat.
var (
	_ bin.Encoder     = &InternalLinkTypeVoiceChat{}
	_ bin.Decoder     = &InternalLinkTypeVoiceChat{}
	_ bin.BareEncoder = &InternalLinkTypeVoiceChat{}
	_ bin.BareDecoder = &InternalLinkTypeVoiceChat{}

	_ InternalLinkTypeClass = &InternalLinkTypeVoiceChat{}
)

func (i *InternalLinkTypeVoiceChat) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.ChatUsername == "") {
		return false
	}
	if !(i.InviteHash == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InternalLinkTypeVoiceChat) String() string {
	if i == nil {
		return "InternalLinkTypeVoiceChat(nil)"
	}
	type Alias InternalLinkTypeVoiceChat
	return fmt.Sprintf("InternalLinkTypeVoiceChat%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InternalLinkTypeVoiceChat) TypeID() uint32 {
	return InternalLinkTypeVoiceChatTypeID
}

// TypeName returns name of type in TL schema.
func (*InternalLinkTypeVoiceChat) TypeName() string {
	return "internalLinkTypeVoiceChat"
}

// TypeInfo returns info about TL type.
func (i *InternalLinkTypeVoiceChat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "internalLinkTypeVoiceChat",
		ID:   InternalLinkTypeVoiceChatTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatUsername",
			SchemaName: "chat_username",
		},
		{
			Name:       "InviteHash",
			SchemaName: "invite_hash",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InternalLinkTypeVoiceChat) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeVoiceChat#a848deb8 as nil")
	}
	b.PutID(InternalLinkTypeVoiceChatTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InternalLinkTypeVoiceChat) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode internalLinkTypeVoiceChat#a848deb8 as nil")
	}
	b.PutString(i.ChatUsername)
	b.PutString(i.InviteHash)
	return nil
}

// Decode implements bin.Decoder.
func (i *InternalLinkTypeVoiceChat) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeVoiceChat#a848deb8 to nil")
	}
	if err := b.ConsumeID(InternalLinkTypeVoiceChatTypeID); err != nil {
		return fmt.Errorf("unable to decode internalLinkTypeVoiceChat#a848deb8: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InternalLinkTypeVoiceChat) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode internalLinkTypeVoiceChat#a848deb8 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeVoiceChat#a848deb8: field chat_username: %w", err)
		}
		i.ChatUsername = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode internalLinkTypeVoiceChat#a848deb8: field invite_hash: %w", err)
		}
		i.InviteHash = value
	}
	return nil
}

// GetChatUsername returns value of ChatUsername field.
func (i *InternalLinkTypeVoiceChat) GetChatUsername() (value string) {
	return i.ChatUsername
}

// GetInviteHash returns value of InviteHash field.
func (i *InternalLinkTypeVoiceChat) GetInviteHash() (value string) {
	return i.InviteHash
}

// InternalLinkTypeClass represents InternalLinkType generic type.
//
// Example:
//  g, err := tdapi.DecodeInternalLinkType(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tdapi.InternalLinkTypeActiveSessions: // internalLinkTypeActiveSessions#706bbbad
//  case *tdapi.InternalLinkTypeAuthenticationCode: // internalLinkTypeAuthenticationCode#f3874ff2
//  case *tdapi.InternalLinkTypeBackground: // internalLinkTypeBackground#b0d2908
//  case *tdapi.InternalLinkTypeBotStart: // internalLinkTypeBotStart#b812d93d
//  case *tdapi.InternalLinkTypeBotStartInGroup: // internalLinkTypeBotStartInGroup#c201649c
//  case *tdapi.InternalLinkTypeChangePhoneNumber: // internalLinkTypeChangePhoneNumber#f0275b01
//  case *tdapi.InternalLinkTypeChatInvite: // internalLinkTypeChatInvite#64ffb7b6
//  case *tdapi.InternalLinkTypeFilterSettings: // internalLinkTypeFilterSettings#5981179b
//  case *tdapi.InternalLinkTypeGame: // internalLinkTypeGame#f074adcd
//  case *tdapi.InternalLinkTypeLanguagePack: // internalLinkTypeLanguagePack#a9870d6c
//  case *tdapi.InternalLinkTypeMessage: // internalLinkTypeMessage#c5ddcd91
//  case *tdapi.InternalLinkTypeMessageDraft: // internalLinkTypeMessageDraft#276fbad5
//  case *tdapi.InternalLinkTypePassportDataRequest: // internalLinkTypePassportDataRequest#a608a548
//  case *tdapi.InternalLinkTypePhoneNumberConfirmation: // internalLinkTypePhoneNumberConfirmation#68bf6b16
//  case *tdapi.InternalLinkTypeProxy: // internalLinkTypeProxy#b1b12cea
//  case *tdapi.InternalLinkTypePublicChat: // internalLinkTypePublicChat#a774573b
//  case *tdapi.InternalLinkTypeQrCodeAuthentication: // internalLinkTypeQrCodeAuthentication#bf121924
//  case *tdapi.InternalLinkTypeSettings: // internalLinkTypeSettings#177545b4
//  case *tdapi.InternalLinkTypeStickerSet: // internalLinkTypeStickerSet#e06e56b9
//  case *tdapi.InternalLinkTypeTheme: // internalLinkTypeTheme#f405f807
//  case *tdapi.InternalLinkTypeThemeSettings: // internalLinkTypeThemeSettings#c14d3916
//  case *tdapi.InternalLinkTypeUnknownDeepLink: // internalLinkTypeUnknownDeepLink#31d498af
//  case *tdapi.InternalLinkTypeVoiceChat: // internalLinkTypeVoiceChat#a848deb8
//  default: panic(v)
//  }
type InternalLinkTypeClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() InternalLinkTypeClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeInternalLinkType implements binary de-serialization for InternalLinkTypeClass.
func DecodeInternalLinkType(buf *bin.Buffer) (InternalLinkTypeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case InternalLinkTypeActiveSessionsTypeID:
		// Decoding internalLinkTypeActiveSessions#706bbbad.
		v := InternalLinkTypeActiveSessions{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeAuthenticationCodeTypeID:
		// Decoding internalLinkTypeAuthenticationCode#f3874ff2.
		v := InternalLinkTypeAuthenticationCode{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeBackgroundTypeID:
		// Decoding internalLinkTypeBackground#b0d2908.
		v := InternalLinkTypeBackground{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeBotStartTypeID:
		// Decoding internalLinkTypeBotStart#b812d93d.
		v := InternalLinkTypeBotStart{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeBotStartInGroupTypeID:
		// Decoding internalLinkTypeBotStartInGroup#c201649c.
		v := InternalLinkTypeBotStartInGroup{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeChangePhoneNumberTypeID:
		// Decoding internalLinkTypeChangePhoneNumber#f0275b01.
		v := InternalLinkTypeChangePhoneNumber{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeChatInviteTypeID:
		// Decoding internalLinkTypeChatInvite#64ffb7b6.
		v := InternalLinkTypeChatInvite{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeFilterSettingsTypeID:
		// Decoding internalLinkTypeFilterSettings#5981179b.
		v := InternalLinkTypeFilterSettings{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeGameTypeID:
		// Decoding internalLinkTypeGame#f074adcd.
		v := InternalLinkTypeGame{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeLanguagePackTypeID:
		// Decoding internalLinkTypeLanguagePack#a9870d6c.
		v := InternalLinkTypeLanguagePack{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeMessageTypeID:
		// Decoding internalLinkTypeMessage#c5ddcd91.
		v := InternalLinkTypeMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeMessageDraftTypeID:
		// Decoding internalLinkTypeMessageDraft#276fbad5.
		v := InternalLinkTypeMessageDraft{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypePassportDataRequestTypeID:
		// Decoding internalLinkTypePassportDataRequest#a608a548.
		v := InternalLinkTypePassportDataRequest{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypePhoneNumberConfirmationTypeID:
		// Decoding internalLinkTypePhoneNumberConfirmation#68bf6b16.
		v := InternalLinkTypePhoneNumberConfirmation{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeProxyTypeID:
		// Decoding internalLinkTypeProxy#b1b12cea.
		v := InternalLinkTypeProxy{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypePublicChatTypeID:
		// Decoding internalLinkTypePublicChat#a774573b.
		v := InternalLinkTypePublicChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeQrCodeAuthenticationTypeID:
		// Decoding internalLinkTypeQrCodeAuthentication#bf121924.
		v := InternalLinkTypeQrCodeAuthentication{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeSettingsTypeID:
		// Decoding internalLinkTypeSettings#177545b4.
		v := InternalLinkTypeSettings{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeStickerSetTypeID:
		// Decoding internalLinkTypeStickerSet#e06e56b9.
		v := InternalLinkTypeStickerSet{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeThemeTypeID:
		// Decoding internalLinkTypeTheme#f405f807.
		v := InternalLinkTypeTheme{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeThemeSettingsTypeID:
		// Decoding internalLinkTypeThemeSettings#c14d3916.
		v := InternalLinkTypeThemeSettings{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeUnknownDeepLinkTypeID:
		// Decoding internalLinkTypeUnknownDeepLink#31d498af.
		v := InternalLinkTypeUnknownDeepLink{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	case InternalLinkTypeVoiceChatTypeID:
		// Decoding internalLinkTypeVoiceChat#a848deb8.
		v := InternalLinkTypeVoiceChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode InternalLinkTypeClass: %w", bin.NewUnexpectedID(id))
	}
}

// InternalLinkType boxes the InternalLinkTypeClass providing a helper.
type InternalLinkTypeBox struct {
	InternalLinkType InternalLinkTypeClass
}

// Decode implements bin.Decoder for InternalLinkTypeBox.
func (b *InternalLinkTypeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode InternalLinkTypeBox to nil")
	}
	v, err := DecodeInternalLinkType(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.InternalLinkType = v
	return nil
}

// Encode implements bin.Encode for InternalLinkTypeBox.
func (b *InternalLinkTypeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.InternalLinkType == nil {
		return fmt.Errorf("unable to encode InternalLinkTypeClass as nil")
	}
	return b.InternalLinkType.Encode(buf)
}
