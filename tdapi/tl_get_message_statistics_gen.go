// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/jsontd"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = jsontd.Encoder{}
)

// GetMessageStatisticsRequest represents TL type `getMessageStatistics#4bb5a1d8`.
type GetMessageStatisticsRequest struct {
	// Chat identifier
	ChatID int64
	// Message identifier
	MessageID int64
	// Pass true if a dark theme is used by the application
	IsDark bool
}

// GetMessageStatisticsRequestTypeID is TL type id of GetMessageStatisticsRequest.
const GetMessageStatisticsRequestTypeID = 0x4bb5a1d8

// Ensuring interfaces in compile-time for GetMessageStatisticsRequest.
var (
	_ bin.Encoder     = &GetMessageStatisticsRequest{}
	_ bin.Decoder     = &GetMessageStatisticsRequest{}
	_ bin.BareEncoder = &GetMessageStatisticsRequest{}
	_ bin.BareDecoder = &GetMessageStatisticsRequest{}
)

func (g *GetMessageStatisticsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.ChatID == 0) {
		return false
	}
	if !(g.MessageID == 0) {
		return false
	}
	if !(g.IsDark == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetMessageStatisticsRequest) String() string {
	if g == nil {
		return "GetMessageStatisticsRequest(nil)"
	}
	type Alias GetMessageStatisticsRequest
	return fmt.Sprintf("GetMessageStatisticsRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetMessageStatisticsRequest) TypeID() uint32 {
	return GetMessageStatisticsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetMessageStatisticsRequest) TypeName() string {
	return "getMessageStatistics"
}

// TypeInfo returns info about TL type.
func (g *GetMessageStatisticsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getMessageStatistics",
		ID:   GetMessageStatisticsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "IsDark",
			SchemaName: "is_dark",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetMessageStatisticsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getMessageStatistics#4bb5a1d8 as nil")
	}
	b.PutID(GetMessageStatisticsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetMessageStatisticsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getMessageStatistics#4bb5a1d8 as nil")
	}
	b.PutLong(g.ChatID)
	b.PutLong(g.MessageID)
	b.PutBool(g.IsDark)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetMessageStatisticsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getMessageStatistics#4bb5a1d8 to nil")
	}
	if err := b.ConsumeID(GetMessageStatisticsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getMessageStatistics#4bb5a1d8: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetMessageStatisticsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getMessageStatistics#4bb5a1d8 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode getMessageStatistics#4bb5a1d8: field chat_id: %w", err)
		}
		g.ChatID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode getMessageStatistics#4bb5a1d8: field message_id: %w", err)
		}
		g.MessageID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode getMessageStatistics#4bb5a1d8: field is_dark: %w", err)
		}
		g.IsDark = value
	}
	return nil
}

// EncodeTDLibJSON encodes g in TDLib API JSON format.
func (g *GetMessageStatisticsRequest) EncodeTDLibJSON(b *jsontd.Encoder) error {
	if g == nil {
		return fmt.Errorf("can't encode getMessageStatistics#4bb5a1d8 as nil")
	}
	b.ObjStart()
	b.PutID("getMessageStatistics")
	b.FieldStart("chat_id")
	b.PutLong(g.ChatID)
	b.FieldStart("message_id")
	b.PutLong(g.MessageID)
	b.FieldStart("is_dark")
	b.PutBool(g.IsDark)
	b.ObjEnd()
	return nil
}

// GetChatID returns value of ChatID field.
func (g *GetMessageStatisticsRequest) GetChatID() (value int64) {
	return g.ChatID
}

// GetMessageID returns value of MessageID field.
func (g *GetMessageStatisticsRequest) GetMessageID() (value int64) {
	return g.MessageID
}

// GetIsDark returns value of IsDark field.
func (g *GetMessageStatisticsRequest) GetIsDark() (value bool) {
	return g.IsDark
}

// GetMessageStatistics invokes method getMessageStatistics#4bb5a1d8 returning error if any.
func (c *Client) GetMessageStatistics(ctx context.Context, request *GetMessageStatisticsRequest) (*MessageStatistics, error) {
	var result MessageStatistics

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
