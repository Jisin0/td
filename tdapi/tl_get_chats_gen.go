// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// GetChatsRequest represents TL type `getChats#6e18f5c1`.
type GetChatsRequest struct {
	// The chat list in which to return chats
	ChatList ChatListClass
	// Chat order to return chats from
	OffsetOrder Int64
	// Chat identifier to return chats from
	OffsetChatID int64
	// The maximum number of chats to be returned. For optimal performance, the number of
	// returned chats is chosen by TDLib and can be smaller than the specified limit, even if
	// the end of the list is not reached
	Limit int32
}

// GetChatsRequestTypeID is TL type id of GetChatsRequest.
const GetChatsRequestTypeID = 0x6e18f5c1

// Ensuring interfaces in compile-time for GetChatsRequest.
var (
	_ bin.Encoder     = &GetChatsRequest{}
	_ bin.Decoder     = &GetChatsRequest{}
	_ bin.BareEncoder = &GetChatsRequest{}
	_ bin.BareDecoder = &GetChatsRequest{}
)

func (g *GetChatsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.ChatList == nil) {
		return false
	}
	if !(g.OffsetOrder.Zero()) {
		return false
	}
	if !(g.OffsetChatID == 0) {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetChatsRequest) String() string {
	if g == nil {
		return "GetChatsRequest(nil)"
	}
	type Alias GetChatsRequest
	return fmt.Sprintf("GetChatsRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetChatsRequest) TypeID() uint32 {
	return GetChatsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetChatsRequest) TypeName() string {
	return "getChats"
}

// TypeInfo returns info about TL type.
func (g *GetChatsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getChats",
		ID:   GetChatsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatList",
			SchemaName: "chat_list",
		},
		{
			Name:       "OffsetOrder",
			SchemaName: "offset_order",
		},
		{
			Name:       "OffsetChatID",
			SchemaName: "offset_chat_id",
		},
		{
			Name:       "Limit",
			SchemaName: "limit",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetChatsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getChats#6e18f5c1 as nil")
	}
	b.PutID(GetChatsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetChatsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getChats#6e18f5c1 as nil")
	}
	if g.ChatList == nil {
		return fmt.Errorf("unable to encode getChats#6e18f5c1: field chat_list is nil")
	}
	if err := g.ChatList.Encode(b); err != nil {
		return fmt.Errorf("unable to encode getChats#6e18f5c1: field chat_list: %w", err)
	}
	if err := g.OffsetOrder.Encode(b); err != nil {
		return fmt.Errorf("unable to encode getChats#6e18f5c1: field offset_order: %w", err)
	}
	b.PutLong(g.OffsetChatID)
	b.PutInt32(g.Limit)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetChatsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getChats#6e18f5c1 to nil")
	}
	if err := b.ConsumeID(GetChatsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getChats#6e18f5c1: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetChatsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getChats#6e18f5c1 to nil")
	}
	{
		value, err := DecodeChatList(b)
		if err != nil {
			return fmt.Errorf("unable to decode getChats#6e18f5c1: field chat_list: %w", err)
		}
		g.ChatList = value
	}
	{
		if err := g.OffsetOrder.Decode(b); err != nil {
			return fmt.Errorf("unable to decode getChats#6e18f5c1: field offset_order: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode getChats#6e18f5c1: field offset_chat_id: %w", err)
		}
		g.OffsetChatID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getChats#6e18f5c1: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// GetChatList returns value of ChatList field.
func (g *GetChatsRequest) GetChatList() (value ChatListClass) {
	return g.ChatList
}

// GetOffsetOrder returns value of OffsetOrder field.
func (g *GetChatsRequest) GetOffsetOrder() (value Int64) {
	return g.OffsetOrder
}

// GetOffsetChatID returns value of OffsetChatID field.
func (g *GetChatsRequest) GetOffsetChatID() (value int64) {
	return g.OffsetChatID
}

// GetLimit returns value of Limit field.
func (g *GetChatsRequest) GetLimit() (value int32) {
	return g.Limit
}

// GetChats invokes method getChats#6e18f5c1 returning error if any.
func (c *Client) GetChats(ctx context.Context, request *GetChatsRequest) (*Chats, error) {
	var result Chats

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
