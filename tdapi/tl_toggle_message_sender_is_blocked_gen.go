// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ToggleMessageSenderIsBlockedRequest represents TL type `toggleMessageSenderIsBlocked#d2b14b9f`.
type ToggleMessageSenderIsBlockedRequest struct {
	// Message Sender
	Sender MessageSenderClass
	// New value of is_blocked
	IsBlocked bool
}

// ToggleMessageSenderIsBlockedRequestTypeID is TL type id of ToggleMessageSenderIsBlockedRequest.
const ToggleMessageSenderIsBlockedRequestTypeID = 0xd2b14b9f

// Ensuring interfaces in compile-time for ToggleMessageSenderIsBlockedRequest.
var (
	_ bin.Encoder     = &ToggleMessageSenderIsBlockedRequest{}
	_ bin.Decoder     = &ToggleMessageSenderIsBlockedRequest{}
	_ bin.BareEncoder = &ToggleMessageSenderIsBlockedRequest{}
	_ bin.BareDecoder = &ToggleMessageSenderIsBlockedRequest{}
)

func (t *ToggleMessageSenderIsBlockedRequest) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.Sender == nil) {
		return false
	}
	if !(t.IsBlocked == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *ToggleMessageSenderIsBlockedRequest) String() string {
	if t == nil {
		return "ToggleMessageSenderIsBlockedRequest(nil)"
	}
	type Alias ToggleMessageSenderIsBlockedRequest
	return fmt.Sprintf("ToggleMessageSenderIsBlockedRequest%+v", Alias(*t))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ToggleMessageSenderIsBlockedRequest) TypeID() uint32 {
	return ToggleMessageSenderIsBlockedRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ToggleMessageSenderIsBlockedRequest) TypeName() string {
	return "toggleMessageSenderIsBlocked"
}

// TypeInfo returns info about TL type.
func (t *ToggleMessageSenderIsBlockedRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "toggleMessageSenderIsBlocked",
		ID:   ToggleMessageSenderIsBlockedRequestTypeID,
	}
	if t == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Sender",
			SchemaName: "sender",
		},
		{
			Name:       "IsBlocked",
			SchemaName: "is_blocked",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (t *ToggleMessageSenderIsBlockedRequest) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode toggleMessageSenderIsBlocked#d2b14b9f as nil")
	}
	b.PutID(ToggleMessageSenderIsBlockedRequestTypeID)
	return t.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (t *ToggleMessageSenderIsBlockedRequest) EncodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode toggleMessageSenderIsBlocked#d2b14b9f as nil")
	}
	if t.Sender == nil {
		return fmt.Errorf("unable to encode toggleMessageSenderIsBlocked#d2b14b9f: field sender is nil")
	}
	if err := t.Sender.Encode(b); err != nil {
		return fmt.Errorf("unable to encode toggleMessageSenderIsBlocked#d2b14b9f: field sender: %w", err)
	}
	b.PutBool(t.IsBlocked)
	return nil
}

// Decode implements bin.Decoder.
func (t *ToggleMessageSenderIsBlockedRequest) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode toggleMessageSenderIsBlocked#d2b14b9f to nil")
	}
	if err := b.ConsumeID(ToggleMessageSenderIsBlockedRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode toggleMessageSenderIsBlocked#d2b14b9f: %w", err)
	}
	return t.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (t *ToggleMessageSenderIsBlockedRequest) DecodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode toggleMessageSenderIsBlocked#d2b14b9f to nil")
	}
	{
		value, err := DecodeMessageSender(b)
		if err != nil {
			return fmt.Errorf("unable to decode toggleMessageSenderIsBlocked#d2b14b9f: field sender: %w", err)
		}
		t.Sender = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode toggleMessageSenderIsBlocked#d2b14b9f: field is_blocked: %w", err)
		}
		t.IsBlocked = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (t *ToggleMessageSenderIsBlockedRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if t == nil {
		return fmt.Errorf("can't encode toggleMessageSenderIsBlocked#d2b14b9f as nil")
	}
	b.ObjStart()
	b.PutID("toggleMessageSenderIsBlocked")
	b.FieldStart("sender")
	if t.Sender == nil {
		return fmt.Errorf("unable to encode toggleMessageSenderIsBlocked#d2b14b9f: field sender is nil")
	}
	if err := t.Sender.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode toggleMessageSenderIsBlocked#d2b14b9f: field sender: %w", err)
	}
	b.FieldStart("is_blocked")
	b.PutBool(t.IsBlocked)
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (t *ToggleMessageSenderIsBlockedRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if t == nil {
		return fmt.Errorf("can't decode toggleMessageSenderIsBlocked#d2b14b9f to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("toggleMessageSenderIsBlocked"); err != nil {
				return fmt.Errorf("unable to decode toggleMessageSenderIsBlocked#d2b14b9f: %w", err)
			}
		case "sender":
			value, err := DecodeTDLibJSONMessageSender(b)
			if err != nil {
				return fmt.Errorf("unable to decode toggleMessageSenderIsBlocked#d2b14b9f: field sender: %w", err)
			}
			t.Sender = value
		case "is_blocked":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode toggleMessageSenderIsBlocked#d2b14b9f: field is_blocked: %w", err)
			}
			t.IsBlocked = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetSender returns value of Sender field.
func (t *ToggleMessageSenderIsBlockedRequest) GetSender() (value MessageSenderClass) {
	return t.Sender
}

// GetIsBlocked returns value of IsBlocked field.
func (t *ToggleMessageSenderIsBlockedRequest) GetIsBlocked() (value bool) {
	return t.IsBlocked
}

// ToggleMessageSenderIsBlocked invokes method toggleMessageSenderIsBlocked#d2b14b9f returning error if any.
func (c *Client) ToggleMessageSenderIsBlocked(ctx context.Context, request *ToggleMessageSenderIsBlockedRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
