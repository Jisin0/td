// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ChatEventLogFilters represents TL type `chatEventLogFilters#35136b9b`.
type ChatEventLogFilters struct {
	// True, if message edits should be returned
	MessageEdits bool
	// True, if message deletions should be returned
	MessageDeletions bool
	// True, if pin/unpin events should be returned
	MessagePins bool
	// True, if members joining events should be returned
	MemberJoins bool
	// True, if members leaving events should be returned
	MemberLeaves bool
	// True, if invited member events should be returned
	MemberInvites bool
	// True, if member promotion/demotion events should be returned
	MemberPromotions bool
	// True, if member restricted/unrestricted/banned/unbanned events should be returned
	MemberRestrictions bool
	// True, if changes in chat information should be returned
	InfoChanges bool
	// True, if changes in chat settings should be returned
	SettingChanges bool
	// True, if changes to invite links should be returned
	InviteLinkChanges bool
	// True, if voice chat actions should be returned
	VoiceChatChanges bool
}

// ChatEventLogFiltersTypeID is TL type id of ChatEventLogFilters.
const ChatEventLogFiltersTypeID = 0x35136b9b

// Ensuring interfaces in compile-time for ChatEventLogFilters.
var (
	_ bin.Encoder     = &ChatEventLogFilters{}
	_ bin.Decoder     = &ChatEventLogFilters{}
	_ bin.BareEncoder = &ChatEventLogFilters{}
	_ bin.BareDecoder = &ChatEventLogFilters{}
)

func (c *ChatEventLogFilters) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.MessageEdits == false) {
		return false
	}
	if !(c.MessageDeletions == false) {
		return false
	}
	if !(c.MessagePins == false) {
		return false
	}
	if !(c.MemberJoins == false) {
		return false
	}
	if !(c.MemberLeaves == false) {
		return false
	}
	if !(c.MemberInvites == false) {
		return false
	}
	if !(c.MemberPromotions == false) {
		return false
	}
	if !(c.MemberRestrictions == false) {
		return false
	}
	if !(c.InfoChanges == false) {
		return false
	}
	if !(c.SettingChanges == false) {
		return false
	}
	if !(c.InviteLinkChanges == false) {
		return false
	}
	if !(c.VoiceChatChanges == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatEventLogFilters) String() string {
	if c == nil {
		return "ChatEventLogFilters(nil)"
	}
	type Alias ChatEventLogFilters
	return fmt.Sprintf("ChatEventLogFilters%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatEventLogFilters) TypeID() uint32 {
	return ChatEventLogFiltersTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatEventLogFilters) TypeName() string {
	return "chatEventLogFilters"
}

// TypeInfo returns info about TL type.
func (c *ChatEventLogFilters) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatEventLogFilters",
		ID:   ChatEventLogFiltersTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MessageEdits",
			SchemaName: "message_edits",
		},
		{
			Name:       "MessageDeletions",
			SchemaName: "message_deletions",
		},
		{
			Name:       "MessagePins",
			SchemaName: "message_pins",
		},
		{
			Name:       "MemberJoins",
			SchemaName: "member_joins",
		},
		{
			Name:       "MemberLeaves",
			SchemaName: "member_leaves",
		},
		{
			Name:       "MemberInvites",
			SchemaName: "member_invites",
		},
		{
			Name:       "MemberPromotions",
			SchemaName: "member_promotions",
		},
		{
			Name:       "MemberRestrictions",
			SchemaName: "member_restrictions",
		},
		{
			Name:       "InfoChanges",
			SchemaName: "info_changes",
		},
		{
			Name:       "SettingChanges",
			SchemaName: "setting_changes",
		},
		{
			Name:       "InviteLinkChanges",
			SchemaName: "invite_link_changes",
		},
		{
			Name:       "VoiceChatChanges",
			SchemaName: "voice_chat_changes",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatEventLogFilters) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatEventLogFilters#35136b9b as nil")
	}
	b.PutID(ChatEventLogFiltersTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatEventLogFilters) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatEventLogFilters#35136b9b as nil")
	}
	b.PutBool(c.MessageEdits)
	b.PutBool(c.MessageDeletions)
	b.PutBool(c.MessagePins)
	b.PutBool(c.MemberJoins)
	b.PutBool(c.MemberLeaves)
	b.PutBool(c.MemberInvites)
	b.PutBool(c.MemberPromotions)
	b.PutBool(c.MemberRestrictions)
	b.PutBool(c.InfoChanges)
	b.PutBool(c.SettingChanges)
	b.PutBool(c.InviteLinkChanges)
	b.PutBool(c.VoiceChatChanges)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatEventLogFilters) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatEventLogFilters#35136b9b to nil")
	}
	if err := b.ConsumeID(ChatEventLogFiltersTypeID); err != nil {
		return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatEventLogFilters) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatEventLogFilters#35136b9b to nil")
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field message_edits: %w", err)
		}
		c.MessageEdits = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field message_deletions: %w", err)
		}
		c.MessageDeletions = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field message_pins: %w", err)
		}
		c.MessagePins = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field member_joins: %w", err)
		}
		c.MemberJoins = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field member_leaves: %w", err)
		}
		c.MemberLeaves = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field member_invites: %w", err)
		}
		c.MemberInvites = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field member_promotions: %w", err)
		}
		c.MemberPromotions = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field member_restrictions: %w", err)
		}
		c.MemberRestrictions = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field info_changes: %w", err)
		}
		c.InfoChanges = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field setting_changes: %w", err)
		}
		c.SettingChanges = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field invite_link_changes: %w", err)
		}
		c.InviteLinkChanges = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatEventLogFilters#35136b9b: field voice_chat_changes: %w", err)
		}
		c.VoiceChatChanges = value
	}
	return nil
}

// GetMessageEdits returns value of MessageEdits field.
func (c *ChatEventLogFilters) GetMessageEdits() (value bool) {
	return c.MessageEdits
}

// GetMessageDeletions returns value of MessageDeletions field.
func (c *ChatEventLogFilters) GetMessageDeletions() (value bool) {
	return c.MessageDeletions
}

// GetMessagePins returns value of MessagePins field.
func (c *ChatEventLogFilters) GetMessagePins() (value bool) {
	return c.MessagePins
}

// GetMemberJoins returns value of MemberJoins field.
func (c *ChatEventLogFilters) GetMemberJoins() (value bool) {
	return c.MemberJoins
}

// GetMemberLeaves returns value of MemberLeaves field.
func (c *ChatEventLogFilters) GetMemberLeaves() (value bool) {
	return c.MemberLeaves
}

// GetMemberInvites returns value of MemberInvites field.
func (c *ChatEventLogFilters) GetMemberInvites() (value bool) {
	return c.MemberInvites
}

// GetMemberPromotions returns value of MemberPromotions field.
func (c *ChatEventLogFilters) GetMemberPromotions() (value bool) {
	return c.MemberPromotions
}

// GetMemberRestrictions returns value of MemberRestrictions field.
func (c *ChatEventLogFilters) GetMemberRestrictions() (value bool) {
	return c.MemberRestrictions
}

// GetInfoChanges returns value of InfoChanges field.
func (c *ChatEventLogFilters) GetInfoChanges() (value bool) {
	return c.InfoChanges
}

// GetSettingChanges returns value of SettingChanges field.
func (c *ChatEventLogFilters) GetSettingChanges() (value bool) {
	return c.SettingChanges
}

// GetInviteLinkChanges returns value of InviteLinkChanges field.
func (c *ChatEventLogFilters) GetInviteLinkChanges() (value bool) {
	return c.InviteLinkChanges
}

// GetVoiceChatChanges returns value of VoiceChatChanges field.
func (c *ChatEventLogFilters) GetVoiceChatChanges() (value bool) {
	return c.VoiceChatChanges
}
