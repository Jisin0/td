// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// DisconnectWebsiteRequest represents TL type `disconnectWebsite#d194f3dd`.
type DisconnectWebsiteRequest struct {
	// Website identifier
	WebsiteID Int64
}

// DisconnectWebsiteRequestTypeID is TL type id of DisconnectWebsiteRequest.
const DisconnectWebsiteRequestTypeID = 0xd194f3dd

// Ensuring interfaces in compile-time for DisconnectWebsiteRequest.
var (
	_ bin.Encoder     = &DisconnectWebsiteRequest{}
	_ bin.Decoder     = &DisconnectWebsiteRequest{}
	_ bin.BareEncoder = &DisconnectWebsiteRequest{}
	_ bin.BareDecoder = &DisconnectWebsiteRequest{}
)

func (d *DisconnectWebsiteRequest) Zero() bool {
	if d == nil {
		return true
	}
	if !(d.WebsiteID.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (d *DisconnectWebsiteRequest) String() string {
	if d == nil {
		return "DisconnectWebsiteRequest(nil)"
	}
	type Alias DisconnectWebsiteRequest
	return fmt.Sprintf("DisconnectWebsiteRequest%+v", Alias(*d))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*DisconnectWebsiteRequest) TypeID() uint32 {
	return DisconnectWebsiteRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*DisconnectWebsiteRequest) TypeName() string {
	return "disconnectWebsite"
}

// TypeInfo returns info about TL type.
func (d *DisconnectWebsiteRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "disconnectWebsite",
		ID:   DisconnectWebsiteRequestTypeID,
	}
	if d == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "WebsiteID",
			SchemaName: "website_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (d *DisconnectWebsiteRequest) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode disconnectWebsite#d194f3dd as nil")
	}
	b.PutID(DisconnectWebsiteRequestTypeID)
	return d.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (d *DisconnectWebsiteRequest) EncodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode disconnectWebsite#d194f3dd as nil")
	}
	if err := d.WebsiteID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode disconnectWebsite#d194f3dd: field website_id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (d *DisconnectWebsiteRequest) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode disconnectWebsite#d194f3dd to nil")
	}
	if err := b.ConsumeID(DisconnectWebsiteRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode disconnectWebsite#d194f3dd: %w", err)
	}
	return d.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (d *DisconnectWebsiteRequest) DecodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode disconnectWebsite#d194f3dd to nil")
	}
	{
		if err := d.WebsiteID.Decode(b); err != nil {
			return fmt.Errorf("unable to decode disconnectWebsite#d194f3dd: field website_id: %w", err)
		}
	}
	return nil
}

// GetWebsiteID returns value of WebsiteID field.
func (d *DisconnectWebsiteRequest) GetWebsiteID() (value Int64) {
	return d.WebsiteID
}

// DisconnectWebsite invokes method disconnectWebsite#d194f3dd returning error if any.
func (c *Client) DisconnectWebsite(ctx context.Context, websiteid Int64) error {
	var ok Ok

	request := &DisconnectWebsiteRequest{
		WebsiteID: websiteid,
	}
	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
