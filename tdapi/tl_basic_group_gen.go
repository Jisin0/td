// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// BasicGroup represents TL type `basicGroup#ed0e293b`.
type BasicGroup struct {
	// Group identifier
	ID int32
	// Number of members in the group
	MemberCount int32
	// Status of the current user in the group
	Status ChatMemberStatusClass
	// True, if the group is active
	IsActive bool
	// Identifier of the supergroup to which this group was upgraded; 0 if none
	UpgradedToSupergroupID int32
}

// BasicGroupTypeID is TL type id of BasicGroup.
const BasicGroupTypeID = 0xed0e293b

// Ensuring interfaces in compile-time for BasicGroup.
var (
	_ bin.Encoder     = &BasicGroup{}
	_ bin.Decoder     = &BasicGroup{}
	_ bin.BareEncoder = &BasicGroup{}
	_ bin.BareDecoder = &BasicGroup{}
)

func (b *BasicGroup) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.ID == 0) {
		return false
	}
	if !(b.MemberCount == 0) {
		return false
	}
	if !(b.Status == nil) {
		return false
	}
	if !(b.IsActive == false) {
		return false
	}
	if !(b.UpgradedToSupergroupID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *BasicGroup) String() string {
	if b == nil {
		return "BasicGroup(nil)"
	}
	type Alias BasicGroup
	return fmt.Sprintf("BasicGroup%+v", Alias(*b))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BasicGroup) TypeID() uint32 {
	return BasicGroupTypeID
}

// TypeName returns name of type in TL schema.
func (*BasicGroup) TypeName() string {
	return "basicGroup"
}

// TypeInfo returns info about TL type.
func (b *BasicGroup) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "basicGroup",
		ID:   BasicGroupTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "MemberCount",
			SchemaName: "member_count",
		},
		{
			Name:       "Status",
			SchemaName: "status",
		},
		{
			Name:       "IsActive",
			SchemaName: "is_active",
		},
		{
			Name:       "UpgradedToSupergroupID",
			SchemaName: "upgraded_to_supergroup_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (b *BasicGroup) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode basicGroup#ed0e293b as nil")
	}
	buf.PutID(BasicGroupTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *BasicGroup) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode basicGroup#ed0e293b as nil")
	}
	buf.PutInt32(b.ID)
	buf.PutInt32(b.MemberCount)
	if b.Status == nil {
		return fmt.Errorf("unable to encode basicGroup#ed0e293b: field status is nil")
	}
	if err := b.Status.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode basicGroup#ed0e293b: field status: %w", err)
	}
	buf.PutBool(b.IsActive)
	buf.PutInt32(b.UpgradedToSupergroupID)
	return nil
}

// Decode implements bin.Decoder.
func (b *BasicGroup) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode basicGroup#ed0e293b to nil")
	}
	if err := buf.ConsumeID(BasicGroupTypeID); err != nil {
		return fmt.Errorf("unable to decode basicGroup#ed0e293b: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *BasicGroup) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode basicGroup#ed0e293b to nil")
	}
	{
		value, err := buf.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode basicGroup#ed0e293b: field id: %w", err)
		}
		b.ID = value
	}
	{
		value, err := buf.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode basicGroup#ed0e293b: field member_count: %w", err)
		}
		b.MemberCount = value
	}
	{
		value, err := DecodeChatMemberStatus(buf)
		if err != nil {
			return fmt.Errorf("unable to decode basicGroup#ed0e293b: field status: %w", err)
		}
		b.Status = value
	}
	{
		value, err := buf.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode basicGroup#ed0e293b: field is_active: %w", err)
		}
		b.IsActive = value
	}
	{
		value, err := buf.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode basicGroup#ed0e293b: field upgraded_to_supergroup_id: %w", err)
		}
		b.UpgradedToSupergroupID = value
	}
	return nil
}

// GetID returns value of ID field.
func (b *BasicGroup) GetID() (value int32) {
	return b.ID
}

// GetMemberCount returns value of MemberCount field.
func (b *BasicGroup) GetMemberCount() (value int32) {
	return b.MemberCount
}

// GetStatus returns value of Status field.
func (b *BasicGroup) GetStatus() (value ChatMemberStatusClass) {
	return b.Status
}

// GetIsActive returns value of IsActive field.
func (b *BasicGroup) GetIsActive() (value bool) {
	return b.IsActive
}

// GetUpgradedToSupergroupID returns value of UpgradedToSupergroupID field.
func (b *BasicGroup) GetUpgradedToSupergroupID() (value int32) {
	return b.UpgradedToSupergroupID
}
