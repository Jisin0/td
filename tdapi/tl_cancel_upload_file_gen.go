// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// CancelUploadFileRequest represents TL type `cancelUploadFile#60c53f90`.
type CancelUploadFileRequest struct {
	// Identifier of the file to stop uploading
	FileID int32
}

// CancelUploadFileRequestTypeID is TL type id of CancelUploadFileRequest.
const CancelUploadFileRequestTypeID = 0x60c53f90

// Ensuring interfaces in compile-time for CancelUploadFileRequest.
var (
	_ bin.Encoder     = &CancelUploadFileRequest{}
	_ bin.Decoder     = &CancelUploadFileRequest{}
	_ bin.BareEncoder = &CancelUploadFileRequest{}
	_ bin.BareDecoder = &CancelUploadFileRequest{}
)

func (c *CancelUploadFileRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.FileID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CancelUploadFileRequest) String() string {
	if c == nil {
		return "CancelUploadFileRequest(nil)"
	}
	type Alias CancelUploadFileRequest
	return fmt.Sprintf("CancelUploadFileRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CancelUploadFileRequest) TypeID() uint32 {
	return CancelUploadFileRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*CancelUploadFileRequest) TypeName() string {
	return "cancelUploadFile"
}

// TypeInfo returns info about TL type.
func (c *CancelUploadFileRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "cancelUploadFile",
		ID:   CancelUploadFileRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "FileID",
			SchemaName: "file_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CancelUploadFileRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode cancelUploadFile#60c53f90 as nil")
	}
	b.PutID(CancelUploadFileRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CancelUploadFileRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode cancelUploadFile#60c53f90 as nil")
	}
	b.PutInt32(c.FileID)
	return nil
}

// Decode implements bin.Decoder.
func (c *CancelUploadFileRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode cancelUploadFile#60c53f90 to nil")
	}
	if err := b.ConsumeID(CancelUploadFileRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode cancelUploadFile#60c53f90: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CancelUploadFileRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode cancelUploadFile#60c53f90 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode cancelUploadFile#60c53f90: field file_id: %w", err)
		}
		c.FileID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CancelUploadFileRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode cancelUploadFile#60c53f90 as nil")
	}
	b.ObjStart()
	b.PutID("cancelUploadFile")
	b.FieldStart("file_id")
	b.PutInt32(c.FileID)
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CancelUploadFileRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode cancelUploadFile#60c53f90 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("cancelUploadFile"); err != nil {
				return fmt.Errorf("unable to decode cancelUploadFile#60c53f90: %w", err)
			}
		case "file_id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode cancelUploadFile#60c53f90: field file_id: %w", err)
			}
			c.FileID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetFileID returns value of FileID field.
func (c *CancelUploadFileRequest) GetFileID() (value int32) {
	if c == nil {
		return
	}
	return c.FileID
}

// CancelUploadFile invokes method cancelUploadFile#60c53f90 returning error if any.
func (c *Client) CancelUploadFile(ctx context.Context, fileid int32) error {
	var ok Ok

	request := &CancelUploadFileRequest{
		FileID: fileid,
	}
	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
