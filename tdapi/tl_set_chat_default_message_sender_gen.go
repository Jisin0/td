// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SetChatDefaultMessageSenderRequest represents TL type `setChatDefaultMessageSender#84544f5a`.
type SetChatDefaultMessageSenderRequest struct {
	// Chat identifier
	ChatID int64
	// New default message sender in the chat
	DefaultMessageSenderID MessageSenderClass
}

// SetChatDefaultMessageSenderRequestTypeID is TL type id of SetChatDefaultMessageSenderRequest.
const SetChatDefaultMessageSenderRequestTypeID = 0x84544f5a

// Ensuring interfaces in compile-time for SetChatDefaultMessageSenderRequest.
var (
	_ bin.Encoder     = &SetChatDefaultMessageSenderRequest{}
	_ bin.Decoder     = &SetChatDefaultMessageSenderRequest{}
	_ bin.BareEncoder = &SetChatDefaultMessageSenderRequest{}
	_ bin.BareDecoder = &SetChatDefaultMessageSenderRequest{}
)

func (s *SetChatDefaultMessageSenderRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}
	if !(s.DefaultMessageSenderID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SetChatDefaultMessageSenderRequest) String() string {
	if s == nil {
		return "SetChatDefaultMessageSenderRequest(nil)"
	}
	type Alias SetChatDefaultMessageSenderRequest
	return fmt.Sprintf("SetChatDefaultMessageSenderRequest%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SetChatDefaultMessageSenderRequest) TypeID() uint32 {
	return SetChatDefaultMessageSenderRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SetChatDefaultMessageSenderRequest) TypeName() string {
	return "setChatDefaultMessageSender"
}

// TypeInfo returns info about TL type.
func (s *SetChatDefaultMessageSenderRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "setChatDefaultMessageSender",
		ID:   SetChatDefaultMessageSenderRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "DefaultMessageSenderID",
			SchemaName: "default_message_sender_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SetChatDefaultMessageSenderRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setChatDefaultMessageSender#84544f5a as nil")
	}
	b.PutID(SetChatDefaultMessageSenderRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SetChatDefaultMessageSenderRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setChatDefaultMessageSender#84544f5a as nil")
	}
	b.PutInt53(s.ChatID)
	if s.DefaultMessageSenderID == nil {
		return fmt.Errorf("unable to encode setChatDefaultMessageSender#84544f5a: field default_message_sender_id is nil")
	}
	if err := s.DefaultMessageSenderID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode setChatDefaultMessageSender#84544f5a: field default_message_sender_id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SetChatDefaultMessageSenderRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setChatDefaultMessageSender#84544f5a to nil")
	}
	if err := b.ConsumeID(SetChatDefaultMessageSenderRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode setChatDefaultMessageSender#84544f5a: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SetChatDefaultMessageSenderRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setChatDefaultMessageSender#84544f5a to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode setChatDefaultMessageSender#84544f5a: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	{
		value, err := DecodeMessageSender(b)
		if err != nil {
			return fmt.Errorf("unable to decode setChatDefaultMessageSender#84544f5a: field default_message_sender_id: %w", err)
		}
		s.DefaultMessageSenderID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SetChatDefaultMessageSenderRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode setChatDefaultMessageSender#84544f5a as nil")
	}
	b.ObjStart()
	b.PutID("setChatDefaultMessageSender")
	b.FieldStart("chat_id")
	b.PutInt53(s.ChatID)
	b.FieldStart("default_message_sender_id")
	if s.DefaultMessageSenderID == nil {
		return fmt.Errorf("unable to encode setChatDefaultMessageSender#84544f5a: field default_message_sender_id is nil")
	}
	if err := s.DefaultMessageSenderID.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode setChatDefaultMessageSender#84544f5a: field default_message_sender_id: %w", err)
	}
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SetChatDefaultMessageSenderRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode setChatDefaultMessageSender#84544f5a to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("setChatDefaultMessageSender"); err != nil {
				return fmt.Errorf("unable to decode setChatDefaultMessageSender#84544f5a: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode setChatDefaultMessageSender#84544f5a: field chat_id: %w", err)
			}
			s.ChatID = value
		case "default_message_sender_id":
			value, err := DecodeTDLibJSONMessageSender(b)
			if err != nil {
				return fmt.Errorf("unable to decode setChatDefaultMessageSender#84544f5a: field default_message_sender_id: %w", err)
			}
			s.DefaultMessageSenderID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (s *SetChatDefaultMessageSenderRequest) GetChatID() (value int64) {
	if s == nil {
		return
	}
	return s.ChatID
}

// GetDefaultMessageSenderID returns value of DefaultMessageSenderID field.
func (s *SetChatDefaultMessageSenderRequest) GetDefaultMessageSenderID() (value MessageSenderClass) {
	if s == nil {
		return
	}
	return s.DefaultMessageSenderID
}

// SetChatDefaultMessageSender invokes method setChatDefaultMessageSender#84544f5a returning error if any.
func (c *Client) SetChatDefaultMessageSender(ctx context.Context, request *SetChatDefaultMessageSenderRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
