// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SmsjobsUpdateSettingsRequest represents TL type `smsjobs.updateSettings#93fa0bf`.
//
// See https://core.telegram.org/method/smsjobs.updateSettings for reference.
type SmsjobsUpdateSettingsRequest struct {
	// Flags field of SmsjobsUpdateSettingsRequest.
	Flags bin.Fields
	// AllowInternational field of SmsjobsUpdateSettingsRequest.
	AllowInternational bool
}

// SmsjobsUpdateSettingsRequestTypeID is TL type id of SmsjobsUpdateSettingsRequest.
const SmsjobsUpdateSettingsRequestTypeID = 0x93fa0bf

// Ensuring interfaces in compile-time for SmsjobsUpdateSettingsRequest.
var (
	_ bin.Encoder     = &SmsjobsUpdateSettingsRequest{}
	_ bin.Decoder     = &SmsjobsUpdateSettingsRequest{}
	_ bin.BareEncoder = &SmsjobsUpdateSettingsRequest{}
	_ bin.BareDecoder = &SmsjobsUpdateSettingsRequest{}
)

func (u *SmsjobsUpdateSettingsRequest) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Flags.Zero()) {
		return false
	}
	if !(u.AllowInternational == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *SmsjobsUpdateSettingsRequest) String() string {
	if u == nil {
		return "SmsjobsUpdateSettingsRequest(nil)"
	}
	type Alias SmsjobsUpdateSettingsRequest
	return fmt.Sprintf("SmsjobsUpdateSettingsRequest%+v", Alias(*u))
}

// FillFrom fills SmsjobsUpdateSettingsRequest from given interface.
func (u *SmsjobsUpdateSettingsRequest) FillFrom(from interface {
	GetAllowInternational() (value bool)
}) {
	u.AllowInternational = from.GetAllowInternational()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SmsjobsUpdateSettingsRequest) TypeID() uint32 {
	return SmsjobsUpdateSettingsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SmsjobsUpdateSettingsRequest) TypeName() string {
	return "smsjobs.updateSettings"
}

// TypeInfo returns info about TL type.
func (u *SmsjobsUpdateSettingsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "smsjobs.updateSettings",
		ID:   SmsjobsUpdateSettingsRequestTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "AllowInternational",
			SchemaName: "allow_international",
			Null:       !u.Flags.Has(0),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (u *SmsjobsUpdateSettingsRequest) SetFlags() {
	if !(u.AllowInternational == false) {
		u.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (u *SmsjobsUpdateSettingsRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode smsjobs.updateSettings#93fa0bf as nil")
	}
	b.PutID(SmsjobsUpdateSettingsRequestTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *SmsjobsUpdateSettingsRequest) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode smsjobs.updateSettings#93fa0bf as nil")
	}
	u.SetFlags()
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode smsjobs.updateSettings#93fa0bf: field flags: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *SmsjobsUpdateSettingsRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode smsjobs.updateSettings#93fa0bf to nil")
	}
	if err := b.ConsumeID(SmsjobsUpdateSettingsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode smsjobs.updateSettings#93fa0bf: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *SmsjobsUpdateSettingsRequest) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode smsjobs.updateSettings#93fa0bf to nil")
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode smsjobs.updateSettings#93fa0bf: field flags: %w", err)
		}
	}
	u.AllowInternational = u.Flags.Has(0)
	return nil
}

// SetAllowInternational sets value of AllowInternational conditional field.
func (u *SmsjobsUpdateSettingsRequest) SetAllowInternational(value bool) {
	if value {
		u.Flags.Set(0)
		u.AllowInternational = true
	} else {
		u.Flags.Unset(0)
		u.AllowInternational = false
	}
}

// GetAllowInternational returns value of AllowInternational conditional field.
func (u *SmsjobsUpdateSettingsRequest) GetAllowInternational() (value bool) {
	if u == nil {
		return
	}
	return u.Flags.Has(0)
}

// SmsjobsUpdateSettings invokes method smsjobs.updateSettings#93fa0bf returning error if any.
//
// See https://core.telegram.org/method/smsjobs.updateSettings for reference.
func (c *Client) SmsjobsUpdateSettings(ctx context.Context, request *SmsjobsUpdateSettingsRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
