// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoryPublicForwards represents TL type `storyPublicForwards#fcacb389`.
type StoryPublicForwards struct {
	// Approximate total number of messages and stories found
	TotalCount int32
	// List of found public forwards and reposts
	Forwards []StoryPublicForwardClass
	// The offset for the next request. If empty, then there are no more results
	NextOffset string
}

// StoryPublicForwardsTypeID is TL type id of StoryPublicForwards.
const StoryPublicForwardsTypeID = 0xfcacb389

// Ensuring interfaces in compile-time for StoryPublicForwards.
var (
	_ bin.Encoder     = &StoryPublicForwards{}
	_ bin.Decoder     = &StoryPublicForwards{}
	_ bin.BareEncoder = &StoryPublicForwards{}
	_ bin.BareDecoder = &StoryPublicForwards{}
)

func (s *StoryPublicForwards) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.TotalCount == 0) {
		return false
	}
	if !(s.Forwards == nil) {
		return false
	}
	if !(s.NextOffset == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoryPublicForwards) String() string {
	if s == nil {
		return "StoryPublicForwards(nil)"
	}
	type Alias StoryPublicForwards
	return fmt.Sprintf("StoryPublicForwards%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoryPublicForwards) TypeID() uint32 {
	return StoryPublicForwardsTypeID
}

// TypeName returns name of type in TL schema.
func (*StoryPublicForwards) TypeName() string {
	return "storyPublicForwards"
}

// TypeInfo returns info about TL type.
func (s *StoryPublicForwards) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storyPublicForwards",
		ID:   StoryPublicForwardsTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "TotalCount",
			SchemaName: "total_count",
		},
		{
			Name:       "Forwards",
			SchemaName: "forwards",
		},
		{
			Name:       "NextOffset",
			SchemaName: "next_offset",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StoryPublicForwards) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwards#fcacb389 as nil")
	}
	b.PutID(StoryPublicForwardsTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoryPublicForwards) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwards#fcacb389 as nil")
	}
	b.PutInt32(s.TotalCount)
	b.PutInt(len(s.Forwards))
	for idx, v := range s.Forwards {
		if v == nil {
			return fmt.Errorf("unable to encode storyPublicForwards#fcacb389: field forwards element with index %d is nil", idx)
		}
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare storyPublicForwards#fcacb389: field forwards element with index %d: %w", idx, err)
		}
	}
	b.PutString(s.NextOffset)
	return nil
}

// Decode implements bin.Decoder.
func (s *StoryPublicForwards) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwards#fcacb389 to nil")
	}
	if err := b.ConsumeID(StoryPublicForwardsTypeID); err != nil {
		return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoryPublicForwards) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwards#fcacb389 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field total_count: %w", err)
		}
		s.TotalCount = value
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field forwards: %w", err)
		}

		if headerLen > 0 {
			s.Forwards = make([]StoryPublicForwardClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeStoryPublicForward(b)
			if err != nil {
				return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field forwards: %w", err)
			}
			s.Forwards = append(s.Forwards, value)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field next_offset: %w", err)
		}
		s.NextOffset = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StoryPublicForwards) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode storyPublicForwards#fcacb389 as nil")
	}
	b.ObjStart()
	b.PutID("storyPublicForwards")
	b.Comma()
	b.FieldStart("total_count")
	b.PutInt32(s.TotalCount)
	b.Comma()
	b.FieldStart("forwards")
	b.ArrStart()
	for idx, v := range s.Forwards {
		if v == nil {
			return fmt.Errorf("unable to encode storyPublicForwards#fcacb389: field forwards element with index %d is nil", idx)
		}
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode storyPublicForwards#fcacb389: field forwards element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.FieldStart("next_offset")
	b.PutString(s.NextOffset)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StoryPublicForwards) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode storyPublicForwards#fcacb389 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("storyPublicForwards"); err != nil {
				return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: %w", err)
			}
		case "total_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field total_count: %w", err)
			}
			s.TotalCount = value
		case "forwards":
			if err := b.Arr(func(b tdjson.Decoder) error {
				value, err := DecodeTDLibJSONStoryPublicForward(b)
				if err != nil {
					return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field forwards: %w", err)
				}
				s.Forwards = append(s.Forwards, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field forwards: %w", err)
			}
		case "next_offset":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode storyPublicForwards#fcacb389: field next_offset: %w", err)
			}
			s.NextOffset = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetTotalCount returns value of TotalCount field.
func (s *StoryPublicForwards) GetTotalCount() (value int32) {
	if s == nil {
		return
	}
	return s.TotalCount
}

// GetForwards returns value of Forwards field.
func (s *StoryPublicForwards) GetForwards() (value []StoryPublicForwardClass) {
	if s == nil {
		return
	}
	return s.Forwards
}

// GetNextOffset returns value of NextOffset field.
func (s *StoryPublicForwards) GetNextOffset() (value string) {
	if s == nil {
		return
	}
	return s.NextOffset
}
