// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MessageThreadInfo represents TL type `messageThreadInfo#f356201b`.
type MessageThreadInfo struct {
	// Identifier of the chat to which the message thread belongs
	ChatID int64
	// Message thread identifier, unique within the chat
	MessageThreadID int64
	// Contains information about the message thread
	ReplyInfo MessageReplyInfo
	// The messages from which the thread starts. The messages are returned in a reverse
	// chronological order (i.e., in order of decreasing message_id)
	Messages []Message
	// A draft of a message in the message thread; may be null
	DraftMessage DraftMessage
}

// MessageThreadInfoTypeID is TL type id of MessageThreadInfo.
const MessageThreadInfoTypeID = 0xf356201b

// Ensuring interfaces in compile-time for MessageThreadInfo.
var (
	_ bin.Encoder     = &MessageThreadInfo{}
	_ bin.Decoder     = &MessageThreadInfo{}
	_ bin.BareEncoder = &MessageThreadInfo{}
	_ bin.BareDecoder = &MessageThreadInfo{}
)

func (m *MessageThreadInfo) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.ChatID == 0) {
		return false
	}
	if !(m.MessageThreadID == 0) {
		return false
	}
	if !(m.ReplyInfo.Zero()) {
		return false
	}
	if !(m.Messages == nil) {
		return false
	}
	if !(m.DraftMessage.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageThreadInfo) String() string {
	if m == nil {
		return "MessageThreadInfo(nil)"
	}
	type Alias MessageThreadInfo
	return fmt.Sprintf("MessageThreadInfo%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageThreadInfo) TypeID() uint32 {
	return MessageThreadInfoTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageThreadInfo) TypeName() string {
	return "messageThreadInfo"
}

// TypeInfo returns info about TL type.
func (m *MessageThreadInfo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageThreadInfo",
		ID:   MessageThreadInfoTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "MessageThreadID",
			SchemaName: "message_thread_id",
		},
		{
			Name:       "ReplyInfo",
			SchemaName: "reply_info",
		},
		{
			Name:       "Messages",
			SchemaName: "messages",
		},
		{
			Name:       "DraftMessage",
			SchemaName: "draft_message",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageThreadInfo) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageThreadInfo#f356201b as nil")
	}
	b.PutID(MessageThreadInfoTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageThreadInfo) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageThreadInfo#f356201b as nil")
	}
	b.PutLong(m.ChatID)
	b.PutLong(m.MessageThreadID)
	if err := m.ReplyInfo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageThreadInfo#f356201b: field reply_info: %w", err)
	}
	b.PutInt(len(m.Messages))
	for idx, v := range m.Messages {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare messageThreadInfo#f356201b: field messages element with index %d: %w", idx, err)
		}
	}
	if err := m.DraftMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageThreadInfo#f356201b: field draft_message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageThreadInfo) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageThreadInfo#f356201b to nil")
	}
	if err := b.ConsumeID(MessageThreadInfoTypeID); err != nil {
		return fmt.Errorf("unable to decode messageThreadInfo#f356201b: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageThreadInfo) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageThreadInfo#f356201b to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messageThreadInfo#f356201b: field chat_id: %w", err)
		}
		m.ChatID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messageThreadInfo#f356201b: field message_thread_id: %w", err)
		}
		m.MessageThreadID = value
	}
	{
		if err := m.ReplyInfo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageThreadInfo#f356201b: field reply_info: %w", err)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageThreadInfo#f356201b: field messages: %w", err)
		}

		if headerLen > 0 {
			m.Messages = make([]Message, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value Message
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare messageThreadInfo#f356201b: field messages: %w", err)
			}
			m.Messages = append(m.Messages, value)
		}
	}
	{
		if err := m.DraftMessage.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageThreadInfo#f356201b: field draft_message: %w", err)
		}
	}
	return nil
}

// GetChatID returns value of ChatID field.
func (m *MessageThreadInfo) GetChatID() (value int64) {
	return m.ChatID
}

// GetMessageThreadID returns value of MessageThreadID field.
func (m *MessageThreadInfo) GetMessageThreadID() (value int64) {
	return m.MessageThreadID
}

// GetReplyInfo returns value of ReplyInfo field.
func (m *MessageThreadInfo) GetReplyInfo() (value MessageReplyInfo) {
	return m.ReplyInfo
}

// GetMessages returns value of Messages field.
func (m *MessageThreadInfo) GetMessages() (value []Message) {
	return m.Messages
}

// GetDraftMessage returns value of DraftMessage field.
func (m *MessageThreadInfo) GetDraftMessage() (value DraftMessage) {
	return m.DraftMessage
}
