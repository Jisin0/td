// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SetMessageReactionRequest represents TL type `setMessageReaction#874fab38`.
type SetMessageReactionRequest struct {
	// Identifier of the chat to which the message belongs
	ChatID int64
	// Identifier of the message
	MessageID int64
	// Text representation of the new chosen reaction. Can be an empty string or the
	// currently chosen non-big reaction to remove the reaction
	Reaction string
	// Pass true if the reaction is added with a big animation
	IsBig bool
}

// SetMessageReactionRequestTypeID is TL type id of SetMessageReactionRequest.
const SetMessageReactionRequestTypeID = 0x874fab38

// Ensuring interfaces in compile-time for SetMessageReactionRequest.
var (
	_ bin.Encoder     = &SetMessageReactionRequest{}
	_ bin.Decoder     = &SetMessageReactionRequest{}
	_ bin.BareEncoder = &SetMessageReactionRequest{}
	_ bin.BareDecoder = &SetMessageReactionRequest{}
)

func (s *SetMessageReactionRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}
	if !(s.MessageID == 0) {
		return false
	}
	if !(s.Reaction == "") {
		return false
	}
	if !(s.IsBig == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SetMessageReactionRequest) String() string {
	if s == nil {
		return "SetMessageReactionRequest(nil)"
	}
	type Alias SetMessageReactionRequest
	return fmt.Sprintf("SetMessageReactionRequest%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SetMessageReactionRequest) TypeID() uint32 {
	return SetMessageReactionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*SetMessageReactionRequest) TypeName() string {
	return "setMessageReaction"
}

// TypeInfo returns info about TL type.
func (s *SetMessageReactionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "setMessageReaction",
		ID:   SetMessageReactionRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "Reaction",
			SchemaName: "reaction",
		},
		{
			Name:       "IsBig",
			SchemaName: "is_big",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SetMessageReactionRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setMessageReaction#874fab38 as nil")
	}
	b.PutID(SetMessageReactionRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SetMessageReactionRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode setMessageReaction#874fab38 as nil")
	}
	b.PutInt53(s.ChatID)
	b.PutInt53(s.MessageID)
	b.PutString(s.Reaction)
	b.PutBool(s.IsBig)
	return nil
}

// Decode implements bin.Decoder.
func (s *SetMessageReactionRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setMessageReaction#874fab38 to nil")
	}
	if err := b.ConsumeID(SetMessageReactionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode setMessageReaction#874fab38: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SetMessageReactionRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode setMessageReaction#874fab38 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode setMessageReaction#874fab38: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode setMessageReaction#874fab38: field message_id: %w", err)
		}
		s.MessageID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode setMessageReaction#874fab38: field reaction: %w", err)
		}
		s.Reaction = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode setMessageReaction#874fab38: field is_big: %w", err)
		}
		s.IsBig = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SetMessageReactionRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode setMessageReaction#874fab38 as nil")
	}
	b.ObjStart()
	b.PutID("setMessageReaction")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(s.ChatID)
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(s.MessageID)
	b.Comma()
	b.FieldStart("reaction")
	b.PutString(s.Reaction)
	b.Comma()
	b.FieldStart("is_big")
	b.PutBool(s.IsBig)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SetMessageReactionRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode setMessageReaction#874fab38 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("setMessageReaction"); err != nil {
				return fmt.Errorf("unable to decode setMessageReaction#874fab38: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode setMessageReaction#874fab38: field chat_id: %w", err)
			}
			s.ChatID = value
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode setMessageReaction#874fab38: field message_id: %w", err)
			}
			s.MessageID = value
		case "reaction":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode setMessageReaction#874fab38: field reaction: %w", err)
			}
			s.Reaction = value
		case "is_big":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode setMessageReaction#874fab38: field is_big: %w", err)
			}
			s.IsBig = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (s *SetMessageReactionRequest) GetChatID() (value int64) {
	if s == nil {
		return
	}
	return s.ChatID
}

// GetMessageID returns value of MessageID field.
func (s *SetMessageReactionRequest) GetMessageID() (value int64) {
	if s == nil {
		return
	}
	return s.MessageID
}

// GetReaction returns value of Reaction field.
func (s *SetMessageReactionRequest) GetReaction() (value string) {
	if s == nil {
		return
	}
	return s.Reaction
}

// GetIsBig returns value of IsBig field.
func (s *SetMessageReactionRequest) GetIsBig() (value bool) {
	if s == nil {
		return
	}
	return s.IsBig
}

// SetMessageReaction invokes method setMessageReaction#874fab38 returning error if any.
func (c *Client) SetMessageReaction(ctx context.Context, request *SetMessageReactionRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
