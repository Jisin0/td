// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// RemoteFile represents TL type `remoteFile#93644dd2`.
type RemoteFile struct {
	// Remote file identifier; may be empty. Can be used by the current user across
	// application restarts or even from other devices. Uniquely identifies a file, but a
	// file can have a lot of different valid identifiers.
	ID string
	// Unique file identifier; may be empty if unknown. The unique file identifier which is
	// the same for the same file even for different users and is persistent over time
	UniqueID string
	// True, if the file is currently being uploaded (or a remote copy is being generated by
	// some other means)
	IsUploadingActive bool
	// True, if a remote copy is fully available
	IsUploadingCompleted bool
	// Size of the remote available part of the file; 0 if unknown
	UploadedSize int32
}

// RemoteFileTypeID is TL type id of RemoteFile.
const RemoteFileTypeID = 0x93644dd2

// Ensuring interfaces in compile-time for RemoteFile.
var (
	_ bin.Encoder     = &RemoteFile{}
	_ bin.Decoder     = &RemoteFile{}
	_ bin.BareEncoder = &RemoteFile{}
	_ bin.BareDecoder = &RemoteFile{}
)

func (r *RemoteFile) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.ID == "") {
		return false
	}
	if !(r.UniqueID == "") {
		return false
	}
	if !(r.IsUploadingActive == false) {
		return false
	}
	if !(r.IsUploadingCompleted == false) {
		return false
	}
	if !(r.UploadedSize == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *RemoteFile) String() string {
	if r == nil {
		return "RemoteFile(nil)"
	}
	type Alias RemoteFile
	return fmt.Sprintf("RemoteFile%+v", Alias(*r))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*RemoteFile) TypeID() uint32 {
	return RemoteFileTypeID
}

// TypeName returns name of type in TL schema.
func (*RemoteFile) TypeName() string {
	return "remoteFile"
}

// TypeInfo returns info about TL type.
func (r *RemoteFile) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "remoteFile",
		ID:   RemoteFileTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "UniqueID",
			SchemaName: "unique_id",
		},
		{
			Name:       "IsUploadingActive",
			SchemaName: "is_uploading_active",
		},
		{
			Name:       "IsUploadingCompleted",
			SchemaName: "is_uploading_completed",
		},
		{
			Name:       "UploadedSize",
			SchemaName: "uploaded_size",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *RemoteFile) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode remoteFile#93644dd2 as nil")
	}
	b.PutID(RemoteFileTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *RemoteFile) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode remoteFile#93644dd2 as nil")
	}
	b.PutString(r.ID)
	b.PutString(r.UniqueID)
	b.PutBool(r.IsUploadingActive)
	b.PutBool(r.IsUploadingCompleted)
	b.PutInt32(r.UploadedSize)
	return nil
}

// Decode implements bin.Decoder.
func (r *RemoteFile) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode remoteFile#93644dd2 to nil")
	}
	if err := b.ConsumeID(RemoteFileTypeID); err != nil {
		return fmt.Errorf("unable to decode remoteFile#93644dd2: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *RemoteFile) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode remoteFile#93644dd2 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode remoteFile#93644dd2: field id: %w", err)
		}
		r.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode remoteFile#93644dd2: field unique_id: %w", err)
		}
		r.UniqueID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode remoteFile#93644dd2: field is_uploading_active: %w", err)
		}
		r.IsUploadingActive = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode remoteFile#93644dd2: field is_uploading_completed: %w", err)
		}
		r.IsUploadingCompleted = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode remoteFile#93644dd2: field uploaded_size: %w", err)
		}
		r.UploadedSize = value
	}
	return nil
}

// GetID returns value of ID field.
func (r *RemoteFile) GetID() (value string) {
	return r.ID
}

// GetUniqueID returns value of UniqueID field.
func (r *RemoteFile) GetUniqueID() (value string) {
	return r.UniqueID
}

// GetIsUploadingActive returns value of IsUploadingActive field.
func (r *RemoteFile) GetIsUploadingActive() (value bool) {
	return r.IsUploadingActive
}

// GetIsUploadingCompleted returns value of IsUploadingCompleted field.
func (r *RemoteFile) GetIsUploadingCompleted() (value bool) {
	return r.IsUploadingCompleted
}

// GetUploadedSize returns value of UploadedSize field.
func (r *RemoteFile) GetUploadedSize() (value int32) {
	return r.UploadedSize
}
