{{- /*gotype: github.com/gotd/td/internal/gen.structDef*/ -}}
{{ define "encode_tdlib_json" }}{{ $s := . }}
// EncodeTDLibJSON implements jsontd.TDLibEncoder.
func ({{ $s.Receiver }} *{{ $s.Name }}) EncodeTDLibJSON({{ $s.BufArg }} jsontd.Encoder) error {
    if {{ $s.Receiver }} == nil {
        return fmt.Errorf("can't encode {{ $s.RawType }} as nil")
    }
    {{ $s.BufArg }}.ObjStart()
    {{ $s.BufArg }}.PutID("{{ $s.RawName }}")
{{- range $f := $s.Fields }}
    {{- if $f.Conditional }}
    if !({{ $s.Receiver }}.{{template "compare_zero" $f}}) {
        {{ $s.Receiver }}.{{ $f.ConditionalField }}.Set({{ $f.ConditionalIndex }})
    }
    {{- end }}
{{- end }}
{{- range $f := $s.Fields }}
    {{- if not $f.ConditionalBool }}
    {{- if $f.Conditional }}
    if {{ $s.Receiver }}.{{ $f.ConditionalField }}.Has({{ $f.ConditionalIndex }}) {
    {{- end }}
    {{ $s.BufArg }}.FieldStart("{{ $f.RawName }}")
    {{- if $f.Vector }}
    {{ $s.BufArg }}.ArrStart()
    for {{ if $f.Encoder }}idx{{ else }}_{{ end }}, {{- if $f.DoubleVector }}row{{else}}v{{end}} := range {{ $s.Receiver }}.{{ $f.Name }} {
    {{- if $f.DoubleVector }}
        {{ $s.BufArg }}.ArrStart()
        for _, v := range row {
    {{- end }}
    {{- if $f.Encoder }}
        {{- if $f.Interface }}
            if v == nil {
            return fmt.Errorf("unable to encode {{ $s.RawType }}: field {{ $f.RawName }} element with index %d is nil", idx)
            }
        {{- end }}
        if err := v.EncodeTDLibJSON({{ $s.BufArg }}); err != nil {
            return fmt.Errorf("unable to encode {{ $s.RawType }}: field {{ $f.RawName }} element with index %d: %w", idx, err)
        }
    {{- else }}
        {{ $s.BufArg }}.Put{{ $f.Func }}(v)
    {{- end }}
    {{- if $f.DoubleVector }}
        {{ $s.BufArg }}.ArrEnd()
        }
    {{- end }}
    }
    {{ $s.BufArg }}.ArrEnd()
    {{- else }}
    {{- if $f.Encoder }}
    {{- if $f.Interface }}
    if {{ $s.Receiver }}.{{ $f.Name }} == nil {
        return fmt.Errorf("unable to encode {{ $s.RawType }}: field {{ $f.RawName }} is nil")
    }
    {{- end}}
    if err := {{ $s.Receiver }}.{{ $f.Name }}.EncodeTDLibJSON({{ $s.BufArg }}); err != nil {
        return fmt.Errorf("unable to encode {{ $s.RawType }}: field {{ $f.RawName }}: %w", err)
    }
    {{- else }}
    {{ $s.BufArg }}.Put{{ $f.Func }}({{ $s.Receiver }}.{{ $f.Name }})
    {{- end }}
    {{- end }}
    {{- if $f.Conditional }}
    }
    {{- end }}
    {{- end }}
{{- end }}
    {{ $s.BufArg }}.ObjEnd()
    return nil
}
{{ end }}
