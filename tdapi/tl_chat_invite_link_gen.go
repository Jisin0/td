// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/jsontd"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = jsontd.Encoder{}
)

// ChatInviteLink represents TL type `chatInviteLink#f13280b3`.
type ChatInviteLink struct {
	// Chat invite link
	InviteLink string
	// User identifier of an administrator created the link
	CreatorUserID int32
	// Point in time (Unix timestamp) when the link was created
	Date int32
	// Point in time (Unix timestamp) when the link was last edited; 0 if never or unknown
	EditDate int32
	// Point in time (Unix timestamp) when the link will expire; 0 if never
	ExpireDate int32
	// The maximum number of members, which can join the chat using the link simultaneously;
	// 0 if not limited
	MemberLimit int32
	// Number of chat members, which joined the chat using the link
	MemberCount int32
	// True, if the link is primary. Primary invite link can't have expire date or usage
	// limit. There is exactly one primary invite link for each administrator with
	// can_invite_users right at a given time
	IsPrimary bool
	// True, if the link was revoked
	IsRevoked bool
}

// ChatInviteLinkTypeID is TL type id of ChatInviteLink.
const ChatInviteLinkTypeID = 0xf13280b3

// Ensuring interfaces in compile-time for ChatInviteLink.
var (
	_ bin.Encoder     = &ChatInviteLink{}
	_ bin.Decoder     = &ChatInviteLink{}
	_ bin.BareEncoder = &ChatInviteLink{}
	_ bin.BareDecoder = &ChatInviteLink{}
)

func (c *ChatInviteLink) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.InviteLink == "") {
		return false
	}
	if !(c.CreatorUserID == 0) {
		return false
	}
	if !(c.Date == 0) {
		return false
	}
	if !(c.EditDate == 0) {
		return false
	}
	if !(c.ExpireDate == 0) {
		return false
	}
	if !(c.MemberLimit == 0) {
		return false
	}
	if !(c.MemberCount == 0) {
		return false
	}
	if !(c.IsPrimary == false) {
		return false
	}
	if !(c.IsRevoked == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatInviteLink) String() string {
	if c == nil {
		return "ChatInviteLink(nil)"
	}
	type Alias ChatInviteLink
	return fmt.Sprintf("ChatInviteLink%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatInviteLink) TypeID() uint32 {
	return ChatInviteLinkTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatInviteLink) TypeName() string {
	return "chatInviteLink"
}

// TypeInfo returns info about TL type.
func (c *ChatInviteLink) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatInviteLink",
		ID:   ChatInviteLinkTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "InviteLink",
			SchemaName: "invite_link",
		},
		{
			Name:       "CreatorUserID",
			SchemaName: "creator_user_id",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
		{
			Name:       "EditDate",
			SchemaName: "edit_date",
		},
		{
			Name:       "ExpireDate",
			SchemaName: "expire_date",
		},
		{
			Name:       "MemberLimit",
			SchemaName: "member_limit",
		},
		{
			Name:       "MemberCount",
			SchemaName: "member_count",
		},
		{
			Name:       "IsPrimary",
			SchemaName: "is_primary",
		},
		{
			Name:       "IsRevoked",
			SchemaName: "is_revoked",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatInviteLink) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatInviteLink#f13280b3 as nil")
	}
	b.PutID(ChatInviteLinkTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatInviteLink) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatInviteLink#f13280b3 as nil")
	}
	b.PutString(c.InviteLink)
	b.PutInt32(c.CreatorUserID)
	b.PutInt32(c.Date)
	b.PutInt32(c.EditDate)
	b.PutInt32(c.ExpireDate)
	b.PutInt32(c.MemberLimit)
	b.PutInt32(c.MemberCount)
	b.PutBool(c.IsPrimary)
	b.PutBool(c.IsRevoked)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatInviteLink) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatInviteLink#f13280b3 to nil")
	}
	if err := b.ConsumeID(ChatInviteLinkTypeID); err != nil {
		return fmt.Errorf("unable to decode chatInviteLink#f13280b3: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatInviteLink) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatInviteLink#f13280b3 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field invite_link: %w", err)
		}
		c.InviteLink = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field creator_user_id: %w", err)
		}
		c.CreatorUserID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field date: %w", err)
		}
		c.Date = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field edit_date: %w", err)
		}
		c.EditDate = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field expire_date: %w", err)
		}
		c.ExpireDate = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field member_limit: %w", err)
		}
		c.MemberLimit = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field member_count: %w", err)
		}
		c.MemberCount = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field is_primary: %w", err)
		}
		c.IsPrimary = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chatInviteLink#f13280b3: field is_revoked: %w", err)
		}
		c.IsRevoked = value
	}
	return nil
}

// EncodeTDLibJSON encodes c in TDLib API JSON format.
func (c *ChatInviteLink) EncodeTDLibJSON(b *jsontd.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatInviteLink#f13280b3 as nil")
	}
	b.ObjStart()
	b.PutID("chatInviteLink")
	b.FieldStart("invite_link")
	b.PutString(c.InviteLink)
	b.FieldStart("creator_user_id")
	b.PutInt32(c.CreatorUserID)
	b.FieldStart("date")
	b.PutInt32(c.Date)
	b.FieldStart("edit_date")
	b.PutInt32(c.EditDate)
	b.FieldStart("expire_date")
	b.PutInt32(c.ExpireDate)
	b.FieldStart("member_limit")
	b.PutInt32(c.MemberLimit)
	b.FieldStart("member_count")
	b.PutInt32(c.MemberCount)
	b.FieldStart("is_primary")
	b.PutBool(c.IsPrimary)
	b.FieldStart("is_revoked")
	b.PutBool(c.IsRevoked)
	b.ObjEnd()
	return nil
}

// GetInviteLink returns value of InviteLink field.
func (c *ChatInviteLink) GetInviteLink() (value string) {
	return c.InviteLink
}

// GetCreatorUserID returns value of CreatorUserID field.
func (c *ChatInviteLink) GetCreatorUserID() (value int32) {
	return c.CreatorUserID
}

// GetDate returns value of Date field.
func (c *ChatInviteLink) GetDate() (value int32) {
	return c.Date
}

// GetEditDate returns value of EditDate field.
func (c *ChatInviteLink) GetEditDate() (value int32) {
	return c.EditDate
}

// GetExpireDate returns value of ExpireDate field.
func (c *ChatInviteLink) GetExpireDate() (value int32) {
	return c.ExpireDate
}

// GetMemberLimit returns value of MemberLimit field.
func (c *ChatInviteLink) GetMemberLimit() (value int32) {
	return c.MemberLimit
}

// GetMemberCount returns value of MemberCount field.
func (c *ChatInviteLink) GetMemberCount() (value int32) {
	return c.MemberCount
}

// GetIsPrimary returns value of IsPrimary field.
func (c *ChatInviteLink) GetIsPrimary() (value bool) {
	return c.IsPrimary
}

// GetIsRevoked returns value of IsRevoked field.
func (c *ChatInviteLink) GetIsRevoked() (value bool) {
	return c.IsRevoked
}
