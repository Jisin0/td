// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// Chat represents TL type `chat#77f6d111`.
type Chat struct {
	// Chat unique identifier
	ID int64
	// Type of the chat
	Type ChatTypeClass
	// Chat title
	Title string
	// Chat photo; may be null
	Photo ChatPhotoInfo
	// Actions that non-administrator chat members are allowed to take in the chat
	Permissions ChatPermissions
	// Last message in the chat; may be null
	LastMessage Message
	// Positions of the chat in chat lists
	Positions []ChatPosition
	// True, if the chat is marked as unread
	IsMarkedAsUnread bool
	// True, if the chat is blocked by the current user and private messages from the chat
	// can't be received
	IsBlocked bool
	// True, if the chat has scheduled messages
	HasScheduledMessages bool
	// True, if the chat messages can be deleted only for the current user while other users
	// will continue to see the messages
	CanBeDeletedOnlyForSelf bool
	// True, if the chat messages can be deleted for all users
	CanBeDeletedForAllUsers bool
	// True, if the chat can be reported to Telegram moderators through reportChat or
	// reportChatPhoto
	CanBeReported bool
	// Default value of the disable_notification parameter, used when a message is sent to
	// the chat
	DefaultDisableNotification bool
	// Number of unread messages in the chat
	UnreadCount int32
	// Identifier of the last read incoming message
	LastReadInboxMessageID int64
	// Identifier of the last read outgoing message
	LastReadOutboxMessageID int64
	// Number of unread messages with a mention/reply in the chat
	UnreadMentionCount int32
	// Notification settings for this chat
	NotificationSettings ChatNotificationSettings
	// Current message Time To Live setting (self-destruct timer) for the chat; 0 if not
	// defined. TTL is counted from the time message or its content is viewed in secret chats
	// and from the send date in other chats
	MessageTTLSetting int32
	// Describes actions which should be possible to do through a chat action bar; may be
	// null
	ActionBar ChatActionBarClass
	// Contains information about voice chat of the chat
	VoiceChat VoiceChat
	// Identifier of the message from which reply markup needs to be used; 0 if there is no
	// default custom reply markup in the chat
	ReplyMarkupMessageID int64
	// A draft of a message in the chat; may be null
	DraftMessage DraftMessage
	// Contains application-specific data associated with the chat. (For example, the chat
	// scroll position or local chat notification settings can be stored here.) Persistent if
	// the message database is used
	ClientData string
}

// ChatTypeID is TL type id of Chat.
const ChatTypeID = 0x77f6d111

// Ensuring interfaces in compile-time for Chat.
var (
	_ bin.Encoder     = &Chat{}
	_ bin.Decoder     = &Chat{}
	_ bin.BareEncoder = &Chat{}
	_ bin.BareDecoder = &Chat{}
)

func (c *Chat) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.ID == 0) {
		return false
	}
	if !(c.Type == nil) {
		return false
	}
	if !(c.Title == "") {
		return false
	}
	if !(c.Photo.Zero()) {
		return false
	}
	if !(c.Permissions.Zero()) {
		return false
	}
	if !(c.LastMessage.Zero()) {
		return false
	}
	if !(c.Positions == nil) {
		return false
	}
	if !(c.IsMarkedAsUnread == false) {
		return false
	}
	if !(c.IsBlocked == false) {
		return false
	}
	if !(c.HasScheduledMessages == false) {
		return false
	}
	if !(c.CanBeDeletedOnlyForSelf == false) {
		return false
	}
	if !(c.CanBeDeletedForAllUsers == false) {
		return false
	}
	if !(c.CanBeReported == false) {
		return false
	}
	if !(c.DefaultDisableNotification == false) {
		return false
	}
	if !(c.UnreadCount == 0) {
		return false
	}
	if !(c.LastReadInboxMessageID == 0) {
		return false
	}
	if !(c.LastReadOutboxMessageID == 0) {
		return false
	}
	if !(c.UnreadMentionCount == 0) {
		return false
	}
	if !(c.NotificationSettings.Zero()) {
		return false
	}
	if !(c.MessageTTLSetting == 0) {
		return false
	}
	if !(c.ActionBar == nil) {
		return false
	}
	if !(c.VoiceChat.Zero()) {
		return false
	}
	if !(c.ReplyMarkupMessageID == 0) {
		return false
	}
	if !(c.DraftMessage.Zero()) {
		return false
	}
	if !(c.ClientData == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *Chat) String() string {
	if c == nil {
		return "Chat(nil)"
	}
	type Alias Chat
	return fmt.Sprintf("Chat%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*Chat) TypeID() uint32 {
	return ChatTypeID
}

// TypeName returns name of type in TL schema.
func (*Chat) TypeName() string {
	return "chat"
}

// TypeInfo returns info about TL type.
func (c *Chat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chat",
		ID:   ChatTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Type",
			SchemaName: "type",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "Photo",
			SchemaName: "photo",
		},
		{
			Name:       "Permissions",
			SchemaName: "permissions",
		},
		{
			Name:       "LastMessage",
			SchemaName: "last_message",
		},
		{
			Name:       "Positions",
			SchemaName: "positions",
		},
		{
			Name:       "IsMarkedAsUnread",
			SchemaName: "is_marked_as_unread",
		},
		{
			Name:       "IsBlocked",
			SchemaName: "is_blocked",
		},
		{
			Name:       "HasScheduledMessages",
			SchemaName: "has_scheduled_messages",
		},
		{
			Name:       "CanBeDeletedOnlyForSelf",
			SchemaName: "can_be_deleted_only_for_self",
		},
		{
			Name:       "CanBeDeletedForAllUsers",
			SchemaName: "can_be_deleted_for_all_users",
		},
		{
			Name:       "CanBeReported",
			SchemaName: "can_be_reported",
		},
		{
			Name:       "DefaultDisableNotification",
			SchemaName: "default_disable_notification",
		},
		{
			Name:       "UnreadCount",
			SchemaName: "unread_count",
		},
		{
			Name:       "LastReadInboxMessageID",
			SchemaName: "last_read_inbox_message_id",
		},
		{
			Name:       "LastReadOutboxMessageID",
			SchemaName: "last_read_outbox_message_id",
		},
		{
			Name:       "UnreadMentionCount",
			SchemaName: "unread_mention_count",
		},
		{
			Name:       "NotificationSettings",
			SchemaName: "notification_settings",
		},
		{
			Name:       "MessageTTLSetting",
			SchemaName: "message_ttl_setting",
		},
		{
			Name:       "ActionBar",
			SchemaName: "action_bar",
		},
		{
			Name:       "VoiceChat",
			SchemaName: "voice_chat",
		},
		{
			Name:       "ReplyMarkupMessageID",
			SchemaName: "reply_markup_message_id",
		},
		{
			Name:       "DraftMessage",
			SchemaName: "draft_message",
		},
		{
			Name:       "ClientData",
			SchemaName: "client_data",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *Chat) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chat#77f6d111 as nil")
	}
	b.PutID(ChatTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *Chat) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chat#77f6d111 as nil")
	}
	b.PutLong(c.ID)
	if c.Type == nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field type is nil")
	}
	if err := c.Type.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field type: %w", err)
	}
	b.PutString(c.Title)
	if err := c.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field photo: %w", err)
	}
	if err := c.Permissions.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field permissions: %w", err)
	}
	if err := c.LastMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field last_message: %w", err)
	}
	b.PutInt(len(c.Positions))
	for idx, v := range c.Positions {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare chat#77f6d111: field positions element with index %d: %w", idx, err)
		}
	}
	b.PutBool(c.IsMarkedAsUnread)
	b.PutBool(c.IsBlocked)
	b.PutBool(c.HasScheduledMessages)
	b.PutBool(c.CanBeDeletedOnlyForSelf)
	b.PutBool(c.CanBeDeletedForAllUsers)
	b.PutBool(c.CanBeReported)
	b.PutBool(c.DefaultDisableNotification)
	b.PutInt32(c.UnreadCount)
	b.PutLong(c.LastReadInboxMessageID)
	b.PutLong(c.LastReadOutboxMessageID)
	b.PutInt32(c.UnreadMentionCount)
	if err := c.NotificationSettings.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field notification_settings: %w", err)
	}
	b.PutInt32(c.MessageTTLSetting)
	if c.ActionBar == nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field action_bar is nil")
	}
	if err := c.ActionBar.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field action_bar: %w", err)
	}
	if err := c.VoiceChat.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field voice_chat: %w", err)
	}
	b.PutLong(c.ReplyMarkupMessageID)
	if err := c.DraftMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode chat#77f6d111: field draft_message: %w", err)
	}
	b.PutString(c.ClientData)
	return nil
}

// Decode implements bin.Decoder.
func (c *Chat) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chat#77f6d111 to nil")
	}
	if err := b.ConsumeID(ChatTypeID); err != nil {
		return fmt.Errorf("unable to decode chat#77f6d111: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *Chat) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chat#77f6d111 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field id: %w", err)
		}
		c.ID = value
	}
	{
		value, err := DecodeChatType(b)
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field type: %w", err)
		}
		c.Type = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field title: %w", err)
		}
		c.Title = value
	}
	{
		if err := c.Photo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field photo: %w", err)
		}
	}
	{
		if err := c.Permissions.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field permissions: %w", err)
		}
	}
	{
		if err := c.LastMessage.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field last_message: %w", err)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field positions: %w", err)
		}

		if headerLen > 0 {
			c.Positions = make([]ChatPosition, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value ChatPosition
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare chat#77f6d111: field positions: %w", err)
			}
			c.Positions = append(c.Positions, value)
		}
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field is_marked_as_unread: %w", err)
		}
		c.IsMarkedAsUnread = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field is_blocked: %w", err)
		}
		c.IsBlocked = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field has_scheduled_messages: %w", err)
		}
		c.HasScheduledMessages = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field can_be_deleted_only_for_self: %w", err)
		}
		c.CanBeDeletedOnlyForSelf = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field can_be_deleted_for_all_users: %w", err)
		}
		c.CanBeDeletedForAllUsers = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field can_be_reported: %w", err)
		}
		c.CanBeReported = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field default_disable_notification: %w", err)
		}
		c.DefaultDisableNotification = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field unread_count: %w", err)
		}
		c.UnreadCount = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field last_read_inbox_message_id: %w", err)
		}
		c.LastReadInboxMessageID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field last_read_outbox_message_id: %w", err)
		}
		c.LastReadOutboxMessageID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field unread_mention_count: %w", err)
		}
		c.UnreadMentionCount = value
	}
	{
		if err := c.NotificationSettings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field notification_settings: %w", err)
		}
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field message_ttl_setting: %w", err)
		}
		c.MessageTTLSetting = value
	}
	{
		value, err := DecodeChatActionBar(b)
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field action_bar: %w", err)
		}
		c.ActionBar = value
	}
	{
		if err := c.VoiceChat.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field voice_chat: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field reply_markup_message_id: %w", err)
		}
		c.ReplyMarkupMessageID = value
	}
	{
		if err := c.DraftMessage.Decode(b); err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field draft_message: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode chat#77f6d111: field client_data: %w", err)
		}
		c.ClientData = value
	}
	return nil
}

// GetID returns value of ID field.
func (c *Chat) GetID() (value int64) {
	return c.ID
}

// GetType returns value of Type field.
func (c *Chat) GetType() (value ChatTypeClass) {
	return c.Type
}

// GetTitle returns value of Title field.
func (c *Chat) GetTitle() (value string) {
	return c.Title
}

// GetPhoto returns value of Photo field.
func (c *Chat) GetPhoto() (value ChatPhotoInfo) {
	return c.Photo
}

// GetPermissions returns value of Permissions field.
func (c *Chat) GetPermissions() (value ChatPermissions) {
	return c.Permissions
}

// GetLastMessage returns value of LastMessage field.
func (c *Chat) GetLastMessage() (value Message) {
	return c.LastMessage
}

// GetPositions returns value of Positions field.
func (c *Chat) GetPositions() (value []ChatPosition) {
	return c.Positions
}

// GetIsMarkedAsUnread returns value of IsMarkedAsUnread field.
func (c *Chat) GetIsMarkedAsUnread() (value bool) {
	return c.IsMarkedAsUnread
}

// GetIsBlocked returns value of IsBlocked field.
func (c *Chat) GetIsBlocked() (value bool) {
	return c.IsBlocked
}

// GetHasScheduledMessages returns value of HasScheduledMessages field.
func (c *Chat) GetHasScheduledMessages() (value bool) {
	return c.HasScheduledMessages
}

// GetCanBeDeletedOnlyForSelf returns value of CanBeDeletedOnlyForSelf field.
func (c *Chat) GetCanBeDeletedOnlyForSelf() (value bool) {
	return c.CanBeDeletedOnlyForSelf
}

// GetCanBeDeletedForAllUsers returns value of CanBeDeletedForAllUsers field.
func (c *Chat) GetCanBeDeletedForAllUsers() (value bool) {
	return c.CanBeDeletedForAllUsers
}

// GetCanBeReported returns value of CanBeReported field.
func (c *Chat) GetCanBeReported() (value bool) {
	return c.CanBeReported
}

// GetDefaultDisableNotification returns value of DefaultDisableNotification field.
func (c *Chat) GetDefaultDisableNotification() (value bool) {
	return c.DefaultDisableNotification
}

// GetUnreadCount returns value of UnreadCount field.
func (c *Chat) GetUnreadCount() (value int32) {
	return c.UnreadCount
}

// GetLastReadInboxMessageID returns value of LastReadInboxMessageID field.
func (c *Chat) GetLastReadInboxMessageID() (value int64) {
	return c.LastReadInboxMessageID
}

// GetLastReadOutboxMessageID returns value of LastReadOutboxMessageID field.
func (c *Chat) GetLastReadOutboxMessageID() (value int64) {
	return c.LastReadOutboxMessageID
}

// GetUnreadMentionCount returns value of UnreadMentionCount field.
func (c *Chat) GetUnreadMentionCount() (value int32) {
	return c.UnreadMentionCount
}

// GetNotificationSettings returns value of NotificationSettings field.
func (c *Chat) GetNotificationSettings() (value ChatNotificationSettings) {
	return c.NotificationSettings
}

// GetMessageTTLSetting returns value of MessageTTLSetting field.
func (c *Chat) GetMessageTTLSetting() (value int32) {
	return c.MessageTTLSetting
}

// GetActionBar returns value of ActionBar field.
func (c *Chat) GetActionBar() (value ChatActionBarClass) {
	return c.ActionBar
}

// GetVoiceChat returns value of VoiceChat field.
func (c *Chat) GetVoiceChat() (value VoiceChat) {
	return c.VoiceChat
}

// GetReplyMarkupMessageID returns value of ReplyMarkupMessageID field.
func (c *Chat) GetReplyMarkupMessageID() (value int64) {
	return c.ReplyMarkupMessageID
}

// GetDraftMessage returns value of DraftMessage field.
func (c *Chat) GetDraftMessage() (value DraftMessage) {
	return c.DraftMessage
}

// GetClientData returns value of ClientData field.
func (c *Chat) GetClientData() (value string) {
	return c.ClientData
}
