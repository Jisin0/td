// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// GetStarTransactionsRequest represents TL type `getStarTransactions#f0c6dd98`.
type GetStarTransactionsRequest struct {
	// Offset of the first transaction to return as received from the previous request; use
	// empty string to get the first chunk of results
	Offset string
	// Direction of the transactions to receive; pass null to get all transactions
	Direction StarTransactionDirectionClass
}

// GetStarTransactionsRequestTypeID is TL type id of GetStarTransactionsRequest.
const GetStarTransactionsRequestTypeID = 0xf0c6dd98

// Ensuring interfaces in compile-time for GetStarTransactionsRequest.
var (
	_ bin.Encoder     = &GetStarTransactionsRequest{}
	_ bin.Decoder     = &GetStarTransactionsRequest{}
	_ bin.BareEncoder = &GetStarTransactionsRequest{}
	_ bin.BareDecoder = &GetStarTransactionsRequest{}
)

func (g *GetStarTransactionsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Offset == "") {
		return false
	}
	if !(g.Direction == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetStarTransactionsRequest) String() string {
	if g == nil {
		return "GetStarTransactionsRequest(nil)"
	}
	type Alias GetStarTransactionsRequest
	return fmt.Sprintf("GetStarTransactionsRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetStarTransactionsRequest) TypeID() uint32 {
	return GetStarTransactionsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetStarTransactionsRequest) TypeName() string {
	return "getStarTransactions"
}

// TypeInfo returns info about TL type.
func (g *GetStarTransactionsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getStarTransactions",
		ID:   GetStarTransactionsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
		{
			Name:       "Direction",
			SchemaName: "direction",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetStarTransactionsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getStarTransactions#f0c6dd98 as nil")
	}
	b.PutID(GetStarTransactionsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetStarTransactionsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getStarTransactions#f0c6dd98 as nil")
	}
	b.PutString(g.Offset)
	if g.Direction == nil {
		return fmt.Errorf("unable to encode getStarTransactions#f0c6dd98: field direction is nil")
	}
	if err := g.Direction.Encode(b); err != nil {
		return fmt.Errorf("unable to encode getStarTransactions#f0c6dd98: field direction: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *GetStarTransactionsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getStarTransactions#f0c6dd98 to nil")
	}
	if err := b.ConsumeID(GetStarTransactionsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getStarTransactions#f0c6dd98: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetStarTransactionsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getStarTransactions#f0c6dd98 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode getStarTransactions#f0c6dd98: field offset: %w", err)
		}
		g.Offset = value
	}
	{
		value, err := DecodeStarTransactionDirection(b)
		if err != nil {
			return fmt.Errorf("unable to decode getStarTransactions#f0c6dd98: field direction: %w", err)
		}
		g.Direction = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (g *GetStarTransactionsRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if g == nil {
		return fmt.Errorf("can't encode getStarTransactions#f0c6dd98 as nil")
	}
	b.ObjStart()
	b.PutID("getStarTransactions")
	b.Comma()
	b.FieldStart("offset")
	b.PutString(g.Offset)
	b.Comma()
	b.FieldStart("direction")
	if g.Direction == nil {
		return fmt.Errorf("unable to encode getStarTransactions#f0c6dd98: field direction is nil")
	}
	if err := g.Direction.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode getStarTransactions#f0c6dd98: field direction: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (g *GetStarTransactionsRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if g == nil {
		return fmt.Errorf("can't decode getStarTransactions#f0c6dd98 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("getStarTransactions"); err != nil {
				return fmt.Errorf("unable to decode getStarTransactions#f0c6dd98: %w", err)
			}
		case "offset":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode getStarTransactions#f0c6dd98: field offset: %w", err)
			}
			g.Offset = value
		case "direction":
			value, err := DecodeTDLibJSONStarTransactionDirection(b)
			if err != nil {
				return fmt.Errorf("unable to decode getStarTransactions#f0c6dd98: field direction: %w", err)
			}
			g.Direction = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetOffset returns value of Offset field.
func (g *GetStarTransactionsRequest) GetOffset() (value string) {
	if g == nil {
		return
	}
	return g.Offset
}

// GetDirection returns value of Direction field.
func (g *GetStarTransactionsRequest) GetDirection() (value StarTransactionDirectionClass) {
	if g == nil {
		return
	}
	return g.Direction
}

// GetStarTransactions invokes method getStarTransactions#f0c6dd98 returning error if any.
func (c *Client) GetStarTransactions(ctx context.Context, request *GetStarTransactionsRequest) (*StarTransactions, error) {
	var result StarTransactions

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
